import{h as R,i as C}from"./index-w1dbetra.js";var S=R((J)=>{var v=J&&J.__createBinding||(Object.create?function(q,H,K,Q){if(Q===void 0)Q=K;Object.defineProperty(q,Q,{enumerable:!0,get:function(){return H[K]}})}:function(q,H,K,Q){if(Q===void 0)Q=K;q[Q]=H[K]}),k=J&&J.__setModuleDefault||(Object.create?function(q,H){Object.defineProperty(q,"default",{enumerable:!0,value:H})}:function(q,H){q.default=H}),E=J&&J.__importStar||function(q){if(q&&q.__esModule)return q;var H={};if(q!=null){for(var K in q)if(K!=="default"&&Object.hasOwnProperty.call(q,K))v(H,q,K)}return k(H,q),H},A=J&&J.__awaiter||function(q,H,K,Q){function W(V){return V instanceof K?V:new K(function(Y){Y(V)})}return new(K||(K=Promise))(function(V,Y){function $(Z){try{B(Q.next(Z))}catch(I){Y(I)}}function L(Z){try{B(Q.throw(Z))}catch(I){Y(I)}}function B(Z){Z.done?V(Z.value):W(Z.value).then($,L)}B((Q=Q.apply(q,H||[])).next())})},z;Object.defineProperty(J,"__esModule",{value:!0});J.getCmdPath=J.tryGetExecutablePath=J.isRooted=J.isDirectory=J.exists=J.READONLY=J.UV_FS_O_EXLOCK=J.IS_WINDOWS=J.unlink=J.symlink=J.stat=J.rmdir=J.rm=J.rename=J.readlink=J.readdir=J.open=J.mkdir=J.lstat=J.copyFile=J.chmod=void 0;var j=E(C("fs")),b=E(C("path"));z=j.promises,J.chmod=z.chmod,J.copyFile=z.copyFile,J.lstat=z.lstat,J.mkdir=z.mkdir,J.open=z.open,J.readdir=z.readdir,J.readlink=z.readlink,J.rename=z.rename,J.rm=z.rm,J.rmdir=z.rmdir,J.stat=z.stat,J.symlink=z.symlink,J.unlink=z.unlink;J.IS_WINDOWS=process.platform==="win32";J.UV_FS_O_EXLOCK=268435456;J.READONLY=j.constants.O_RDONLY;function _(q){return A(this,void 0,void 0,function*(){try{yield J.stat(q)}catch(H){if(H.code==="ENOENT")return!1;throw H}return!0})}J.exists=_;function f(q,H=!1){return A(this,void 0,void 0,function*(){return(H?yield J.stat(q):yield J.lstat(q)).isDirectory()})}J.isDirectory=f;function m(q){if(q=n(q),!q)throw new Error('isRooted() parameter "p" cannot be empty');if(J.IS_WINDOWS)return q.startsWith("\\")||/^[A-Z]:/i.test(q);return q.startsWith("/")}J.isRooted=m;function P(q,H){return A(this,void 0,void 0,function*(){let K=void 0;try{K=yield J.stat(q)}catch(W){if(W.code!=="ENOENT")console.log(`Unexpected error attempting to determine if executable file exists '${q}': ${W}`)}if(K&&K.isFile()){if(J.IS_WINDOWS){let W=b.extname(q).toUpperCase();if(H.some((V)=>V.toUpperCase()===W))return q}else if(N(K))return q}let Q=q;for(let W of H){q=Q+W,K=void 0;try{K=yield J.stat(q)}catch(V){if(V.code!=="ENOENT")console.log(`Unexpected error attempting to determine if executable file exists '${q}': ${V}`)}if(K&&K.isFile()){if(J.IS_WINDOWS){try{let V=b.dirname(q),Y=b.basename(q).toUpperCase();for(let $ of yield J.readdir(V))if(Y===$.toUpperCase()){q=b.join(V,$);break}}catch(V){console.log(`Unexpected error attempting to determine the actual case of the file '${q}': ${V}`)}return q}else if(N(K))return q}}return""})}J.tryGetExecutablePath=P;function n(q){if(q=q||"",J.IS_WINDOWS)return q=q.replace(/\//g,"\\"),q.replace(/\\\\+/g,"\\");return q.replace(/\/\/+/g,"/")}function N(q){return(q.mode&1)>0||(q.mode&8)>0&&q.gid===process.getgid()||(q.mode&64)>0&&q.uid===process.getuid()}function h(){var q;return(q=process.env.COMSPEC)!==null&&q!==void 0?q:"cmd.exe"}J.getCmdPath=h});var a=R((X)=>{var c=X&&X.__createBinding||(Object.create?function(q,H,K,Q){if(Q===void 0)Q=K;Object.defineProperty(q,Q,{enumerable:!0,get:function(){return H[K]}})}:function(q,H,K,Q){if(Q===void 0)Q=K;q[Q]=H[K]}),x=X&&X.__setModuleDefault||(Object.create?function(q,H){Object.defineProperty(q,"default",{enumerable:!0,value:H})}:function(q,H){q.default=H}),y=X&&X.__importStar||function(q){if(q&&q.__esModule)return q;var H={};if(q!=null){for(var K in q)if(K!=="default"&&Object.hasOwnProperty.call(q,K))c(H,q,K)}return x(H,q),H},O=X&&X.__awaiter||function(q,H,K,Q){function W(V){return V instanceof K?V:new K(function(Y){Y(V)})}return new(K||(K=Promise))(function(V,Y){function $(Z){try{B(Q.next(Z))}catch(I){Y(I)}}function L(Z){try{B(Q.throw(Z))}catch(I){Y(I)}}function B(Z){Z.done?V(Z.value):W(Z.value).then($,L)}B((Q=Q.apply(q,H||[])).next())})};Object.defineProperty(X,"__esModule",{value:!0});X.findInPath=X.which=X.mkdirP=X.rmRF=X.mv=X.cp=void 0;var u=C("assert"),G=y(C("path")),T=y(S());function d(q,H,K={}){return O(this,void 0,void 0,function*(){let{force:Q,recursive:W,copySourceDirectory:V}=l(K),Y=(yield T.exists(H))?yield T.stat(H):null;if(Y&&Y.isFile()&&!Q)return;let $=Y&&Y.isDirectory()&&V?G.join(H,G.basename(q)):H;if(!(yield T.exists(q)))throw new Error(`no such file or directory: ${q}`);if((yield T.stat(q)).isDirectory())if(!W)throw new Error(`Failed to copy. ${q} is a directory, but tried to copy without recursive flag.`);else yield F(q,$,0,Q);else{if(G.relative(q,$)==="")throw new Error(`'${$}' and '${q}' are the same file`);yield U(q,$,Q)}})}X.cp=d;function p(q,H,K={}){return O(this,void 0,void 0,function*(){if(yield T.exists(H)){let Q=!0;if(yield T.isDirectory(H))H=G.join(H,G.basename(q)),Q=yield T.exists(H);if(Q)if(K.force==null||K.force)yield w(H);else throw new Error("Destination already exists")}yield M(G.dirname(H)),yield T.rename(q,H)})}X.mv=p;function w(q){return O(this,void 0,void 0,function*(){if(T.IS_WINDOWS){if(/[*"<>|]/.test(q))throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows')}try{yield T.rm(q,{force:!0,maxRetries:3,recursive:!0,retryDelay:300})}catch(H){throw new Error(`File was unable to be removed ${H}`)}})}X.rmRF=w;function M(q){return O(this,void 0,void 0,function*(){u.ok(q,"a path argument must be provided"),yield T.mkdir(q,{recursive:!0})})}X.mkdirP=M;function D(q,H){return O(this,void 0,void 0,function*(){if(!q)throw new Error("parameter 'tool' is required");if(H){let Q=yield D(q,!1);if(!Q)if(T.IS_WINDOWS)throw new Error(`Unable to locate executable file: ${q}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);else throw new Error(`Unable to locate executable file: ${q}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);return Q}let K=yield g(q);if(K&&K.length>0)return K[0];return""})}X.which=D;function g(q){return O(this,void 0,void 0,function*(){if(!q)throw new Error("parameter 'tool' is required");let H=[];if(T.IS_WINDOWS&&process.env.PATHEXT){for(let W of process.env.PATHEXT.split(G.delimiter))if(W)H.push(W)}if(T.isRooted(q)){let W=yield T.tryGetExecutablePath(q,H);if(W)return[W];return[]}if(q.includes(G.sep))return[];let K=[];if(process.env.PATH){for(let W of process.env.PATH.split(G.delimiter))if(W)K.push(W)}let Q=[];for(let W of K){let V=yield T.tryGetExecutablePath(G.join(W,q),H);if(V)Q.push(V)}return Q})}X.findInPath=g;function l(q){let H=q.force==null?!0:q.force,K=Boolean(q.recursive),Q=q.copySourceDirectory==null?!0:Boolean(q.copySourceDirectory);return{force:H,recursive:K,copySourceDirectory:Q}}function F(q,H,K,Q){return O(this,void 0,void 0,function*(){if(K>=255)return;K++,yield M(H);let W=yield T.readdir(q);for(let V of W){let Y=`${q}/${V}`,$=`${H}/${V}`;if((yield T.lstat(Y)).isDirectory())yield F(Y,$,K,Q);else yield U(Y,$,Q)}yield T.chmod(H,(yield T.stat(q)).mode)})}function U(q,H,K){return O(this,void 0,void 0,function*(){if((yield T.lstat(q)).isSymbolicLink()){try{yield T.lstat(H),yield T.unlink(H)}catch(W){if(W.code==="EPERM")yield T.chmod(H,"0666"),yield T.unlink(H)}let Q=yield T.readlink(q);yield T.symlink(Q,H,T.IS_WINDOWS?"junction":null)}else if(!(yield T.exists(H))||K)yield T.copyFile(q,H)})}});export default a();
export{S as e,a as f};

//# debugId=B5CBEDB94A7BDD9564756E2164756E21
//# sourceMappingURL=data:application/json;base64,
