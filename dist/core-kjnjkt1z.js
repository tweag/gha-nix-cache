import{e as F5,f as N5}from"./io-v21dydqq.js";import{h as L,i as G}from"./index-w1dbetra.js";var VE=L((IF)=>{Object.defineProperty(IF,"__esModule",{value:!0});IF.toCommandProperties=IF.toCommandValue=void 0;function Hw(A){if(A===null||A===void 0)return"";else if(typeof A==="string"||A instanceof String)return A;return JSON.stringify(A)}IF.toCommandValue=Hw;function xw(A){if(!Object.keys(A).length)return{};return{title:A.title,file:A.file,line:A.startLine,endLine:A.endLine,col:A.startColumn,endColumn:A.endColumn}}IF.toCommandProperties=xw});var NF=L((CQ)=>{var Tw=CQ&&CQ.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;var E=Object.getOwnPropertyDescriptor(Q,B);if(!E||("get"in E?!Q.__esModule:E.writable||E.configurable))E={enumerable:!0,get:function(){return Q[B]}};Object.defineProperty(A,I,E)}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),jw=CQ&&CQ.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),$w=CQ&&CQ.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.prototype.hasOwnProperty.call(A,B))Tw(Q,A,B)}return jw(Q,A),Q};Object.defineProperty(CQ,"__esModule",{value:!0});CQ.issue=CQ.issueCommand=void 0;var yw=$w(G("os")),gF=VE();function DF(A,Q,B){let I=new FF(A,Q,B);process.stdout.write(I.toString()+yw.EOL)}CQ.issueCommand=DF;function qw(A,Q=""){DF(A,{},Q)}CQ.issue=qw;var CF="::";class FF{constructor(A,Q,B){if(!A)A="missing.command";this.command=A,this.properties=Q,this.message=B}toString(){let A=CF+this.command;if(this.properties&&Object.keys(this.properties).length>0){A+=" ";let Q=!0;for(let B in this.properties)if(this.properties.hasOwnProperty(B)){let I=this.properties[B];if(I){if(Q)Q=!1;else A+=",";A+=`${B}=${Pw(I)}`}}}return A+=`${CF}${Ow(this.message)}`,A}}function Ow(A){return gF.toCommandValue(A).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A")}function Pw(A){return gF.toCommandValue(A).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/:/g,"%3A").replace(/,/g,"%2C")}});var UF=L((gQ)=>{var kw=gQ&&gQ.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;var E=Object.getOwnPropertyDescriptor(Q,B);if(!E||("get"in E?!Q.__esModule:E.writable||E.configurable))E={enumerable:!0,get:function(){return Q[B]}};Object.defineProperty(A,I,E)}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),_w=gQ&&gQ.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),gg=gQ&&gQ.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.prototype.hasOwnProperty.call(A,B))kw(Q,A,B)}return _w(Q,A),Q};Object.defineProperty(gQ,"__esModule",{value:!0});gQ.prepareKeyValueMessage=gQ.issueFileCommand=void 0;var fw=gg(G("crypto")),YF=gg(G("fs")),Cg=gg(G("os")),JF=VE();function vw(A,Q){let B=process.env[`GITHUB_${A}`];if(!B)throw new Error(`Unable to find environment variable for file command ${A}`);if(!YF.existsSync(B))throw new Error(`Missing file at path: ${B}`);YF.appendFileSync(B,`${JF.toCommandValue(Q)}${Cg.EOL}`,{encoding:"utf8"})}gQ.issueFileCommand=vw;function bw(A,Q){let B=`ghadelimiter_${fw.randomUUID()}`,I=JF.toCommandValue(Q);if(A.includes(B))throw new Error(`Unexpected input: name should not contain the delimiter "${B}"`);if(I.includes(B))throw new Error(`Unexpected input: value should not contain the delimiter "${B}"`);return`${A}<<${B}${Cg.EOL}${I}${Cg.EOL}${B}`}gQ.prepareKeyValueMessage=bw});var MF=L((RF)=>{Object.defineProperty(RF,"__esModule",{value:!0});RF.checkBypass=RF.getProxyUrl=void 0;function mw(A){let Q=A.protocol==="https:";if(GF(A))return;let B=(()=>{if(Q)return process.env.https_proxy||process.env.HTTPS_PROXY;else return process.env.http_proxy||process.env.HTTP_PROXY})();if(B)try{return new Dg(B)}catch(I){if(!B.startsWith("http://")&&!B.startsWith("https://"))return new Dg(`http://${B}`)}else return}RF.getProxyUrl=mw;function GF(A){if(!A.hostname)return!1;let Q=A.hostname;if(cw(Q))return!0;let B=process.env.no_proxy||process.env.NO_PROXY||"";if(!B)return!1;let I;if(A.port)I=Number(A.port);else if(A.protocol==="http:")I=80;else if(A.protocol==="https:")I=443;let E=[A.hostname.toUpperCase()];if(typeof I==="number")E.push(`${E[0]}:${I}`);for(let C of B.split(",").map((g)=>g.trim().toUpperCase()).filter((g)=>g))if(C==="*"||E.some((g)=>g===C||g.endsWith(`.${C}`)||C.startsWith(".")&&g.endsWith(`${C}`)))return!0;return!1}RF.checkBypass=GF;function cw(A){let Q=A.toLowerCase();return Q==="localhost"||Q.startsWith("127.")||Q.startsWith("[::1]")||Q.startsWith("[0:0:0:0:0:0:0:1]")}class Dg extends URL{constructor(A,Q){super(A,Q);this._decodedUsername=decodeURIComponent(super.username),this._decodedPassword=decodeURIComponent(super.password)}get username(){return this._decodedUsername}get password(){return this._decodedPassword}}});var ZF=L((sw)=>{var Bz=G("net"),pw=G("tls"),Fg=G("http"),LF=G("https"),dw=G("events"),Iz=G("assert"),lw=G("util");sw.httpOverHttp=iw;sw.httpsOverHttp=nw;sw.httpOverHttps=ow;sw.httpsOverHttps=aw;function iw(A){var Q=new vQ(A);return Q.request=Fg.request,Q}function nw(A){var Q=new vQ(A);return Q.request=Fg.request,Q.createSocket=VF,Q.defaultPort=443,Q}function ow(A){var Q=new vQ(A);return Q.request=LF.request,Q}function aw(A){var Q=new vQ(A);return Q.request=LF.request,Q.createSocket=VF,Q.defaultPort=443,Q}function vQ(A){var Q=this;Q.options=A||{},Q.proxyOptions=Q.options.proxy||{},Q.maxSockets=Q.options.maxSockets||Fg.Agent.defaultMaxSockets,Q.requests=[],Q.sockets=[],Q.on("free",function B(I,E,C,g){var D=WF(E,C,g);for(var F=0,Y=Q.requests.length;F<Y;++F){var N=Q.requests[F];if(N.host===D.host&&N.port===D.port){Q.requests.splice(F,1),N.request.onSocket(I);return}}I.destroy(),Q.removeSocket(I)})}lw.inherits(vQ,dw.EventEmitter);vQ.prototype.addRequest=function A(Q,B,I,E){var C=this,g=Ng({request:Q},C.options,WF(B,I,E));if(C.sockets.length>=this.maxSockets){C.requests.push(g);return}C.createSocket(g,function(D){D.on("free",F),D.on("close",Y),D.on("agentRemove",Y),Q.onSocket(D);function F(){C.emit("free",D,g)}function Y(N){C.removeSocket(D),D.removeListener("free",F),D.removeListener("close",Y),D.removeListener("agentRemove",Y)}})};vQ.prototype.createSocket=function A(Q,B){var I=this,E={};I.sockets.push(E);var C=Ng({},I.proxyOptions,{method:"CONNECT",path:Q.host+":"+Q.port,agent:!1,headers:{host:Q.host+":"+Q.port}});if(Q.localAddress)C.localAddress=Q.localAddress;if(C.proxyAuth)C.headers=C.headers||{},C.headers["Proxy-Authorization"]="Basic "+new Buffer(C.proxyAuth).toString("base64");eQ("making CONNECT request");var g=I.request(C);g.useChunkedEncodingByDefault=!1,g.once("response",D),g.once("upgrade",F),g.once("connect",Y),g.once("error",N),g.end();function D(J){J.upgrade=!0}function F(J,U,R){process.nextTick(function(){Y(J,U,R)})}function Y(J,U,R){if(g.removeAllListeners(),U.removeAllListeners(),J.statusCode!==200){eQ("tunneling socket could not be established, statusCode=%d",J.statusCode),U.destroy();var w=new Error("tunneling socket could not be established, statusCode="+J.statusCode);w.code="ECONNRESET",Q.request.emit("error",w),I.removeSocket(E);return}if(R.length>0){eQ("got illegal response body from proxy"),U.destroy();var w=new Error("got illegal response body from proxy");w.code="ECONNRESET",Q.request.emit("error",w),I.removeSocket(E);return}return eQ("tunneling connection has established"),I.sockets[I.sockets.indexOf(E)]=U,B(U)}function N(J){g.removeAllListeners(),eQ(`tunneling socket could not be established, cause=%s
`,J.message,J.stack);var U=new Error("tunneling socket could not be established, cause="+J.message);U.code="ECONNRESET",Q.request.emit("error",U),I.removeSocket(E)}};vQ.prototype.removeSocket=function A(Q){var B=this.sockets.indexOf(Q);if(B===-1)return;this.sockets.splice(B,1);var I=this.requests.shift();if(I)this.createSocket(I,function(E){I.request.onSocket(E)})};function VF(A,Q){var B=this;vQ.prototype.createSocket.call(B,A,function(I){var E=A.request.getHeader("host"),C=Ng({},B.options,{socket:I,servername:E?E.replace(/:.*$/,""):A.host}),g=pw.connect(0,C);B.sockets[B.sockets.indexOf(I)]=g,Q(g)})}function WF(A,Q,B){if(typeof A==="string")return{host:A,port:Q,localAddress:B};return A}function Ng(A){for(var Q=1,B=arguments.length;Q<B;++Q){var I=arguments[Q];if(typeof I==="object"){var E=Object.keys(I);for(var C=0,g=E.length;C<g;++C){var D=E[C];if(I[D]!==void 0)A[D]=I[D]}}}return A}var eQ;if(process.env.NODE_DEBUG&&/\btunnel\b/.test(process.env.NODE_DEBUG))eQ=function(){var A=Array.prototype.slice.call(arguments);if(typeof A[0]==="string")A[0]="TUNNEL: "+A[0];else A.unshift("TUNNEL:");console.error.apply(console,A)};else eQ=function(){};sw.debug=eQ});var o=L((Cz,XF)=>{XF.exports={kClose:Symbol("close"),kDestroy:Symbol("destroy"),kDispatch:Symbol("dispatch"),kUrl:Symbol("url"),kWriting:Symbol("writing"),kResuming:Symbol("resuming"),kQueue:Symbol("queue"),kConnect:Symbol("connect"),kConnecting:Symbol("connecting"),kHeadersList:Symbol("headers list"),kKeepAliveDefaultTimeout:Symbol("default keep alive timeout"),kKeepAliveMaxTimeout:Symbol("max keep alive timeout"),kKeepAliveTimeoutThreshold:Symbol("keep alive timeout threshold"),kKeepAliveTimeoutValue:Symbol("keep alive timeout"),kKeepAlive:Symbol("keep alive"),kHeadersTimeout:Symbol("headers timeout"),kBodyTimeout:Symbol("body timeout"),kServerName:Symbol("server name"),kLocalAddress:Symbol("local address"),kHost:Symbol("host"),kNoRef:Symbol("no ref"),kBodyUsed:Symbol("used"),kRunning:Symbol("running"),kBlocking:Symbol("blocking"),kPending:Symbol("pending"),kSize:Symbol("size"),kBusy:Symbol("busy"),kQueued:Symbol("queued"),kFree:Symbol("free"),kConnected:Symbol("connected"),kClosed:Symbol("closed"),kNeedDrain:Symbol("need drain"),kReset:Symbol("reset"),kDestroyed:Symbol.for("nodejs.stream.destroyed"),kMaxHeadersSize:Symbol("max headers size"),kRunningIdx:Symbol("running index"),kPendingIdx:Symbol("pending index"),kError:Symbol("error"),kClients:Symbol("clients"),kClient:Symbol("client"),kParser:Symbol("parser"),kOnDestroyed:Symbol("destroy callbacks"),kPipelining:Symbol("pipelining"),kSocket:Symbol("socket"),kHostHeader:Symbol("host header"),kConnector:Symbol("connector"),kStrictContentLength:Symbol("strict content length"),kMaxRedirections:Symbol("maxRedirections"),kMaxRequests:Symbol("maxRequestsPerClient"),kProxy:Symbol("proxy agent options"),kCounter:Symbol("socket request counter"),kInterceptors:Symbol("dispatch interceptors"),kMaxResponseSize:Symbol("max response size"),kHTTP2Session:Symbol("http2Session"),kHTTP2SessionState:Symbol("http2Session state"),kHTTP2BuildRequest:Symbol("http2 build request"),kHTTP1BuildRequest:Symbol("http1 build request"),kHTTP2CopyHeaders:Symbol("http2 copy headers"),kHTTPConnVersion:Symbol("http connection version"),kRetryHandlerDefaultRetry:Symbol("retry agent default retry"),kConstruct:Symbol("constructable")}});var d=L((gz,KF)=>{class DA extends Error{constructor(A){super(A);this.name="UndiciError",this.code="UND_ERR"}}class Yg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Yg),this.name="ConnectTimeoutError",this.message=A||"Connect Timeout Error",this.code="UND_ERR_CONNECT_TIMEOUT"}}class Jg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Jg),this.name="HeadersTimeoutError",this.message=A||"Headers Timeout Error",this.code="UND_ERR_HEADERS_TIMEOUT"}}class Ug extends DA{constructor(A){super(A);Error.captureStackTrace(this,Ug),this.name="HeadersOverflowError",this.message=A||"Headers Overflow Error",this.code="UND_ERR_HEADERS_OVERFLOW"}}class Gg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Gg),this.name="BodyTimeoutError",this.message=A||"Body Timeout Error",this.code="UND_ERR_BODY_TIMEOUT"}}class Rg extends DA{constructor(A,Q,B,I){super(A);Error.captureStackTrace(this,Rg),this.name="ResponseStatusCodeError",this.message=A||"Response Status Code Error",this.code="UND_ERR_RESPONSE_STATUS_CODE",this.body=I,this.status=Q,this.statusCode=Q,this.headers=B}}class wg extends DA{constructor(A){super(A);Error.captureStackTrace(this,wg),this.name="InvalidArgumentError",this.message=A||"Invalid Argument Error",this.code="UND_ERR_INVALID_ARG"}}class Mg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Mg),this.name="InvalidReturnValueError",this.message=A||"Invalid Return Value Error",this.code="UND_ERR_INVALID_RETURN_VALUE"}}class Lg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Lg),this.name="AbortError",this.message=A||"Request aborted",this.code="UND_ERR_ABORTED"}}class Vg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Vg),this.name="InformationalError",this.message=A||"Request information",this.code="UND_ERR_INFO"}}class Wg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Wg),this.name="RequestContentLengthMismatchError",this.message=A||"Request body length does not match content-length header",this.code="UND_ERR_REQ_CONTENT_LENGTH_MISMATCH"}}class Zg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Zg),this.name="ResponseContentLengthMismatchError",this.message=A||"Response body length does not match content-length header",this.code="UND_ERR_RES_CONTENT_LENGTH_MISMATCH"}}class Xg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Xg),this.name="ClientDestroyedError",this.message=A||"The client is destroyed",this.code="UND_ERR_DESTROYED"}}class Sg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Sg),this.name="ClientClosedError",this.message=A||"The client is closed",this.code="UND_ERR_CLOSED"}}class Kg extends DA{constructor(A,Q){super(A);Error.captureStackTrace(this,Kg),this.name="SocketError",this.message=A||"Socket error",this.code="UND_ERR_SOCKET",this.socket=Q}}class WE extends DA{constructor(A){super(A);Error.captureStackTrace(this,WE),this.name="NotSupportedError",this.message=A||"Not supported error",this.code="UND_ERR_NOT_SUPPORTED"}}class SF extends DA{constructor(A){super(A);Error.captureStackTrace(this,WE),this.name="MissingUpstreamError",this.message=A||"No upstream has been added to the BalancedPool",this.code="UND_ERR_BPL_MISSING_UPSTREAM"}}class zg extends Error{constructor(A,Q,B){super(A);Error.captureStackTrace(this,zg),this.name="HTTPParserError",this.code=Q?`HPE_${Q}`:void 0,this.data=B?B.toString():void 0}}class Hg extends DA{constructor(A){super(A);Error.captureStackTrace(this,Hg),this.name="ResponseExceededMaxSizeError",this.message=A||"Response content exceeded max size",this.code="UND_ERR_RES_EXCEEDED_MAX_SIZE"}}class xg extends DA{constructor(A,Q,{headers:B,data:I}){super(A);Error.captureStackTrace(this,xg),this.name="RequestRetryError",this.message=A||"Request retry error",this.code="UND_ERR_REQ_RETRY",this.statusCode=Q,this.data=I,this.headers=B}}KF.exports={HTTPParserError:zg,UndiciError:DA,HeadersTimeoutError:Jg,HeadersOverflowError:Ug,BodyTimeoutError:Gg,RequestContentLengthMismatchError:Wg,ConnectTimeoutError:Yg,ResponseStatusCodeError:Rg,InvalidArgumentError:wg,InvalidReturnValueError:Mg,RequestAbortedError:Lg,ClientDestroyedError:Xg,ClientClosedError:Sg,InformationalError:Vg,SocketError:Kg,NotSupportedError:WE,ResponseContentLengthMismatchError:Zg,BalancedPoolMissingUpstreamError:SF,ResponseExceededMaxSizeError:Hg,RequestRetryError:xg}});var HF=L((Dz,zF)=>{var ZE={},hg=["Accept","Accept-Encoding","Accept-Language","Accept-Ranges","Access-Control-Allow-Credentials","Access-Control-Allow-Headers","Access-Control-Allow-Methods","Access-Control-Allow-Origin","Access-Control-Expose-Headers","Access-Control-Max-Age","Access-Control-Request-Headers","Access-Control-Request-Method","Age","Allow","Alt-Svc","Alt-Used","Authorization","Cache-Control","Clear-Site-Data","Connection","Content-Disposition","Content-Encoding","Content-Language","Content-Length","Content-Location","Content-Range","Content-Security-Policy","Content-Security-Policy-Report-Only","Content-Type","Cookie","Cross-Origin-Embedder-Policy","Cross-Origin-Opener-Policy","Cross-Origin-Resource-Policy","Date","Device-Memory","Downlink","ECT","ETag","Expect","Expect-CT","Expires","Forwarded","From","Host","If-Match","If-Modified-Since","If-None-Match","If-Range","If-Unmodified-Since","Keep-Alive","Last-Modified","Link","Location","Max-Forwards","Origin","Permissions-Policy","Pragma","Proxy-Authenticate","Proxy-Authorization","RTT","Range","Referer","Referrer-Policy","Refresh","Retry-After","Sec-WebSocket-Accept","Sec-WebSocket-Extensions","Sec-WebSocket-Key","Sec-WebSocket-Protocol","Sec-WebSocket-Version","Server","Server-Timing","Service-Worker-Allowed","Service-Worker-Navigation-Preload","Set-Cookie","SourceMap","Strict-Transport-Security","Supports-Loading-Mode","TE","Timing-Allow-Origin","Trailer","Transfer-Encoding","Upgrade","Upgrade-Insecure-Requests","User-Agent","Vary","Via","WWW-Authenticate","X-Content-Type-Options","X-DNS-Prefetch-Control","X-Frame-Options","X-Permitted-Cross-Domain-Policies","X-Powered-By","X-Requested-With","X-XSS-Protection"];for(let A=0;A<hg.length;++A){let Q=hg[A],B=Q.toLowerCase();ZE[Q]=ZE[B]=B}Object.setPrototypeOf(ZE,null);zF.exports={wellknownHeaderNames:hg,headerNameLowerCasedRecord:ZE}});var f=L((Fz,_F)=>{var jF=G("assert"),{kDestroyed:$F,kBodyUsed:xF}=o(),{IncomingMessage:BM}=G("http"),_B=G("stream"),IM=G("net"),{InvalidArgumentError:MA}=d(),{Blob:hF}=G("buffer"),XE=G("util"),{stringify:EM}=G("querystring"),{headerNameLowerCasedRecord:CM}=HF(),[Tg,TF]=process.versions.node.split(".").map((A)=>Number(A));function gM(){}function jg(A){return A&&typeof A==="object"&&typeof A.pipe==="function"&&typeof A.on==="function"}function yF(A){return hF&&A instanceof hF||A&&typeof A==="object"&&(typeof A.stream==="function"||typeof A.arrayBuffer==="function")&&/^(Blob|File)$/.test(A[Symbol.toStringTag])}function DM(A,Q){if(A.includes("?")||A.includes("#"))throw new Error('Query params cannot be passed when url already contains "?" or "#".');let B=EM(Q);if(B)A+="?"+B;return A}function qF(A){if(typeof A==="string"){if(A=new URL(A),!/^https?:/.test(A.origin||A.protocol))throw new MA("Invalid URL protocol: the URL must start with `http:` or `https:`.");return A}if(!A||typeof A!=="object")throw new MA("Invalid URL: The URL argument must be a non-null object.");if(!/^https?:/.test(A.origin||A.protocol))throw new MA("Invalid URL protocol: the URL must start with `http:` or `https:`.");if(!(A instanceof URL)){if(A.port!=null&&A.port!==""&&!Number.isFinite(parseInt(A.port)))throw new MA("Invalid URL: port must be a valid integer or a string representation of an integer.");if(A.path!=null&&typeof A.path!=="string")throw new MA("Invalid URL path: the path must be a string or null/undefined.");if(A.pathname!=null&&typeof A.pathname!=="string")throw new MA("Invalid URL pathname: the pathname must be a string or null/undefined.");if(A.hostname!=null&&typeof A.hostname!=="string")throw new MA("Invalid URL hostname: the hostname must be a string or null/undefined.");if(A.origin!=null&&typeof A.origin!=="string")throw new MA("Invalid URL origin: the origin must be a string or null/undefined.");let Q=A.port!=null?A.port:A.protocol==="https:"?443:80,B=A.origin!=null?A.origin:`${A.protocol}//${A.hostname}:${Q}`,I=A.path!=null?A.path:`${A.pathname||""}${A.search||""}`;if(B.endsWith("/"))B=B.substring(0,B.length-1);if(I&&!I.startsWith("/"))I=`/${I}`;A=new URL(B+I)}return A}function FM(A){if(A=qF(A),A.pathname!=="/"||A.search||A.hash)throw new MA("invalid url");return A}function NM(A){if(A[0]==="["){let B=A.indexOf("]");return jF(B!==-1),A.substring(1,B)}let Q=A.indexOf(":");if(Q===-1)return A;return A.substring(0,Q)}function YM(A){if(!A)return null;jF.strictEqual(typeof A,"string");let Q=NM(A);if(IM.isIP(Q))return"";return Q}function JM(A){return JSON.parse(JSON.stringify(A))}function UM(A){return A!=null&&typeof A[Symbol.asyncIterator]==="function"}function GM(A){return A!=null&&(typeof A[Symbol.iterator]==="function"||typeof A[Symbol.asyncIterator]==="function")}function RM(A){if(A==null)return 0;else if(jg(A)){let Q=A._readableState;return Q&&Q.objectMode===!1&&Q.ended===!0&&Number.isFinite(Q.length)?Q.length:null}else if(yF(A))return A.size!=null?A.size:null;else if(PF(A))return A.byteLength;return null}function $g(A){return!A||!!(A.destroyed||A[$F])}function OF(A){let Q=A&&A._readableState;return $g(A)&&Q&&!Q.endEmitted}function wM(A,Q){if(A==null||!jg(A)||$g(A))return;if(typeof A.destroy==="function"){if(Object.getPrototypeOf(A).constructor===BM)A.socket=null;A.destroy(Q)}else if(Q)process.nextTick((B,I)=>{B.emit("error",I)},A,Q);if(A.destroyed!==!0)A[$F]=!0}var MM=/timeout=(\d+)/;function LM(A){let Q=A.toString().match(MM);return Q?parseInt(Q[1],10)*1000:null}function VM(A){return CM[A]||A.toLowerCase()}function WM(A,Q={}){if(!Array.isArray(A))return A;for(let B=0;B<A.length;B+=2){let I=A[B].toString().toLowerCase(),E=Q[I];if(!E)if(Array.isArray(A[B+1]))Q[I]=A[B+1].map((C)=>C.toString("utf8"));else Q[I]=A[B+1].toString("utf8");else{if(!Array.isArray(E))E=[E],Q[I]=E;E.push(A[B+1].toString("utf8"))}}if("content-length"in Q&&"content-disposition"in Q)Q["content-disposition"]=Buffer.from(Q["content-disposition"]).toString("latin1");return Q}function ZM(A){let Q=[],B=!1,I=-1;for(let E=0;E<A.length;E+=2){let C=A[E+0].toString(),g=A[E+1].toString("utf8");if(C.length===14&&(C==="content-length"||C.toLowerCase()==="content-length"))Q.push(C,g),B=!0;else if(C.length===19&&(C==="content-disposition"||C.toLowerCase()==="content-disposition"))I=Q.push(C,g)-1;else Q.push(C,g)}if(B&&I!==-1)Q[I]=Buffer.from(Q[I]).toString("latin1");return Q}function PF(A){return A instanceof Uint8Array||Buffer.isBuffer(A)}function XM(A,Q,B){if(!A||typeof A!=="object")throw new MA("handler must be an object");if(typeof A.onConnect!=="function")throw new MA("invalid onConnect method");if(typeof A.onError!=="function")throw new MA("invalid onError method");if(typeof A.onBodySent!=="function"&&A.onBodySent!==void 0)throw new MA("invalid onBodySent method");if(B||Q==="CONNECT"){if(typeof A.onUpgrade!=="function")throw new MA("invalid onUpgrade method")}else{if(typeof A.onHeaders!=="function")throw new MA("invalid onHeaders method");if(typeof A.onData!=="function")throw new MA("invalid onData method");if(typeof A.onComplete!=="function")throw new MA("invalid onComplete method")}}function SM(A){return!!(A&&(_B.isDisturbed?_B.isDisturbed(A)||A[xF]:A[xF]||A.readableDidRead||A._readableState&&A._readableState.dataEmitted||OF(A)))}function KM(A){return!!(A&&(_B.isErrored?_B.isErrored(A):/state: 'errored'/.test(XE.inspect(A))))}function zM(A){return!!(A&&(_B.isReadable?_B.isReadable(A):/state: 'readable'/.test(XE.inspect(A))))}function HM(A){return{localAddress:A.localAddress,localPort:A.localPort,remoteAddress:A.remoteAddress,remotePort:A.remotePort,remoteFamily:A.remoteFamily,timeout:A.timeout,bytesWritten:A.bytesWritten,bytesRead:A.bytesRead}}async function*xM(A){for await(let Q of A)yield Buffer.isBuffer(Q)?Q:Buffer.from(Q)}var TI;function hM(A){if(!TI)TI=G("stream/web").ReadableStream;if(TI.from)return TI.from(xM(A));let Q;return new TI({async start(){Q=A[Symbol.asyncIterator]()},async pull(B){let{done:I,value:E}=await Q.next();if(I)queueMicrotask(()=>{B.close()});else{let C=Buffer.isBuffer(E)?E:Buffer.from(E);B.enqueue(new Uint8Array(C))}return B.desiredSize>0},async cancel(B){await Q.return()}},0)}function TM(A){return A&&typeof A==="object"&&typeof A.append==="function"&&typeof A.delete==="function"&&typeof A.get==="function"&&typeof A.getAll==="function"&&typeof A.has==="function"&&typeof A.set==="function"&&A[Symbol.toStringTag]==="FormData"}function jM(A){if(!A)return;if(typeof A.throwIfAborted==="function")A.throwIfAborted();else if(A.aborted){let Q=new Error("The operation was aborted");throw Q.name="AbortError",Q}}function $M(A,Q){if("addEventListener"in A)return A.addEventListener("abort",Q,{once:!0}),()=>A.removeEventListener("abort",Q);return A.addListener("abort",Q),()=>A.removeListener("abort",Q)}var yM=!!String.prototype.toWellFormed;function qM(A){if(yM)return`${A}`.toWellFormed();else if(XE.toUSVString)return XE.toUSVString(A);return`${A}`}function OM(A){if(A==null||A==="")return{start:0,end:null,size:null};let Q=A?A.match(/^bytes (\d+)-(\d+)\/(\d+)?$/):null;return Q?{start:parseInt(Q[1]),end:Q[2]?parseInt(Q[2]):null,size:Q[3]?parseInt(Q[3]):null}:null}var kF=Object.create(null);kF.enumerable=!0;_F.exports={kEnumerableProperty:kF,nop:gM,isDisturbed:SM,isErrored:KM,isReadable:zM,toUSVString:qM,isReadableAborted:OF,isBlobLike:yF,parseOrigin:FM,parseURL:qF,getServerName:YM,isStream:jg,isIterable:GM,isAsyncIterable:UM,isDestroyed:$g,headerNameToString:VM,parseRawHeaders:ZM,parseHeaders:WM,parseKeepAliveTimeout:LM,destroy:wM,bodyLength:RM,deepClone:JM,ReadableStreamFrom:hM,isBuffer:PF,validateHandler:XM,getSocketInfo:HM,isFormDataLike:TM,buildURL:DM,throwIfAborted:jM,addAbortListener:$M,parseRangeHeader:OM,nodeMajor:Tg,nodeMinor:TF,nodeHasAutoSelectFamily:Tg>18||Tg===18&&TF>=13,safeHTTPMethods:["GET","HEAD","OPTIONS","TRACE"]}});var bF=L((Nz,vF)=>{var yg=Date.now(),AB,QB=[];function PM(){yg=Date.now();let A=QB.length,Q=0;while(Q<A){let B=QB[Q];if(B.state===0)B.state=yg+B.delay;else if(B.state>0&&yg>=B.state)B.state=-1,B.callback(B.opaque);if(B.state===-1){if(B.state=-2,Q!==A-1)QB[Q]=QB.pop();else QB.pop();A-=1}else Q+=1}if(QB.length>0)fF()}function fF(){if(AB&&AB.refresh)AB.refresh();else if(clearTimeout(AB),AB=setTimeout(PM,1000),AB.unref)AB.unref()}class qg{constructor(A,Q,B){this.callback=A,this.delay=Q,this.opaque=B,this.state=-2,this.refresh()}refresh(){if(this.state===-2){if(QB.push(this),!AB||QB.length===1)fF()}this.state=0}clear(){this.state=-1}}vF.exports={setTimeout(A,Q,B){return Q<1000?setTimeout(A,Q,B):new qg(A,Q,B)},clearTimeout(A){if(A instanceof qg)A.clear();else clearTimeout(A)}}});var Og=L((Yz,mF)=>{var kM=G("node:events").EventEmitter,_M=G("node:util").inherits;function wB(A){if(typeof A==="string")A=Buffer.from(A);if(!Buffer.isBuffer(A))throw new TypeError("The needle has to be a String or a Buffer.");let Q=A.length;if(Q===0)throw new Error("The needle cannot be an empty String/Buffer.");if(Q>256)throw new Error("The needle cannot have a length bigger than 256.");this.maxMatches=1/0,this.matches=0,this._occ=new Array(256).fill(Q),this._lookbehind_size=0,this._needle=A,this._bufpos=0,this._lookbehind=Buffer.alloc(Q);for(var B=0;B<Q-1;++B)this._occ[A[B]]=Q-1-B}_M(wB,kM);wB.prototype.reset=function(){this._lookbehind_size=0,this.matches=0,this._bufpos=0};wB.prototype.push=function(A,Q){if(!Buffer.isBuffer(A))A=Buffer.from(A,"binary");let B=A.length;this._bufpos=Q||0;let I;while(I!==B&&this.matches<this.maxMatches)I=this._sbmh_feed(A);return I};wB.prototype._sbmh_feed=function(A){let Q=A.length,B=this._needle,I=B.length,E=B[I-1],C=-this._lookbehind_size,g;if(C<0){while(C<0&&C<=Q-I){if(g=this._sbmh_lookup_char(A,C+I-1),g===E&&this._sbmh_memcmp(A,C,I-1))return this._lookbehind_size=0,++this.matches,this.emit("info",!0),this._bufpos=C+I;C+=this._occ[g]}if(C<0)while(C<0&&!this._sbmh_memcmp(A,C,Q-C))++C;if(C>=0)this.emit("info",!1,this._lookbehind,0,this._lookbehind_size),this._lookbehind_size=0;else{let D=this._lookbehind_size+C;if(D>0)this.emit("info",!1,this._lookbehind,0,D);return this._lookbehind.copy(this._lookbehind,0,D,this._lookbehind_size-D),this._lookbehind_size-=D,A.copy(this._lookbehind,this._lookbehind_size),this._lookbehind_size+=Q,this._bufpos=Q,Q}}if(C+=(C>=0)*this._bufpos,A.indexOf(B,C)!==-1){if(C=A.indexOf(B,C),++this.matches,C>0)this.emit("info",!0,A,this._bufpos,C);else this.emit("info",!0);return this._bufpos=C+I}else C=Q-I;while(C<Q&&(A[C]!==B[0]||Buffer.compare(A.subarray(C,C+Q-C),B.subarray(0,Q-C))!==0))++C;if(C<Q)A.copy(this._lookbehind,0,C,C+(Q-C)),this._lookbehind_size=Q-C;if(C>0)this.emit("info",!1,A,this._bufpos,C<Q?C:Q);return this._bufpos=Q,Q};wB.prototype._sbmh_lookup_char=function(A,Q){return Q<0?this._lookbehind[this._lookbehind_size+Q]:A[Q]};wB.prototype._sbmh_memcmp=function(A,Q,B){for(var I=0;I<B;++I)if(this._sbmh_lookup_char(A,Q+I)!==this._needle[I])return!1;return!0};mF.exports=wB});var pF=L((Jz,uF)=>{var fM=G("node:util").inherits,cF=G("node:stream").Readable;function Pg(A){cF.call(this,A)}fM(Pg,cF);Pg.prototype._read=function(A){};uF.exports=Pg});var SE=L((Uz,dF)=>{dF.exports=function A(Q,B,I){if(!Q||Q[B]===void 0||Q[B]===null)return I;if(typeof Q[B]!=="number"||isNaN(Q[B]))throw new TypeError("Limit "+B+" is not a valid number");return Q[B]}});var oF=L((Gz,nF)=>{var iF=G("node:events").EventEmitter,vM=G("node:util").inherits,lF=SE(),bM=Og(),mM=Buffer.from(`\r
\r
`),cM=/\r\n/g,uM=/^([^:]+):[ \t]?([\x00-\xFF]+)?$/;function fB(A){iF.call(this),A=A||{};let Q=this;this.nread=0,this.maxed=!1,this.npairs=0,this.maxHeaderPairs=lF(A,"maxHeaderPairs",2000),this.maxHeaderSize=lF(A,"maxHeaderSize",81920),this.buffer="",this.header={},this.finished=!1,this.ss=new bM(mM),this.ss.on("info",function(B,I,E,C){if(I&&!Q.maxed){if(Q.nread+C-E>=Q.maxHeaderSize)C=Q.maxHeaderSize-Q.nread+E,Q.nread=Q.maxHeaderSize,Q.maxed=!0;else Q.nread+=C-E;Q.buffer+=I.toString("binary",E,C)}if(B)Q._finish()})}vM(fB,iF);fB.prototype.push=function(A){let Q=this.ss.push(A);if(this.finished)return Q};fB.prototype.reset=function(){this.finished=!1,this.buffer="",this.header={},this.ss.reset()};fB.prototype._finish=function(){if(this.buffer)this._parseHeader();this.ss.matches=this.ss.maxMatches;let A=this.header;this.header={},this.buffer="",this.finished=!0,this.nread=this.npairs=0,this.maxed=!1,this.emit("header",A)};fB.prototype._parseHeader=function(){if(this.npairs===this.maxHeaderPairs)return;let A=this.buffer.split(cM),Q=A.length,B,I;for(var E=0;E<Q;++E){if(A[E].length===0)continue;if(A[E][0]==="\t"||A[E][0]===" "){if(I){this.header[I][this.header[I].length-1]+=A[E];continue}}let C=A[E].indexOf(":");if(C===-1||C===0)return;if(B=uM.exec(A[E]),I=B[1].toLowerCase(),this.header[I]=this.header[I]||[],this.header[I].push(B[2]||""),++this.npairs===this.maxHeaderPairs)break}};nF.exports=fB});var _g=L((Rz,sF)=>{var kg=G("node:stream").Writable,pM=G("node:util").inherits,dM=Og(),aF=pF(),lM=oF(),iM=Buffer.from("-"),nM=Buffer.from(`\r
`),oM=function(){};function wQ(A){if(!(this instanceof wQ))return new wQ(A);if(kg.call(this,A),!A||!A.headerFirst&&typeof A.boundary!=="string")throw new TypeError("Boundary required");if(typeof A.boundary==="string")this.setBoundary(A.boundary);else this._bparser=void 0;this._headerFirst=A.headerFirst,this._dashes=0,this._parts=0,this._finished=!1,this._realFinish=!1,this._isPreamble=!0,this._justMatched=!1,this._firstWrite=!0,this._inHeader=!0,this._part=void 0,this._cb=void 0,this._ignoreData=!1,this._partOpts={highWaterMark:A.partHwm},this._pause=!1;let Q=this;this._hparser=new lM(A),this._hparser.on("header",function(B){Q._inHeader=!1,Q._part.emit("header",B)})}pM(wQ,kg);wQ.prototype.emit=function(A){if(A==="finish"&&!this._realFinish){if(!this._finished){let Q=this;process.nextTick(function(){if(Q.emit("error",new Error("Unexpected end of multipart data")),Q._part&&!Q._ignoreData){let B=Q._isPreamble?"Preamble":"Part";Q._part.emit("error",new Error(B+" terminated early due to unexpected end of multipart data")),Q._part.push(null),process.nextTick(function(){Q._realFinish=!0,Q.emit("finish"),Q._realFinish=!1});return}Q._realFinish=!0,Q.emit("finish"),Q._realFinish=!1})}}else kg.prototype.emit.apply(this,arguments)};wQ.prototype._write=function(A,Q,B){if(!this._hparser&&!this._bparser)return B();if(this._headerFirst&&this._isPreamble){if(!this._part)if(this._part=new aF(this._partOpts),this.listenerCount("preamble")!==0)this.emit("preamble",this._part);else this._ignore();let I=this._hparser.push(A);if(!this._inHeader&&I!==void 0&&I<A.length)A=A.slice(I);else return B()}if(this._firstWrite)this._bparser.push(nM),this._firstWrite=!1;if(this._bparser.push(A),this._pause)this._cb=B;else B()};wQ.prototype.reset=function(){this._part=void 0,this._bparser=void 0,this._hparser=void 0};wQ.prototype.setBoundary=function(A){let Q=this;this._bparser=new dM(`\r
--`+A),this._bparser.on("info",function(B,I,E,C){Q._oninfo(B,I,E,C)})};wQ.prototype._ignore=function(){if(this._part&&!this._ignoreData)this._ignoreData=!0,this._part.on("error",oM),this._part.resume()};wQ.prototype._oninfo=function(A,Q,B,I){let E,C=this,g=0,D,F=!0;if(!this._part&&this._justMatched&&Q){while(this._dashes<2&&B+g<I)if(Q[B+g]===45)++g,++this._dashes;else{if(this._dashes)E=iM;this._dashes=0;break}if(this._dashes===2){if(B+g<I&&this.listenerCount("trailer")!==0)this.emit("trailer",Q.slice(B+g,I));if(this.reset(),this._finished=!0,C._parts===0)C._realFinish=!0,C.emit("finish"),C._realFinish=!1}if(this._dashes)return}if(this._justMatched)this._justMatched=!1;if(!this._part){if(this._part=new aF(this._partOpts),this._part._read=function(Y){C._unpause()},this._isPreamble&&this.listenerCount("preamble")!==0)this.emit("preamble",this._part);else if(this._isPreamble!==!0&&this.listenerCount("part")!==0)this.emit("part",this._part);else this._ignore();if(!this._isPreamble)this._inHeader=!0}if(Q&&B<I&&!this._ignoreData){if(this._isPreamble||!this._inHeader){if(E)F=this._part.push(E);if(F=this._part.push(Q.slice(B,I)),!F)this._pause=!0}else if(!this._isPreamble&&this._inHeader){if(E)this._hparser.push(E);if(D=this._hparser.push(Q.slice(B,I)),!this._inHeader&&D!==void 0&&D<I)this._oninfo(!1,Q,B+D,I)}}if(A){if(this._hparser.reset(),this._isPreamble)this._isPreamble=!1;else if(B!==I)++this._parts,this._part.on("end",function(){if(--C._parts===0)if(C._finished)C._realFinish=!0,C.emit("finish"),C._realFinish=!1;else C._unpause()});this._part.push(null),this._part=void 0,this._ignoreData=!1,this._justMatched=!0,this._dashes=0}};wQ.prototype._unpause=function(){if(!this._pause)return;if(this._pause=!1,this._cb){let A=this._cb;this._cb=void 0,A()}};sF.exports=wQ});var KE=L((fg,eF)=>{var rF=new TextDecoder("utf-8"),tF=new Map([["utf-8",rF],["utf8",rF]]);function aM(A){let Q;while(!0)switch(A){case"utf-8":case"utf8":return jI.utf8;case"latin1":case"ascii":case"us-ascii":case"iso-8859-1":case"iso8859-1":case"iso88591":case"iso_8859-1":case"windows-1252":case"iso_8859-1:1987":case"cp1252":case"x-cp1252":return jI.latin1;case"utf16le":case"utf-16le":case"ucs2":case"ucs-2":return jI.utf16le;case"base64":return jI.base64;default:if(Q===void 0){Q=!0,A=A.toLowerCase();continue}return jI.other.bind(A)}}var jI={utf8:(A,Q)=>{if(A.length===0)return"";if(typeof A==="string")A=Buffer.from(A,Q);return A.utf8Slice(0,A.length)},latin1:(A,Q)=>{if(A.length===0)return"";if(typeof A==="string")return A;return A.latin1Slice(0,A.length)},utf16le:(A,Q)=>{if(A.length===0)return"";if(typeof A==="string")A=Buffer.from(A,Q);return A.ucs2Slice(0,A.length)},base64:(A,Q)=>{if(A.length===0)return"";if(typeof A==="string")A=Buffer.from(A,Q);return A.base64Slice(0,A.length)},other:(A,Q)=>{if(A.length===0)return"";if(typeof A==="string")A=Buffer.from(A,Q);if(tF.has(fg.toString()))try{return tF.get(fg).decode(A)}catch{}return typeof A==="string"?A:A.toString()}};function sM(A,Q,B){if(A)return aM(B)(A,Q);return A}eF.exports=sM});var bg=L((wz,EN)=>{var zE=KE(),AN=/%[a-fA-F0-9][a-fA-F0-9]/g,rM={"%00":"\x00","%01":"\x01","%02":"\x02","%03":"\x03","%04":"\x04","%05":"\x05","%06":"\x06","%07":"\x07","%08":"\b","%09":"\t","%0a":`
`,"%0A":`
`,"%0b":"\v","%0B":"\v","%0c":"\f","%0C":"\f","%0d":"\r","%0D":"\r","%0e":"\x0E","%0E":"\x0E","%0f":"\x0F","%0F":"\x0F","%10":"\x10","%11":"\x11","%12":"\x12","%13":"\x13","%14":"\x14","%15":"\x15","%16":"\x16","%17":"\x17","%18":"\x18","%19":"\x19","%1a":"\x1A","%1A":"\x1A","%1b":"\x1B","%1B":"\x1B","%1c":"\x1C","%1C":"\x1C","%1d":"\x1D","%1D":"\x1D","%1e":"\x1E","%1E":"\x1E","%1f":"\x1F","%1F":"\x1F","%20":" ","%21":"!","%22":'"',"%23":"#","%24":"$","%25":"%","%26":"&","%27":"'","%28":"(","%29":")","%2a":"*","%2A":"*","%2b":"+","%2B":"+","%2c":",","%2C":",","%2d":"-","%2D":"-","%2e":".","%2E":".","%2f":"/","%2F":"/","%30":"0","%31":"1","%32":"2","%33":"3","%34":"4","%35":"5","%36":"6","%37":"7","%38":"8","%39":"9","%3a":":","%3A":":","%3b":";","%3B":";","%3c":"<","%3C":"<","%3d":"=","%3D":"=","%3e":">","%3E":">","%3f":"?","%3F":"?","%40":"@","%41":"A","%42":"B","%43":"C","%44":"D","%45":"E","%46":"F","%47":"G","%48":"H","%49":"I","%4a":"J","%4A":"J","%4b":"K","%4B":"K","%4c":"L","%4C":"L","%4d":"M","%4D":"M","%4e":"N","%4E":"N","%4f":"O","%4F":"O","%50":"P","%51":"Q","%52":"R","%53":"S","%54":"T","%55":"U","%56":"V","%57":"W","%58":"X","%59":"Y","%5a":"Z","%5A":"Z","%5b":"[","%5B":"[","%5c":"\\","%5C":"\\","%5d":"]","%5D":"]","%5e":"^","%5E":"^","%5f":"_","%5F":"_","%60":"`","%61":"a","%62":"b","%63":"c","%64":"d","%65":"e","%66":"f","%67":"g","%68":"h","%69":"i","%6a":"j","%6A":"j","%6b":"k","%6B":"k","%6c":"l","%6C":"l","%6d":"m","%6D":"m","%6e":"n","%6E":"n","%6f":"o","%6F":"o","%70":"p","%71":"q","%72":"r","%73":"s","%74":"t","%75":"u","%76":"v","%77":"w","%78":"x","%79":"y","%7a":"z","%7A":"z","%7b":"{","%7B":"{","%7c":"|","%7C":"|","%7d":"}","%7D":"}","%7e":"~","%7E":"~","%7f":"","%7F":"","%80":"","%81":"","%82":"","%83":"","%84":"","%85":"","%86":"","%87":"","%88":"","%89":"","%8a":"","%8A":"","%8b":"","%8B":"","%8c":"","%8C":"","%8d":"","%8D":"","%8e":"","%8E":"","%8f":"","%8F":"","%90":"","%91":"","%92":"","%93":"","%94":"","%95":"","%96":"","%97":"","%98":"","%99":"","%9a":"","%9A":"","%9b":"","%9B":"","%9c":"","%9C":"","%9d":"","%9D":"","%9e":"","%9E":"","%9f":"","%9F":"","%a0":" ","%A0":" ","%a1":"¡","%A1":"¡","%a2":"¢","%A2":"¢","%a3":"£","%A3":"£","%a4":"¤","%A4":"¤","%a5":"¥","%A5":"¥","%a6":"¦","%A6":"¦","%a7":"§","%A7":"§","%a8":"¨","%A8":"¨","%a9":"©","%A9":"©","%aa":"ª","%Aa":"ª","%aA":"ª","%AA":"ª","%ab":"«","%Ab":"«","%aB":"«","%AB":"«","%ac":"¬","%Ac":"¬","%aC":"¬","%AC":"¬","%ad":"­","%Ad":"­","%aD":"­","%AD":"­","%ae":"®","%Ae":"®","%aE":"®","%AE":"®","%af":"¯","%Af":"¯","%aF":"¯","%AF":"¯","%b0":"°","%B0":"°","%b1":"±","%B1":"±","%b2":"²","%B2":"²","%b3":"³","%B3":"³","%b4":"´","%B4":"´","%b5":"µ","%B5":"µ","%b6":"¶","%B6":"¶","%b7":"·","%B7":"·","%b8":"¸","%B8":"¸","%b9":"¹","%B9":"¹","%ba":"º","%Ba":"º","%bA":"º","%BA":"º","%bb":"»","%Bb":"»","%bB":"»","%BB":"»","%bc":"¼","%Bc":"¼","%bC":"¼","%BC":"¼","%bd":"½","%Bd":"½","%bD":"½","%BD":"½","%be":"¾","%Be":"¾","%bE":"¾","%BE":"¾","%bf":"¿","%Bf":"¿","%bF":"¿","%BF":"¿","%c0":"À","%C0":"À","%c1":"Á","%C1":"Á","%c2":"Â","%C2":"Â","%c3":"Ã","%C3":"Ã","%c4":"Ä","%C4":"Ä","%c5":"Å","%C5":"Å","%c6":"Æ","%C6":"Æ","%c7":"Ç","%C7":"Ç","%c8":"È","%C8":"È","%c9":"É","%C9":"É","%ca":"Ê","%Ca":"Ê","%cA":"Ê","%CA":"Ê","%cb":"Ë","%Cb":"Ë","%cB":"Ë","%CB":"Ë","%cc":"Ì","%Cc":"Ì","%cC":"Ì","%CC":"Ì","%cd":"Í","%Cd":"Í","%cD":"Í","%CD":"Í","%ce":"Î","%Ce":"Î","%cE":"Î","%CE":"Î","%cf":"Ï","%Cf":"Ï","%cF":"Ï","%CF":"Ï","%d0":"Ð","%D0":"Ð","%d1":"Ñ","%D1":"Ñ","%d2":"Ò","%D2":"Ò","%d3":"Ó","%D3":"Ó","%d4":"Ô","%D4":"Ô","%d5":"Õ","%D5":"Õ","%d6":"Ö","%D6":"Ö","%d7":"×","%D7":"×","%d8":"Ø","%D8":"Ø","%d9":"Ù","%D9":"Ù","%da":"Ú","%Da":"Ú","%dA":"Ú","%DA":"Ú","%db":"Û","%Db":"Û","%dB":"Û","%DB":"Û","%dc":"Ü","%Dc":"Ü","%dC":"Ü","%DC":"Ü","%dd":"Ý","%Dd":"Ý","%dD":"Ý","%DD":"Ý","%de":"Þ","%De":"Þ","%dE":"Þ","%DE":"Þ","%df":"ß","%Df":"ß","%dF":"ß","%DF":"ß","%e0":"à","%E0":"à","%e1":"á","%E1":"á","%e2":"â","%E2":"â","%e3":"ã","%E3":"ã","%e4":"ä","%E4":"ä","%e5":"å","%E5":"å","%e6":"æ","%E6":"æ","%e7":"ç","%E7":"ç","%e8":"è","%E8":"è","%e9":"é","%E9":"é","%ea":"ê","%Ea":"ê","%eA":"ê","%EA":"ê","%eb":"ë","%Eb":"ë","%eB":"ë","%EB":"ë","%ec":"ì","%Ec":"ì","%eC":"ì","%EC":"ì","%ed":"í","%Ed":"í","%eD":"í","%ED":"í","%ee":"î","%Ee":"î","%eE":"î","%EE":"î","%ef":"ï","%Ef":"ï","%eF":"ï","%EF":"ï","%f0":"ð","%F0":"ð","%f1":"ñ","%F1":"ñ","%f2":"ò","%F2":"ò","%f3":"ó","%F3":"ó","%f4":"ô","%F4":"ô","%f5":"õ","%F5":"õ","%f6":"ö","%F6":"ö","%f7":"÷","%F7":"÷","%f8":"ø","%F8":"ø","%f9":"ù","%F9":"ù","%fa":"ú","%Fa":"ú","%fA":"ú","%FA":"ú","%fb":"û","%Fb":"û","%fB":"û","%FB":"û","%fc":"ü","%Fc":"ü","%fC":"ü","%FC":"ü","%fd":"ý","%Fd":"ý","%fD":"ý","%FD":"ý","%fe":"þ","%Fe":"þ","%fE":"þ","%FE":"þ","%ff":"ÿ","%Ff":"ÿ","%fF":"ÿ","%FF":"ÿ"};function QN(A){return rM[A]}var HE=0,BN=1,vg=2,IN=3;function tM(A){let Q=[],B=HE,I="",E=!1,C=!1,g=0,D="",F=A.length;for(var Y=0;Y<F;++Y){let N=A[Y];if(N==="\\"&&E)if(C)C=!1;else{C=!0;continue}else if(N==='"')if(!C){if(E)E=!1,B=HE;else E=!0;continue}else C=!1;else{if(C&&E)D+="\\";if(C=!1,(B===vg||B===IN)&&N==="'"){if(B===vg)B=IN,I=D.substring(1);else B=BN;D="";continue}else if(B===HE&&(N==="*"||N==="=")&&Q.length){B=N==="*"?vg:BN,Q[g]=[D,void 0],D="";continue}else if(!E&&N===";"){if(B=HE,I){if(D.length)D=zE(D.replace(AN,QN),"binary",I);I=""}else if(D.length)D=zE(D,"binary","utf8");if(Q[g]===void 0)Q[g]=D;else Q[g][1]=D;D="",++g;continue}else if(!E&&(N===" "||N==="\t"))continue}D+=N}if(I&&D.length)D=zE(D.replace(AN,QN),"binary",I);else if(D)D=zE(D,"binary","utf8");if(Q[g]===void 0){if(D)Q[g]=D}else Q[g][1]=D;return Q}EN.exports=tM});var gN=L((Mz,CN)=>{CN.exports=function A(Q){if(typeof Q!=="string")return"";for(var B=Q.length-1;B>=0;--B)switch(Q.charCodeAt(B)){case 47:case 92:return Q=Q.slice(B+1),Q===".."||Q==="."?"":Q}return Q===".."||Q==="."?"":Q}});var YN=L((Lz,NN)=>{var{Readable:FN}=G("node:stream"),{inherits:eM}=G("node:util"),AL=_g(),DN=bg(),QL=KE(),BL=gN(),MB=SE(),IL=/^boundary$/i,EL=/^form-data$/i,CL=/^charset$/i,gL=/^filename$/i,DL=/^name$/i;xE.detect=/^multipart\/form-data/i;function xE(A,Q){let B,I,E=this,C,g=Q.limits,D=Q.isPartAFile||((PA,n,BA)=>n==="application/octet-stream"||BA!==void 0),F=Q.parsedConType||[],Y=Q.defCharset||"utf8",N=Q.preservePath,J={highWaterMark:Q.fileHwm};for(B=0,I=F.length;B<I;++B)if(Array.isArray(F[B])&&IL.test(F[B][0])){C=F[B][1];break}function U(){if(GA===0&&OA&&!A._done)OA=!1,E.end()}if(typeof C!=="string")throw new Error("Multipart: Boundary not found");let R=MB(g,"fieldSize",1048576),w=MB(g,"fileSize",1/0),M=MB(g,"files",1/0),V=MB(g,"fields",1/0),S=MB(g,"parts",1/0),z=MB(g,"headerPairs",2000),$=MB(g,"headerSize",81920),P=0,iA=0,GA=0,YA,nA,OA=!1;this._needDrain=!1,this._pause=!1,this._cb=void 0,this._nparts=0,this._boy=A;let oA={boundary:C,maxHeaderPairs:z,maxHeaderSize:$,partHwm:J.highWaterMark,highWaterMark:Q.highWaterMark};this.parser=new AL(oA),this.parser.on("drain",function(){if(E._needDrain=!1,E._cb&&!E._pause){let PA=E._cb;E._cb=void 0,PA()}}).on("part",function PA(n){if(++E._nparts>S)return E.parser.removeListener("part",PA),E.parser.on("part",vB),A.hitPartsLimit=!0,A.emit("partsLimit"),vB(n);if(nA){let BA=nA;BA.emit("end"),BA.removeAllListeners("end")}n.on("header",function(BA){let kA,tQ,aA,ME,LE,xI,hI=0;if(BA["content-type"]){if(aA=DN(BA["content-type"][0]),aA[0]){kA=aA[0].toLowerCase();for(B=0,I=aA.length;B<I;++B)if(CL.test(aA[B][0])){ME=aA[B][1].toLowerCase();break}}}if(kA===void 0)kA="text/plain";if(ME===void 0)ME=Y;if(BA["content-disposition"]){if(aA=DN(BA["content-disposition"][0]),!EL.test(aA[0]))return vB(n);for(B=0,I=aA.length;B<I;++B)if(DL.test(aA[B][0]))tQ=aA[B][1];else if(gL.test(aA[B][0])){if(xI=aA[B][1],!N)xI=BL(xI)}}else return vB(n);if(BA["content-transfer-encoding"])LE=BA["content-transfer-encoding"][0].toLowerCase();else LE="7bit";let Ig,Eg;if(D(tQ,kA,xI)){if(P===M){if(!A.hitFilesLimit)A.hitFilesLimit=!0,A.emit("filesLimit");return vB(n)}if(++P,A.listenerCount("file")===0){E.parser._ignore();return}++GA;let RA=new mg(J);YA=RA,RA.on("end",function(){if(--GA,E._pause=!1,U(),E._cb&&!E._needDrain){let ZQ=E._cb;E._cb=void 0,ZQ()}}),RA._read=function(ZQ){if(!E._pause)return;if(E._pause=!1,E._cb&&!E._needDrain){let fQ=E._cb;E._cb=void 0,fQ()}},A.emit("file",tQ,RA,xI,LE,kA),Ig=function(ZQ){if((hI+=ZQ.length)>w){let fQ=w-hI+ZQ.length;if(fQ>0)RA.push(ZQ.slice(0,fQ));RA.truncated=!0,RA.bytesRead=w,n.removeAllListeners("data"),RA.emit("limit");return}else if(!RA.push(ZQ))E._pause=!0;RA.bytesRead=hI},Eg=function(){YA=void 0,RA.push(null)}}else{if(iA===V){if(!A.hitFieldsLimit)A.hitFieldsLimit=!0,A.emit("fieldsLimit");return vB(n)}++iA,++GA;let RA="",ZQ=!1;nA=n,Ig=function(fQ){if((hI+=fQ.length)>R){let zw=R-(hI-fQ.length);RA+=fQ.toString("binary",0,zw),ZQ=!0,n.removeAllListeners("data")}else RA+=fQ.toString("binary")},Eg=function(){if(nA=void 0,RA.length)RA=QL(RA,"binary",ME);A.emit("field",tQ,RA,!1,ZQ,LE,kA),--GA,U()}}n._readableState.sync=!1,n.on("data",Ig),n.on("end",Eg)}).on("error",function(BA){if(YA)YA.emit("error",BA)})}).on("error",function(PA){A.emit("error",PA)}).on("finish",function(){OA=!0,U()})}xE.prototype.write=function(A,Q){let B=this.parser.write(A);if(B&&!this._pause)Q();else this._needDrain=!B,this._cb=Q};xE.prototype.end=function(){let A=this;if(A.parser.writable)A.parser.end();else if(!A._boy._done)process.nextTick(function(){A._boy._done=!0,A._boy.emit("finish")})};function vB(A){A.resume()}function mg(A){FN.call(this,A),this.bytesRead=0,this.truncated=!1}eM(mg,FN);mg.prototype._read=function(A){};NN.exports=xE});var UN=L((Vz,JN)=>{var FL=/\+/g,NL=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];function cg(){this.buffer=void 0}cg.prototype.write=function(A){A=A.replace(FL," ");let Q="",B=0,I=0,E=A.length;for(;B<E;++B)if(this.buffer!==void 0){if(!NL[A.charCodeAt(B)])Q+="%"+this.buffer,this.buffer=void 0,--B;else if(this.buffer+=A[B],++I,this.buffer.length===2)Q+=String.fromCharCode(parseInt(this.buffer,16)),this.buffer=void 0}else if(A[B]==="%"){if(B>I)Q+=A.substring(I,B),I=B;this.buffer="",++I}if(I<E&&this.buffer===void 0)Q+=A.substring(I);return Q};cg.prototype.reset=function(){this.buffer=void 0};JN.exports=cg});var RN=L((Wz,GN)=>{var YL=UN(),bB=KE(),ug=SE(),JL=/^charset$/i;hE.detect=/^application\/x-www-form-urlencoded/i;function hE(A,Q){let{limits:B,parsedConType:I}=Q;this.boy=A,this.fieldSizeLimit=ug(B,"fieldSize",1048576),this.fieldNameSizeLimit=ug(B,"fieldNameSize",100),this.fieldsLimit=ug(B,"fields",1/0);let E;for(var C=0,g=I.length;C<g;++C)if(Array.isArray(I[C])&&JL.test(I[C][0])){E=I[C][1].toLowerCase();break}if(E===void 0)E=Q.defCharset||"utf8";this.decoder=new YL,this.charset=E,this._fields=0,this._state="key",this._checkingBytes=!0,this._bytesKey=0,this._bytesVal=0,this._key="",this._val="",this._keyTrunc=!1,this._valTrunc=!1,this._hitLimit=!1}hE.prototype.write=function(A,Q){if(this._fields===this.fieldsLimit){if(!this.boy.hitFieldsLimit)this.boy.hitFieldsLimit=!0,this.boy.emit("fieldsLimit");return Q()}let B,I,E,C=0,g=A.length;while(C<g)if(this._state==="key"){B=I=void 0;for(E=C;E<g;++E){if(!this._checkingBytes)++C;if(A[E]===61){B=E;break}else if(A[E]===38){I=E;break}if(this._checkingBytes&&this._bytesKey===this.fieldNameSizeLimit){this._hitLimit=!0;break}else if(this._checkingBytes)++this._bytesKey}if(B!==void 0){if(B>C)this._key+=this.decoder.write(A.toString("binary",C,B));this._state="val",this._hitLimit=!1,this._checkingBytes=!0,this._val="",this._bytesVal=0,this._valTrunc=!1,this.decoder.reset(),C=B+1}else if(I!==void 0){++this._fields;let D,F=this._keyTrunc;if(I>C)D=this._key+=this.decoder.write(A.toString("binary",C,I));else D=this._key;if(this._hitLimit=!1,this._checkingBytes=!0,this._key="",this._bytesKey=0,this._keyTrunc=!1,this.decoder.reset(),D.length)this.boy.emit("field",bB(D,"binary",this.charset),"",F,!1);if(C=I+1,this._fields===this.fieldsLimit)return Q()}else if(this._hitLimit){if(E>C)this._key+=this.decoder.write(A.toString("binary",C,E));if(C=E,(this._bytesKey=this._key.length)===this.fieldNameSizeLimit)this._checkingBytes=!1,this._keyTrunc=!0}else{if(C<g)this._key+=this.decoder.write(A.toString("binary",C));C=g}}else{I=void 0;for(E=C;E<g;++E){if(!this._checkingBytes)++C;if(A[E]===38){I=E;break}if(this._checkingBytes&&this._bytesVal===this.fieldSizeLimit){this._hitLimit=!0;break}else if(this._checkingBytes)++this._bytesVal}if(I!==void 0){if(++this._fields,I>C)this._val+=this.decoder.write(A.toString("binary",C,I));if(this.boy.emit("field",bB(this._key,"binary",this.charset),bB(this._val,"binary",this.charset),this._keyTrunc,this._valTrunc),this._state="key",this._hitLimit=!1,this._checkingBytes=!0,this._key="",this._bytesKey=0,this._keyTrunc=!1,this.decoder.reset(),C=I+1,this._fields===this.fieldsLimit)return Q()}else if(this._hitLimit){if(E>C)this._val+=this.decoder.write(A.toString("binary",C,E));if(C=E,this._val===""&&this.fieldSizeLimit===0||(this._bytesVal=this._val.length)===this.fieldSizeLimit)this._checkingBytes=!1,this._valTrunc=!0}else{if(C<g)this._val+=this.decoder.write(A.toString("binary",C));C=g}}Q()};hE.prototype.end=function(){if(this.boy._done)return;if(this._state==="key"&&this._key.length>0)this.boy.emit("field",bB(this._key,"binary",this.charset),"",this._keyTrunc,!1);else if(this._state==="val")this.boy.emit("field",bB(this._key,"binary",this.charset),bB(this._val,"binary",this.charset),this._keyTrunc,this._valTrunc);this.boy._done=!0,this.boy.emit("finish")};GN.exports=hE});var LN=L((Zz,$I)=>{var pg=G("node:stream").Writable,{inherits:UL}=G("node:util"),GL=_g(),wN=YN(),MN=RN(),RL=bg();function bQ(A){if(!(this instanceof bQ))return new bQ(A);if(typeof A!=="object")throw new TypeError("Busboy expected an options-Object.");if(typeof A.headers!=="object")throw new TypeError("Busboy expected an options-Object with headers-attribute.");if(typeof A.headers["content-type"]!=="string")throw new TypeError("Missing Content-Type-header.");let{headers:Q,...B}=A;this.opts={autoDestroy:!1,...B},pg.call(this,this.opts),this._done=!1,this._parser=this.getParserByHeaders(Q),this._finished=!1}UL(bQ,pg);bQ.prototype.emit=function(A){if(A==="finish"){if(!this._done){this._parser?.end();return}else if(this._finished)return;this._finished=!0}pg.prototype.emit.apply(this,arguments)};bQ.prototype.getParserByHeaders=function(A){let Q=RL(A["content-type"]),B={defCharset:this.opts.defCharset,fileHwm:this.opts.fileHwm,headers:A,highWaterMark:this.opts.highWaterMark,isPartAFile:this.opts.isPartAFile,limits:this.opts.limits,parsedConType:Q,preservePath:this.opts.preservePath};if(wN.detect.test(Q[0]))return new wN(this,B);if(MN.detect.test(Q[0]))return new MN(this,B);throw new Error("Unsupported Content-Type.")};bQ.prototype._write=function(A,Q,B){this._parser.write(A,B)};$I.exports=bQ;$I.exports.default=bQ;$I.exports.Busboy=bQ;$I.exports.Dicer=GL});var BB=L((Xz,HN)=>{var{MessageChannel:wL,receiveMessageOnPort:ML}=G("worker_threads"),VN=["GET","HEAD","POST"],LL=new Set(VN),VL=[101,204,205,304],WN=[301,302,303,307,308],WL=new Set(WN),ZN=["1","7","9","11","13","15","17","19","20","21","22","23","25","37","42","43","53","69","77","79","87","95","101","102","103","104","109","110","111","113","115","117","119","123","135","137","139","143","161","179","389","427","465","512","513","514","515","526","530","531","532","540","548","554","556","563","587","601","636","989","990","993","995","1719","1720","1723","2049","3659","4045","5060","5061","6000","6566","6665","6666","6667","6668","6669","6697","10080"],ZL=new Set(ZN),XN=["","no-referrer","no-referrer-when-downgrade","same-origin","origin","strict-origin","origin-when-cross-origin","strict-origin-when-cross-origin","unsafe-url"],XL=new Set(XN),SL=["follow","manual","error"],SN=["GET","HEAD","OPTIONS","TRACE"],KL=new Set(SN),zL=["navigate","same-origin","no-cors","cors"],HL=["omit","same-origin","include"],xL=["default","no-store","reload","no-cache","force-cache","only-if-cached"],hL=["content-encoding","content-language","content-location","content-type","content-length"],TL=["half"],KN=["CONNECT","TRACE","TRACK"],jL=new Set(KN),zN=["audio","audioworklet","font","image","manifest","paintworklet","script","style","track","video","xslt",""],$L=new Set(zN),yL=globalThis.DOMException??(()=>{try{atob("~")}catch(A){return Object.getPrototypeOf(A).constructor}})(),mB,qL=globalThis.structuredClone??function A(Q,B=void 0){if(arguments.length===0)throw new TypeError("missing argument");if(!mB)mB=new wL;return mB.port1.unref(),mB.port2.unref(),mB.port1.postMessage(Q,B?.transfer),ML(mB.port2).message};HN.exports={DOMException:yL,structuredClone:qL,subresource:zN,forbiddenMethods:KN,requestBodyHeader:hL,referrerPolicy:XN,requestRedirect:SL,requestMode:zL,requestCredentials:HL,requestCache:xL,redirectStatus:WN,corsSafeListedMethods:VN,nullBodyStatus:VL,safeMethods:SN,badPorts:ZN,requestDuplex:TL,subresourceSet:$L,badPortsSet:ZL,redirectStatusSet:WL,corsSafeListedMethodsSet:LL,safeMethodsSet:KL,forbiddenMethodsSet:jL,referrerPolicySet:XL}});var cB=L((Sz,xN)=>{var dg=Symbol.for("undici.globalOrigin.1");function OL(){return globalThis[dg]}function PL(A){if(A===void 0){Object.defineProperty(globalThis,dg,{value:void 0,writable:!0,enumerable:!1,configurable:!1});return}let Q=new URL(A);if(Q.protocol!=="http:"&&Q.protocol!=="https:")throw new TypeError(`Only http & https urls are allowed, received ${Q.protocol}`);Object.defineProperty(globalThis,dg,{value:Q,writable:!0,enumerable:!1,configurable:!1})}xN.exports={getGlobalOrigin:OL,setGlobalOrigin:PL}});var DQ=L((Kz,PN)=>{var{redirectStatusSet:kL,referrerPolicySet:_L,badPortsSet:fL}=BB(),{getGlobalOrigin:vL}=cB(),{performance:bL}=G("perf_hooks"),{isBlobLike:mL,toUSVString:cL,ReadableStreamFrom:uL}=f(),uB=G("assert"),{isUint8Array:pL}=G("util/types"),hN=[],TE;try{TE=G("crypto");let A=["sha256","sha384","sha512"];hN=TE.getHashes().filter((Q)=>A.includes(Q))}catch{}function TN(A){let Q=A.urlList,B=Q.length;return B===0?null:Q[B-1].toString()}function dL(A,Q){if(!kL.has(A.status))return null;let B=A.headersList.get("location");if(B!==null&&$N(B))B=new URL(B,TN(A));if(B&&!B.hash)B.hash=Q;return B}function qI(A){return A.urlList[A.urlList.length-1]}function lL(A){let Q=qI(A);if(ON(Q)&&fL.has(Q.port))return"blocked";return"allowed"}function iL(A){return A instanceof Error||(A?.constructor?.name==="Error"||A?.constructor?.name==="DOMException")}function nL(A){for(let Q=0;Q<A.length;++Q){let B=A.charCodeAt(Q);if(!(B===9||B>=32&&B<=126||B>=128&&B<=255))return!1}return!0}function oL(A){switch(A){case 34:case 40:case 41:case 44:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 123:case 125:return!1;default:return A>=33&&A<=126}}function jN(A){if(A.length===0)return!1;for(let Q=0;Q<A.length;++Q)if(!oL(A.charCodeAt(Q)))return!1;return!0}function aL(A){return jN(A)}function $N(A){if(A.startsWith("\t")||A.startsWith(" ")||A.endsWith("\t")||A.endsWith(" "))return!1;if(A.includes("\x00")||A.includes("\r")||A.includes(`
`))return!1;return!0}function sL(A,Q){let{headersList:B}=Q,I=(B.get("referrer-policy")??"").split(","),E="";if(I.length>0)for(let C=I.length;C!==0;C--){let g=I[C-1].trim();if(_L.has(g)){E=g;break}}if(E!=="")A.referrerPolicy=E}function rL(){return"allowed"}function tL(){return"success"}function eL(){return"success"}function AV(A){let Q=null;Q=A.mode,A.headersList.set("sec-fetch-mode",Q)}function QV(A){let Q=A.origin;if(A.responseTainting==="cors"||A.mode==="websocket"){if(Q)A.headersList.append("origin",Q)}else if(A.method!=="GET"&&A.method!=="HEAD"){switch(A.referrerPolicy){case"no-referrer":Q=null;break;case"no-referrer-when-downgrade":case"strict-origin":case"strict-origin-when-cross-origin":if(A.origin&&ng(A.origin)&&!ng(qI(A)))Q=null;break;case"same-origin":if(!jE(A,qI(A)))Q=null;break;default:}if(Q)A.headersList.append("origin",Q)}}function BV(A){return bL.now()}function IV(A){return{startTime:A.startTime??0,redirectStartTime:0,redirectEndTime:0,postRedirectStartTime:A.startTime??0,finalServiceWorkerStartTime:0,finalNetworkResponseStartTime:0,finalNetworkRequestStartTime:0,endTime:0,encodedBodySize:0,decodedBodySize:0,finalConnectionTimingInfo:null}}function EV(){return{referrerPolicy:"strict-origin-when-cross-origin"}}function CV(A){return{referrerPolicy:A.referrerPolicy}}function gV(A){let Q=A.referrerPolicy;uB(Q);let B=null;if(A.referrer==="client"){let D=vL();if(!D||D.origin==="null")return"no-referrer";B=new URL(D)}else if(A.referrer instanceof URL)B=A.referrer;let I=lg(B),E=lg(B,!0);if(I.toString().length>4096)I=E;let C=jE(A,I),g=yI(I)&&!yI(A.url);switch(Q){case"origin":return E!=null?E:lg(B,!0);case"unsafe-url":return I;case"same-origin":return C?E:"no-referrer";case"origin-when-cross-origin":return C?I:E;case"strict-origin-when-cross-origin":{let D=qI(A);if(jE(I,D))return I;if(yI(I)&&!yI(D))return"no-referrer";return E}case"strict-origin":case"no-referrer-when-downgrade":default:return g?"no-referrer":E}}function lg(A,Q){if(uB(A instanceof URL),A.protocol==="file:"||A.protocol==="about:"||A.protocol==="blank:")return"no-referrer";if(A.username="",A.password="",A.hash="",Q)A.pathname="",A.search="";return A}function yI(A){if(!(A instanceof URL))return!1;if(A.href==="about:blank"||A.href==="about:srcdoc")return!0;if(A.protocol==="data:")return!0;if(A.protocol==="file:")return!0;return Q(A.origin);function Q(B){if(B==null||B==="null")return!1;let I=new URL(B);if(I.protocol==="https:"||I.protocol==="wss:")return!0;if(/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(I.hostname)||(I.hostname==="localhost"||I.hostname.includes("localhost."))||I.hostname.endsWith(".localhost"))return!0;return!1}}function DV(A,Q){if(TE===void 0)return!0;let B=yN(Q);if(B==="no metadata")return!0;if(B.length===0)return!0;let I=NV(B),E=YV(B,I);for(let C of E){let{algo:g,hash:D}=C,F=TE.createHash(g).update(A).digest("base64");if(F[F.length-1]==="=")if(F[F.length-2]==="=")F=F.slice(0,-2);else F=F.slice(0,-1);if(JV(F,D))return!0}return!1}var FV=/(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;function yN(A){let Q=[],B=!0;for(let I of A.split(" ")){B=!1;let E=FV.exec(I);if(E===null||E.groups===void 0||E.groups.algo===void 0)continue;let C=E.groups.algo.toLowerCase();if(hN.includes(C))Q.push(E.groups)}if(B===!0)return"no metadata";return Q}function NV(A){let Q=A[0].algo;if(Q[3]==="5")return Q;for(let B=1;B<A.length;++B){let I=A[B];if(I.algo[3]==="5"){Q="sha512";break}else if(Q[3]==="3")continue;else if(I.algo[3]==="3")Q="sha384"}return Q}function YV(A,Q){if(A.length===1)return A;let B=0;for(let I=0;I<A.length;++I)if(A[I].algo===Q)A[B++]=A[I];return A.length=B,A}function JV(A,Q){if(A.length!==Q.length)return!1;for(let B=0;B<A.length;++B)if(A[B]!==Q[B]){if(A[B]==="+"&&Q[B]==="-"||A[B]==="/"&&Q[B]==="_")continue;return!1}return!0}function UV(A){}function jE(A,Q){if(A.origin===Q.origin&&A.origin==="null")return!0;if(A.protocol===Q.protocol&&A.hostname===Q.hostname&&A.port===Q.port)return!0;return!1}function GV(){let A,Q;return{promise:new Promise((I,E)=>{A=I,Q=E}),resolve:A,reject:Q}}function RV(A){return A.controller.state==="aborted"}function wV(A){return A.controller.state==="aborted"||A.controller.state==="terminated"}var og={delete:"DELETE",DELETE:"DELETE",get:"GET",GET:"GET",head:"HEAD",HEAD:"HEAD",options:"OPTIONS",OPTIONS:"OPTIONS",post:"POST",POST:"POST",put:"PUT",PUT:"PUT"};Object.setPrototypeOf(og,null);function MV(A){return og[A.toLowerCase()]??A}function LV(A){let Q=JSON.stringify(A);if(Q===void 0)throw new TypeError("Value is not JSON serializable");return uB(typeof Q==="string"),Q}var VV=Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));function WV(A,Q,B){let I={index:0,kind:B,target:A},E={next(){if(Object.getPrototypeOf(this)!==E)throw new TypeError(`'next' called on an object that does not implement interface ${Q} Iterator.`);let{index:C,kind:g,target:D}=I,F=D(),Y=F.length;if(C>=Y)return{value:void 0,done:!0};let N=F[C];return I.index=C+1,ZV(N,g)},[Symbol.toStringTag]:`${Q} Iterator`};return Object.setPrototypeOf(E,VV),Object.setPrototypeOf({},E)}function ZV(A,Q){let B;switch(Q){case"key":{B=A[0];break}case"value":{B=A[1];break}case"key+value":{B=A;break}}return{value:B,done:!1}}async function XV(A,Q,B){let I=Q,E=B,C;try{C=A.stream.getReader()}catch(g){E(g);return}try{let g=await qN(C);I(g)}catch(g){E(g)}}var ig=globalThis.ReadableStream;function SV(A){if(!ig)ig=G("stream/web").ReadableStream;return A instanceof ig||A[Symbol.toStringTag]==="ReadableStream"&&typeof A.tee==="function"}var KV=65535;function zV(A){if(A.length<KV)return String.fromCharCode(...A);return A.reduce((Q,B)=>Q+String.fromCharCode(B),"")}function HV(A){try{A.close()}catch(Q){if(!Q.message.includes("Controller is already closed"))throw Q}}function xV(A){for(let Q=0;Q<A.length;Q++)uB(A.charCodeAt(Q)<=255);return A}async function qN(A){let Q=[],B=0;while(!0){let{done:I,value:E}=await A.read();if(I)return Buffer.concat(Q,B);if(!pL(E))throw new TypeError("Received non-Uint8Array chunk");Q.push(E),B+=E.length}}function hV(A){uB("protocol"in A);let Q=A.protocol;return Q==="about:"||Q==="blob:"||Q==="data:"}function ng(A){if(typeof A==="string")return A.startsWith("https:");return A.protocol==="https:"}function ON(A){uB("protocol"in A);let Q=A.protocol;return Q==="http:"||Q==="https:"}var TV=Object.hasOwn||((A,Q)=>Object.prototype.hasOwnProperty.call(A,Q));PN.exports={isAborted:RV,isCancelled:wV,createDeferredPromise:GV,ReadableStreamFrom:uL,toUSVString:cL,tryUpgradeRequestToAPotentiallyTrustworthyURL:UV,coarsenedSharedCurrentTime:BV,determineRequestsReferrer:gV,makePolicyContainer:EV,clonePolicyContainer:CV,appendFetchMetadata:AV,appendRequestOriginHeader:QV,TAOCheck:eL,corsCheck:tL,crossOriginResourcePolicyCheck:rL,createOpaqueTimingInfo:IV,setRequestReferrerPolicyOnRedirect:sL,isValidHTTPToken:jN,requestBadPort:lL,requestCurrentURL:qI,responseURL:TN,responseLocationURL:dL,isBlobLike:mL,isURLPotentiallyTrustworthy:yI,isValidReasonPhrase:nL,sameOrigin:jE,normalizeMethod:MV,serializeJavascriptValueToJSONString:LV,makeIterator:WV,isValidHeaderName:aL,isValidHeaderValue:$N,hasOwn:TV,isErrorLike:iL,fullyReadBody:XV,bytesMatch:DV,isReadableStreamLike:SV,readableStreamClose:HV,isomorphicEncode:xV,isomorphicDecode:zV,urlIsLocal:hV,urlHasHttpsScheme:ng,urlIsHttpHttpsScheme:ON,readAllBytes:qN,normalizeMethodRecord:og,parseMetadata:yN}});var mQ=L((zz,kN)=>{kN.exports={kUrl:Symbol("url"),kHeaders:Symbol("headers"),kSignal:Symbol("signal"),kState:Symbol("state"),kGuard:Symbol("guard"),kRealm:Symbol("realm")}});var HA=L((Hz,fN)=>{var{types:XQ}=G("util"),{hasOwn:_N,toUSVString:jV}=DQ(),W={};W.converters={};W.util={};W.errors={};W.errors.exception=function(A){return new TypeError(`${A.header}: ${A.message}`)};W.errors.conversionFailed=function(A){let Q=A.types.length===1?"":" one of",B=`${A.argument} could not be converted to${Q}: ${A.types.join(", ")}.`;return W.errors.exception({header:A.prefix,message:B})};W.errors.invalidArgument=function(A){return W.errors.exception({header:A.prefix,message:`"${A.value}" is an invalid ${A.type}.`})};W.brandCheck=function(A,Q,B=void 0){if(B?.strict!==!1&&!(A instanceof Q))throw new TypeError("Illegal invocation");else return A?.[Symbol.toStringTag]===Q.prototype[Symbol.toStringTag]};W.argumentLengthCheck=function({length:A},Q,B){if(A<Q)throw W.errors.exception({message:`${Q} argument${Q!==1?"s":""} required, but${A?" only":""} ${A} found.`,...B})};W.illegalConstructor=function(){throw W.errors.exception({header:"TypeError",message:"Illegal constructor"})};W.util.Type=function(A){switch(typeof A){case"undefined":return"Undefined";case"boolean":return"Boolean";case"string":return"String";case"symbol":return"Symbol";case"number":return"Number";case"bigint":return"BigInt";case"function":case"object":{if(A===null)return"Null";return"Object"}}};W.util.ConvertToInt=function(A,Q,B,I={}){let E,C;if(Q===64)if(E=Math.pow(2,53)-1,B==="unsigned")C=0;else C=Math.pow(-2,53)+1;else if(B==="unsigned")C=0,E=Math.pow(2,Q)-1;else C=Math.pow(-2,Q)-1,E=Math.pow(2,Q-1)-1;let g=Number(A);if(g===0)g=0;if(I.enforceRange===!0){if(Number.isNaN(g)||g===Number.POSITIVE_INFINITY||g===Number.NEGATIVE_INFINITY)throw W.errors.exception({header:"Integer conversion",message:`Could not convert ${A} to an integer.`});if(g=W.util.IntegerPart(g),g<C||g>E)throw W.errors.exception({header:"Integer conversion",message:`Value must be between ${C}-${E}, got ${g}.`});return g}if(!Number.isNaN(g)&&I.clamp===!0){if(g=Math.min(Math.max(g,C),E),Math.floor(g)%2===0)g=Math.floor(g);else g=Math.ceil(g);return g}if(Number.isNaN(g)||g===0&&Object.is(0,g)||g===Number.POSITIVE_INFINITY||g===Number.NEGATIVE_INFINITY)return 0;if(g=W.util.IntegerPart(g),g=g%Math.pow(2,Q),B==="signed"&&g>=Math.pow(2,Q)-1)return g-Math.pow(2,Q);return g};W.util.IntegerPart=function(A){let Q=Math.floor(Math.abs(A));if(A<0)return-1*Q;return Q};W.sequenceConverter=function(A){return(Q)=>{if(W.util.Type(Q)!=="Object")throw W.errors.exception({header:"Sequence",message:`Value of type ${W.util.Type(Q)} is not an Object.`});let B=Q?.[Symbol.iterator]?.(),I=[];if(B===void 0||typeof B.next!=="function")throw W.errors.exception({header:"Sequence",message:"Object is not an iterator."});while(!0){let{done:E,value:C}=B.next();if(E)break;I.push(A(C))}return I}};W.recordConverter=function(A,Q){return(B)=>{if(W.util.Type(B)!=="Object")throw W.errors.exception({header:"Record",message:`Value of type ${W.util.Type(B)} is not an Object.`});let I={};if(!XQ.isProxy(B)){let C=Object.keys(B);for(let g of C){let D=A(g),F=Q(B[g]);I[D]=F}return I}let E=Reflect.ownKeys(B);for(let C of E)if(Reflect.getOwnPropertyDescriptor(B,C)?.enumerable){let D=A(C),F=Q(B[C]);I[D]=F}return I}};W.interfaceConverter=function(A){return(Q,B={})=>{if(B.strict!==!1&&!(Q instanceof A))throw W.errors.exception({header:A.name,message:`Expected ${Q} to be an instance of ${A.name}.`});return Q}};W.dictionaryConverter=function(A){return(Q)=>{let B=W.util.Type(Q),I={};if(B==="Null"||B==="Undefined")return I;else if(B!=="Object")throw W.errors.exception({header:"Dictionary",message:`Expected ${Q} to be one of: Null, Undefined, Object.`});for(let E of A){let{key:C,defaultValue:g,required:D,converter:F}=E;if(D===!0){if(!_N(Q,C))throw W.errors.exception({header:"Dictionary",message:`Missing required key "${C}".`})}let Y=Q[C],N=_N(E,"defaultValue");if(N&&Y!==null)Y=Y??g;if(D||N||Y!==void 0){if(Y=F(Y),E.allowedValues&&!E.allowedValues.includes(Y))throw W.errors.exception({header:"Dictionary",message:`${Y} is not an accepted type. Expected one of ${E.allowedValues.join(", ")}.`});I[C]=Y}}return I}};W.nullableConverter=function(A){return(Q)=>{if(Q===null)return Q;return A(Q)}};W.converters.DOMString=function(A,Q={}){if(A===null&&Q.legacyNullToEmptyString)return"";if(typeof A==="symbol")throw new TypeError("Could not convert argument of type symbol to string.");return String(A)};W.converters.ByteString=function(A){let Q=W.converters.DOMString(A);for(let B=0;B<Q.length;B++)if(Q.charCodeAt(B)>255)throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${B} has a value of ${Q.charCodeAt(B)} which is greater than 255.`);return Q};W.converters.USVString=jV;W.converters.boolean=function(A){return Boolean(A)};W.converters.any=function(A){return A};W.converters["long long"]=function(A){return W.util.ConvertToInt(A,64,"signed")};W.converters["unsigned long long"]=function(A){return W.util.ConvertToInt(A,64,"unsigned")};W.converters["unsigned long"]=function(A){return W.util.ConvertToInt(A,32,"unsigned")};W.converters["unsigned short"]=function(A,Q){return W.util.ConvertToInt(A,16,"unsigned",Q)};W.converters.ArrayBuffer=function(A,Q={}){if(W.util.Type(A)!=="Object"||!XQ.isAnyArrayBuffer(A))throw W.errors.conversionFailed({prefix:`${A}`,argument:`${A}`,types:["ArrayBuffer"]});if(Q.allowShared===!1&&XQ.isSharedArrayBuffer(A))throw W.errors.exception({header:"ArrayBuffer",message:"SharedArrayBuffer is not allowed."});return A};W.converters.TypedArray=function(A,Q,B={}){if(W.util.Type(A)!=="Object"||!XQ.isTypedArray(A)||A.constructor.name!==Q.name)throw W.errors.conversionFailed({prefix:`${Q.name}`,argument:`${A}`,types:[Q.name]});if(B.allowShared===!1&&XQ.isSharedArrayBuffer(A.buffer))throw W.errors.exception({header:"ArrayBuffer",message:"SharedArrayBuffer is not allowed."});return A};W.converters.DataView=function(A,Q={}){if(W.util.Type(A)!=="Object"||!XQ.isDataView(A))throw W.errors.exception({header:"DataView",message:"Object is not a DataView."});if(Q.allowShared===!1&&XQ.isSharedArrayBuffer(A.buffer))throw W.errors.exception({header:"ArrayBuffer",message:"SharedArrayBuffer is not allowed."});return A};W.converters.BufferSource=function(A,Q={}){if(XQ.isAnyArrayBuffer(A))return W.converters.ArrayBuffer(A,Q);if(XQ.isTypedArray(A))return W.converters.TypedArray(A,A.constructor);if(XQ.isDataView(A))return W.converters.DataView(A,Q);throw new TypeError(`Could not convert ${A} to a BufferSource.`)};W.converters["sequence<ByteString>"]=W.sequenceConverter(W.converters.ByteString);W.converters["sequence<sequence<ByteString>>"]=W.sequenceConverter(W.converters["sequence<ByteString>"]);W.converters["record<ByteString, ByteString>"]=W.recordConverter(W.converters.ByteString,W.converters.ByteString);fN.exports={webidl:W}});var MQ=L((xz,pN)=>{var yE=G("assert"),{atob:$V}=G("buffer"),{isomorphicDecode:yV}=DQ(),qV=new TextEncoder,$E=/^[!#$%&'*+-.^_|~A-Za-z0-9]+$/,OV=/(\u000A|\u000D|\u0009|\u0020)/,PV=/[\u0009|\u0020-\u007E|\u0080-\u00FF]/;function kV(A){yE(A.protocol==="data:");let Q=mN(A,!0);Q=Q.slice(5);let B={position:0},I=pB(",",Q,B),E=I.length;if(I=bV(I,!0,!0),B.position>=Q.length)return"failure";B.position++;let C=Q.slice(E+1),g=cN(C);if(/;(\u0020){0,}base64$/i.test(I)){let F=yV(g);if(g=fV(F),g==="failure")return"failure";I=I.slice(0,-6),I=I.replace(/(\u0020)+$/,""),I=I.slice(0,-1)}if(I.startsWith(";"))I="text/plain"+I;let D=sg(I);if(D==="failure")D=sg("text/plain;charset=US-ASCII");return{mimeType:D,body:g}}function mN(A,Q=!1){if(!Q)return A.href;let B=A.href,I=A.hash.length;return I===0?B:B.substring(0,B.length-I)}function qE(A,Q,B){let I="";while(B.position<Q.length&&A(Q[B.position]))I+=Q[B.position],B.position++;return I}function pB(A,Q,B){let I=Q.indexOf(A,B.position),E=B.position;if(I===-1)return B.position=Q.length,Q.slice(E);return B.position=I,Q.slice(E,B.position)}function cN(A){let Q=qV.encode(A);return _V(Q)}function _V(A){let Q=[];for(let B=0;B<A.length;B++){let I=A[B];if(I!==37)Q.push(I);else if(I===37&&!/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(A[B+1],A[B+2])))Q.push(37);else{let E=String.fromCharCode(A[B+1],A[B+2]),C=Number.parseInt(E,16);Q.push(C),B+=2}}return Uint8Array.from(Q)}function sg(A){A=ag(A,!0,!0);let Q={position:0},B=pB("/",A,Q);if(B.length===0||!$E.test(B))return"failure";if(Q.position>A.length)return"failure";Q.position++;let I=pB(";",A,Q);if(I=ag(I,!1,!0),I.length===0||!$E.test(I))return"failure";let E=B.toLowerCase(),C=I.toLowerCase(),g={type:E,subtype:C,parameters:new Map,essence:`${E}/${C}`};while(Q.position<A.length){Q.position++,qE((Y)=>OV.test(Y),A,Q);let D=qE((Y)=>Y!==";"&&Y!=="=",A,Q);if(D=D.toLowerCase(),Q.position<A.length){if(A[Q.position]===";")continue;Q.position++}if(Q.position>A.length)break;let F=null;if(A[Q.position]==='"')F=uN(A,Q,!0),pB(";",A,Q);else if(F=pB(";",A,Q),F=ag(F,!1,!0),F.length===0)continue;if(D.length!==0&&$E.test(D)&&(F.length===0||PV.test(F))&&!g.parameters.has(D))g.parameters.set(D,F)}return g}function fV(A){if(A=A.replace(/[\u0009\u000A\u000C\u000D\u0020]/g,""),A.length%4===0)A=A.replace(/=?=$/,"");if(A.length%4===1)return"failure";if(/[^+/0-9A-Za-z]/.test(A))return"failure";let Q=$V(A),B=new Uint8Array(Q.length);for(let I=0;I<Q.length;I++)B[I]=Q.charCodeAt(I);return B}function uN(A,Q,B){let I=Q.position,E="";yE(A[Q.position]==='"'),Q.position++;while(!0){if(E+=qE((g)=>g!=='"'&&g!=="\\",A,Q),Q.position>=A.length)break;let C=A[Q.position];if(Q.position++,C==="\\"){if(Q.position>=A.length){E+="\\";break}E+=A[Q.position],Q.position++}else{yE(C==='"');break}}if(B)return E;return A.slice(I,Q.position)}function vV(A){yE(A!=="failure");let{parameters:Q,essence:B}=A,I=B;for(let[E,C]of Q.entries()){if(I+=";",I+=E,I+="=",!$E.test(C))C=C.replace(/(\\|")/g,"\\$1"),C='"'+C,C+='"';I+=C}return I}function vN(A){return A==="\r"||A===`
`||A==="\t"||A===" "}function ag(A,Q=!0,B=!0){let I=0,E=A.length-1;if(Q)for(;I<A.length&&vN(A[I]);I++);if(B)for(;E>0&&vN(A[E]);E--);return A.slice(I,E+1)}function bN(A){return A==="\r"||A===`
`||A==="\t"||A==="\f"||A===" "}function bV(A,Q=!0,B=!0){let I=0,E=A.length-1;if(Q)for(;I<A.length&&bN(A[I]);I++);if(B)for(;E>0&&bN(A[E]);E--);return A.slice(I,E+1)}pN.exports={dataURLProcessor:kV,URLSerializer:mN,collectASequenceOfCodePoints:qE,collectASequenceOfCodePointsFast:pB,stringPercentDecode:cN,parseMIMEType:sg,collectAnHTTPQuotedString:uN,serializeAMimeType:vV}});var OE=L((hz,oN)=>{var{Blob:iN,File:dN}=G("buffer"),{types:rg}=G("util"),{kState:sA}=mQ(),{isBlobLike:nN}=DQ(),{webidl:m}=HA(),{parseMIMEType:mV,serializeAMimeType:cV}=MQ(),{kEnumerableProperty:lN}=f(),uV=new TextEncoder;class LB extends iN{constructor(A,Q,B={}){m.argumentLengthCheck(arguments,2,{header:"File constructor"}),A=m.converters["sequence<BlobPart>"](A),Q=m.converters.USVString(Q),B=m.converters.FilePropertyBag(B);let I=Q,E=B.type,C;A:{if(E){if(E=mV(E),E==="failure"){E="";break A}E=cV(E).toLowerCase()}C=B.lastModified}super(pV(A,B),{type:E});this[sA]={name:I,lastModified:C,type:E}}get name(){return m.brandCheck(this,LB),this[sA].name}get lastModified(){return m.brandCheck(this,LB),this[sA].lastModified}get type(){return m.brandCheck(this,LB),this[sA].type}}class SQ{constructor(A,Q,B={}){let I=Q,E=B.type,C=B.lastModified??Date.now();this[sA]={blobLike:A,name:I,type:E,lastModified:C}}stream(...A){return m.brandCheck(this,SQ),this[sA].blobLike.stream(...A)}arrayBuffer(...A){return m.brandCheck(this,SQ),this[sA].blobLike.arrayBuffer(...A)}slice(...A){return m.brandCheck(this,SQ),this[sA].blobLike.slice(...A)}text(...A){return m.brandCheck(this,SQ),this[sA].blobLike.text(...A)}get size(){return m.brandCheck(this,SQ),this[sA].blobLike.size}get type(){return m.brandCheck(this,SQ),this[sA].blobLike.type}get name(){return m.brandCheck(this,SQ),this[sA].name}get lastModified(){return m.brandCheck(this,SQ),this[sA].lastModified}get[Symbol.toStringTag](){return"File"}}Object.defineProperties(LB.prototype,{[Symbol.toStringTag]:{value:"File",configurable:!0},name:lN,lastModified:lN});m.converters.Blob=m.interfaceConverter(iN);m.converters.BlobPart=function(A,Q){if(m.util.Type(A)==="Object"){if(nN(A))return m.converters.Blob(A,{strict:!1});if(ArrayBuffer.isView(A)||rg.isAnyArrayBuffer(A))return m.converters.BufferSource(A,Q)}return m.converters.USVString(A,Q)};m.converters["sequence<BlobPart>"]=m.sequenceConverter(m.converters.BlobPart);m.converters.FilePropertyBag=m.dictionaryConverter([{key:"lastModified",converter:m.converters["long long"],get defaultValue(){return Date.now()}},{key:"type",converter:m.converters.DOMString,defaultValue:""},{key:"endings",converter:(A)=>{if(A=m.converters.DOMString(A),A=A.toLowerCase(),A!=="native")A="transparent";return A},defaultValue:"transparent"}]);function pV(A,Q){let B=[];for(let I of A)if(typeof I==="string"){let E=I;if(Q.endings==="native")E=dV(E);B.push(uV.encode(E))}else if(rg.isAnyArrayBuffer(I)||rg.isTypedArray(I))if(!I.buffer)B.push(new Uint8Array(I));else B.push(new Uint8Array(I.buffer,I.byteOffset,I.byteLength));else if(nN(I))B.push(I);return B}function dV(A){let Q=`
`;if(process.platform==="win32")Q=`\r
`;return A.replace(/\r?\n/g,Q)}function lV(A){return dN&&A instanceof dN||A instanceof LB||A&&(typeof A.stream==="function"||typeof A.arrayBuffer==="function")&&A[Symbol.toStringTag]==="File"}oN.exports={File:LB,FileLike:SQ,isFileLike:lV}});var kE=L((Tz,eN)=>{var{isBlobLike:PE,toUSVString:iV,makeIterator:tg}=DQ(),{kState:ZA}=mQ(),{File:tN,FileLike:aN,isFileLike:nV}=OE(),{webidl:c}=HA(),{Blob:oV,File:eg}=G("buffer"),sN=eg??tN;class xA{constructor(A){if(A!==void 0)throw c.errors.conversionFailed({prefix:"FormData constructor",argument:"Argument 1",types:["undefined"]});this[ZA]=[]}append(A,Q,B=void 0){if(c.brandCheck(this,xA),c.argumentLengthCheck(arguments,2,{header:"FormData.append"}),arguments.length===3&&!PE(Q))throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");A=c.converters.USVString(A),Q=PE(Q)?c.converters.Blob(Q,{strict:!1}):c.converters.USVString(Q),B=arguments.length===3?c.converters.USVString(B):void 0;let I=rN(A,Q,B);this[ZA].push(I)}delete(A){c.brandCheck(this,xA),c.argumentLengthCheck(arguments,1,{header:"FormData.delete"}),A=c.converters.USVString(A),this[ZA]=this[ZA].filter((Q)=>Q.name!==A)}get(A){c.brandCheck(this,xA),c.argumentLengthCheck(arguments,1,{header:"FormData.get"}),A=c.converters.USVString(A);let Q=this[ZA].findIndex((B)=>B.name===A);if(Q===-1)return null;return this[ZA][Q].value}getAll(A){return c.brandCheck(this,xA),c.argumentLengthCheck(arguments,1,{header:"FormData.getAll"}),A=c.converters.USVString(A),this[ZA].filter((Q)=>Q.name===A).map((Q)=>Q.value)}has(A){return c.brandCheck(this,xA),c.argumentLengthCheck(arguments,1,{header:"FormData.has"}),A=c.converters.USVString(A),this[ZA].findIndex((Q)=>Q.name===A)!==-1}set(A,Q,B=void 0){if(c.brandCheck(this,xA),c.argumentLengthCheck(arguments,2,{header:"FormData.set"}),arguments.length===3&&!PE(Q))throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");A=c.converters.USVString(A),Q=PE(Q)?c.converters.Blob(Q,{strict:!1}):c.converters.USVString(Q),B=arguments.length===3?iV(B):void 0;let I=rN(A,Q,B),E=this[ZA].findIndex((C)=>C.name===A);if(E!==-1)this[ZA]=[...this[ZA].slice(0,E),I,...this[ZA].slice(E+1).filter((C)=>C.name!==A)];else this[ZA].push(I)}entries(){return c.brandCheck(this,xA),tg(()=>this[ZA].map((A)=>[A.name,A.value]),"FormData","key+value")}keys(){return c.brandCheck(this,xA),tg(()=>this[ZA].map((A)=>[A.name,A.value]),"FormData","key")}values(){return c.brandCheck(this,xA),tg(()=>this[ZA].map((A)=>[A.name,A.value]),"FormData","value")}forEach(A,Q=globalThis){if(c.brandCheck(this,xA),c.argumentLengthCheck(arguments,1,{header:"FormData.forEach"}),typeof A!=="function")throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");for(let[B,I]of this)A.apply(Q,[I,B,this])}}xA.prototype[Symbol.iterator]=xA.prototype.entries;Object.defineProperties(xA.prototype,{[Symbol.toStringTag]:{value:"FormData",configurable:!0}});function rN(A,Q,B){if(A=Buffer.from(A).toString("utf8"),typeof Q==="string")Q=Buffer.from(Q).toString("utf8");else{if(!nV(Q))Q=Q instanceof oV?new sN([Q],"blob",{type:Q.type}):new aN(Q,"blob",{type:Q.type});if(B!==void 0){let I={type:Q.type,lastModified:Q.lastModified};Q=eg&&Q instanceof eg||Q instanceof tN?new sN([Q],B,I):new aN(Q,B,I)}}return{name:A,value:Q}}eN.exports={FormData:xA}});var OI=L((jz,FY)=>{var aV=LN(),dB=f(),{ReadableStreamFrom:sV,isBlobLike:AY,isReadableStreamLike:rV,readableStreamClose:tV,createDeferredPromise:eV,fullyReadBody:AW}=DQ(),{FormData:QY}=kE(),{kState:uQ}=mQ(),{webidl:AD}=HA(),{DOMException:EY,structuredClone:QW}=BB(),{Blob:BW,File:IW}=G("buffer"),{kBodyUsed:EW}=o(),QD=G("assert"),{isErrored:CW}=f(),{isUint8Array:CY,isArrayBuffer:gW}=G("util/types"),{File:DW}=OE(),{parseMIMEType:FW,serializeAMimeType:NW}=MQ(),BD;try{let A=G("node:crypto");BD=(Q)=>A.randomInt(0,Q)}catch{BD=(A)=>Math.floor(Math.random(A))}var cQ=globalThis.ReadableStream,BY=IW??DW,_E=new TextEncoder,YW=new TextDecoder;function gY(A,Q=!1){if(!cQ)cQ=G("stream/web").ReadableStream;let B=null;if(A instanceof cQ)B=A;else if(AY(A))B=A.stream();else B=new cQ({async pull(F){F.enqueue(typeof E==="string"?_E.encode(E):E),queueMicrotask(()=>tV(F))},start(){},type:void 0});QD(rV(B));let I=null,E=null,C=null,g=null;if(typeof A==="string")E=A,g="text/plain;charset=UTF-8";else if(A instanceof URLSearchParams)E=A.toString(),g="application/x-www-form-urlencoded;charset=UTF-8";else if(gW(A))E=new Uint8Array(A.slice());else if(ArrayBuffer.isView(A))E=new Uint8Array(A.buffer.slice(A.byteOffset,A.byteOffset+A.byteLength));else if(dB.isFormDataLike(A)){let F=`----formdata-undici-0${`${BD(100000000000)}`.padStart(11,"0")}`,Y=`--${F}\r
Content-Disposition: form-data`;/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */let N=(V)=>V.replace(/\n/g,"%0A").replace(/\r/g,"%0D").replace(/"/g,"%22"),J=(V)=>V.replace(/\r?\n|\r/g,`\r
`),U=[],R=new Uint8Array([13,10]);C=0;let w=!1;for(let[V,S]of A)if(typeof S==="string"){let z=_E.encode(Y+`; name="${N(J(V))}"\r
\r
${J(S)}\r
`);U.push(z),C+=z.byteLength}else{let z=_E.encode(`${Y}; name="${N(J(V))}"`+(S.name?`; filename="${N(S.name)}"`:"")+`\r
Content-Type: ${S.type||"application/octet-stream"}\r
\r
`);if(U.push(z,S,R),typeof S.size==="number")C+=z.byteLength+S.size+R.byteLength;else w=!0}let M=_E.encode(`--${F}--`);if(U.push(M),C+=M.byteLength,w)C=null;E=A,I=async function*(){for(let V of U)if(V.stream)yield*V.stream();else yield V},g="multipart/form-data; boundary="+F}else if(AY(A)){if(E=A,C=A.size,A.type)g=A.type}else if(typeof A[Symbol.asyncIterator]==="function"){if(Q)throw new TypeError("keepalive");if(dB.isDisturbed(A)||A.locked)throw new TypeError("Response body object should not be disturbed or locked");B=A instanceof cQ?A:sV(A)}if(typeof E==="string"||dB.isBuffer(E))C=Buffer.byteLength(E);if(I!=null){let F;B=new cQ({async start(){F=I(A)[Symbol.asyncIterator]()},async pull(Y){let{value:N,done:J}=await F.next();if(J)queueMicrotask(()=>{Y.close()});else if(!CW(B))Y.enqueue(new Uint8Array(N));return Y.desiredSize>0},async cancel(Y){await F.return()},type:void 0})}return[{stream:B,source:E,length:C},g]}function JW(A,Q=!1){if(!cQ)cQ=G("stream/web").ReadableStream;if(A instanceof cQ)QD(!dB.isDisturbed(A),"The body has already been consumed."),QD(!A.locked,"The stream is locked.");return gY(A,Q)}function UW(A){let[Q,B]=A.stream.tee(),I=QW(B,{transfer:[B]}),[,E]=I.tee();return A.stream=Q,{stream:E,length:A.length,source:A.source}}async function*IY(A){if(A)if(CY(A))yield A;else{let Q=A.stream;if(dB.isDisturbed(Q))throw new TypeError("The body has already been consumed.");if(Q.locked)throw new TypeError("The stream is locked.");Q[EW]=!0,yield*Q}}function ID(A){if(A.aborted)throw new EY("The operation was aborted.","AbortError")}function GW(A){return{blob(){return fE(this,(B)=>{let I=LW(this);if(I==="failure")I="";else if(I)I=NW(I);return new BW([B],{type:I})},A)},arrayBuffer(){return fE(this,(B)=>{return new Uint8Array(B).buffer},A)},text(){return fE(this,DY,A)},json(){return fE(this,MW,A)},async formData(){AD.brandCheck(this,A),ID(this[uQ]);let B=this.headers.get("Content-Type");if(/multipart\/form-data/.test(B)){let I={};for(let[D,F]of this.headers)I[D.toLowerCase()]=F;let E=new QY,C;try{C=new aV({headers:I,preservePath:!0})}catch(D){throw new EY(`${D}`,"AbortError")}C.on("field",(D,F)=>{E.append(D,F)}),C.on("file",(D,F,Y,N,J)=>{let U=[];if(N==="base64"||N.toLowerCase()==="base64"){let R="";F.on("data",(w)=>{R+=w.toString().replace(/[\r\n]/gm,"");let M=R.length-R.length%4;U.push(Buffer.from(R.slice(0,M),"base64")),R=R.slice(M)}),F.on("end",()=>{U.push(Buffer.from(R,"base64")),E.append(D,new BY(U,Y,{type:J}))})}else F.on("data",(R)=>{U.push(R)}),F.on("end",()=>{E.append(D,new BY(U,Y,{type:J}))})});let g=new Promise((D,F)=>{C.on("finish",D),C.on("error",(Y)=>F(new TypeError(Y)))});if(this.body!==null)for await(let D of IY(this[uQ].body))C.write(D);return C.end(),await g,E}else if(/application\/x-www-form-urlencoded/.test(B)){let I;try{let C="",g=new TextDecoder("utf-8",{ignoreBOM:!0});for await(let D of IY(this[uQ].body)){if(!CY(D))throw new TypeError("Expected Uint8Array chunk");C+=g.decode(D,{stream:!0})}C+=g.decode(),I=new URLSearchParams(C)}catch(C){throw Object.assign(new TypeError,{cause:C})}let E=new QY;for(let[C,g]of I)E.append(C,g);return E}else throw await Promise.resolve(),ID(this[uQ]),AD.errors.exception({header:`${A.name}.formData`,message:"Could not parse content as FormData."})}}}function RW(A){Object.assign(A.prototype,GW(A))}async function fE(A,Q,B){if(AD.brandCheck(A,B),ID(A[uQ]),wW(A[uQ].body))throw new TypeError("Body is unusable");let I=eV(),E=(g)=>I.reject(g),C=(g)=>{try{I.resolve(Q(g))}catch(D){E(D)}};if(A[uQ].body==null)return C(new Uint8Array),I.promise;return await AW(A[uQ].body,C,E),I.promise}function wW(A){return A!=null&&(A.stream.locked||dB.isDisturbed(A.stream))}function DY(A){if(A.length===0)return"";if(A[0]===239&&A[1]===187&&A[2]===191)A=A.subarray(3);return YW.decode(A)}function MW(A){return JSON.parse(DY(A))}function LW(A){let{headersList:Q}=A[uQ],B=Q.get("content-type");if(B===null)return"failure";return FW(B)}FY.exports={extractBody:gY,safelyExtractBody:JW,cloneBody:UW,mixinBody:RW}});var UY=L(($z,JY)=>{var{InvalidArgumentError:a,NotSupportedError:VW}=d(),pQ=G("assert"),{kHTTP2BuildRequest:WW,kHTTP2CopyHeaders:ZW,kHTTP1BuildRequest:XW}=o(),_A=f(),NY=/^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/,YY=/[^\t\x20-\x7e\x80-\xff]/,SW=/[^\u0021-\u00ff]/,LQ=Symbol("handler"),FA={},ED;try{let A=G("diagnostics_channel");FA.create=A.channel("undici:request:create"),FA.bodySent=A.channel("undici:request:bodySent"),FA.headers=A.channel("undici:request:headers"),FA.trailers=A.channel("undici:request:trailers"),FA.error=A.channel("undici:request:error")}catch{FA.create={hasSubscribers:!1},FA.bodySent={hasSubscribers:!1},FA.headers={hasSubscribers:!1},FA.trailers={hasSubscribers:!1},FA.error={hasSubscribers:!1}}class vE{constructor(A,{path:Q,method:B,body:I,headers:E,query:C,idempotent:g,blocking:D,upgrade:F,headersTimeout:Y,bodyTimeout:N,reset:J,throwOnError:U,expectContinue:R},w){if(typeof Q!=="string")throw new a("path must be a string");else if(Q[0]!=="/"&&!(Q.startsWith("http://")||Q.startsWith("https://"))&&B!=="CONNECT")throw new a("path must be an absolute URL or start with a slash");else if(SW.exec(Q)!==null)throw new a("invalid request path");if(typeof B!=="string")throw new a("method must be a string");else if(NY.exec(B)===null)throw new a("invalid request method");if(F&&typeof F!=="string")throw new a("upgrade must be a string");if(Y!=null&&(!Number.isFinite(Y)||Y<0))throw new a("invalid headersTimeout");if(N!=null&&(!Number.isFinite(N)||N<0))throw new a("invalid bodyTimeout");if(J!=null&&typeof J!=="boolean")throw new a("invalid reset");if(R!=null&&typeof R!=="boolean")throw new a("invalid expectContinue");if(this.headersTimeout=Y,this.bodyTimeout=N,this.throwOnError=U===!0,this.method=B,this.abort=null,I==null)this.body=null;else if(_A.isStream(I)){this.body=I;let M=this.body._readableState;if(!M||!M.autoDestroy)this.endHandler=function V(){_A.destroy(this)},this.body.on("end",this.endHandler);this.errorHandler=(V)=>{if(this.abort)this.abort(V);else this.error=V},this.body.on("error",this.errorHandler)}else if(_A.isBuffer(I))this.body=I.byteLength?I:null;else if(ArrayBuffer.isView(I))this.body=I.buffer.byteLength?Buffer.from(I.buffer,I.byteOffset,I.byteLength):null;else if(I instanceof ArrayBuffer)this.body=I.byteLength?Buffer.from(I):null;else if(typeof I==="string")this.body=I.length?Buffer.from(I):null;else if(_A.isFormDataLike(I)||_A.isIterable(I)||_A.isBlobLike(I))this.body=I;else throw new a("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");if(this.completed=!1,this.aborted=!1,this.upgrade=F||null,this.path=C?_A.buildURL(Q,C):Q,this.origin=A,this.idempotent=g==null?B==="HEAD"||B==="GET":g,this.blocking=D==null?!1:D,this.reset=J==null?null:J,this.host=null,this.contentLength=null,this.contentType=null,this.headers="",this.expectContinue=R!=null?R:!1,Array.isArray(E)){if(E.length%2!==0)throw new a("headers array must be even");for(let M=0;M<E.length;M+=2)PI(this,E[M],E[M+1])}else if(E&&typeof E==="object"){let M=Object.keys(E);for(let V=0;V<M.length;V++){let S=M[V];PI(this,S,E[S])}}else if(E!=null)throw new a("headers must be an object or an array");if(_A.isFormDataLike(this.body)){if(_A.nodeMajor<16||_A.nodeMajor===16&&_A.nodeMinor<8)throw new a("Form-Data bodies are only supported in node v16.8 and newer.");if(!ED)ED=OI().extractBody;let[M,V]=ED(I);if(this.contentType==null)this.contentType=V,this.headers+=`content-type: ${V}\r
`;this.body=M.stream,this.contentLength=M.length}else if(_A.isBlobLike(I)&&this.contentType==null&&I.type)this.contentType=I.type,this.headers+=`content-type: ${I.type}\r
`;if(_A.validateHandler(w,B,F),this.servername=_A.getServerName(this.host),this[LQ]=w,FA.create.hasSubscribers)FA.create.publish({request:this})}onBodySent(A){if(this[LQ].onBodySent)try{return this[LQ].onBodySent(A)}catch(Q){this.abort(Q)}}onRequestSent(){if(FA.bodySent.hasSubscribers)FA.bodySent.publish({request:this});if(this[LQ].onRequestSent)try{return this[LQ].onRequestSent()}catch(A){this.abort(A)}}onConnect(A){if(pQ(!this.aborted),pQ(!this.completed),this.error)A(this.error);else return this.abort=A,this[LQ].onConnect(A)}onHeaders(A,Q,B,I){if(pQ(!this.aborted),pQ(!this.completed),FA.headers.hasSubscribers)FA.headers.publish({request:this,response:{statusCode:A,headers:Q,statusText:I}});try{return this[LQ].onHeaders(A,Q,B,I)}catch(E){this.abort(E)}}onData(A){pQ(!this.aborted),pQ(!this.completed);try{return this[LQ].onData(A)}catch(Q){return this.abort(Q),!1}}onUpgrade(A,Q,B){return pQ(!this.aborted),pQ(!this.completed),this[LQ].onUpgrade(A,Q,B)}onComplete(A){if(this.onFinally(),pQ(!this.aborted),this.completed=!0,FA.trailers.hasSubscribers)FA.trailers.publish({request:this,trailers:A});try{return this[LQ].onComplete(A)}catch(Q){this.onError(Q)}}onError(A){if(this.onFinally(),FA.error.hasSubscribers)FA.error.publish({request:this,error:A});if(this.aborted)return;return this.aborted=!0,this[LQ].onError(A)}onFinally(){if(this.errorHandler)this.body.off("error",this.errorHandler),this.errorHandler=null;if(this.endHandler)this.body.off("end",this.endHandler),this.endHandler=null}addHeader(A,Q){return PI(this,A,Q),this}static[XW](A,Q,B){return new vE(A,Q,B)}static[WW](A,Q,B){let I=Q.headers;Q={...Q,headers:null};let E=new vE(A,Q,B);if(E.headers={},Array.isArray(I)){if(I.length%2!==0)throw new a("headers array must be even");for(let C=0;C<I.length;C+=2)PI(E,I[C],I[C+1],!0)}else if(I&&typeof I==="object"){let C=Object.keys(I);for(let g=0;g<C.length;g++){let D=C[g];PI(E,D,I[D],!0)}}else if(I!=null)throw new a("headers must be an object or an array");return E}static[ZW](A){let Q=A.split(`\r
`),B={};for(let I of Q){let[E,C]=I.split(": ");if(C==null||C.length===0)continue;if(B[E])B[E]+=`,${C}`;else B[E]=C}return B}}function VB(A,Q,B){if(Q&&typeof Q==="object")throw new a(`invalid ${A} header`);if(Q=Q!=null?`${Q}`:"",YY.exec(Q)!==null)throw new a(`invalid ${A} header`);return B?Q:`${A}: ${Q}\r
`}function PI(A,Q,B,I=!1){if(B&&(typeof B==="object"&&!Array.isArray(B)))throw new a(`invalid ${Q} header`);else if(B===void 0)return;if(A.host===null&&Q.length===4&&Q.toLowerCase()==="host"){if(YY.exec(B)!==null)throw new a(`invalid ${Q} header`);A.host=B}else if(A.contentLength===null&&Q.length===14&&Q.toLowerCase()==="content-length"){if(A.contentLength=parseInt(B,10),!Number.isFinite(A.contentLength))throw new a("invalid content-length header")}else if(A.contentType===null&&Q.length===12&&Q.toLowerCase()==="content-type")if(A.contentType=B,I)A.headers[Q]=VB(Q,B,I);else A.headers+=VB(Q,B);else if(Q.length===17&&Q.toLowerCase()==="transfer-encoding")throw new a("invalid transfer-encoding header");else if(Q.length===10&&Q.toLowerCase()==="connection"){let E=typeof B==="string"?B.toLowerCase():null;if(E!=="close"&&E!=="keep-alive")throw new a("invalid connection header");else if(E==="close")A.reset=!0}else if(Q.length===10&&Q.toLowerCase()==="keep-alive")throw new a("invalid keep-alive header");else if(Q.length===7&&Q.toLowerCase()==="upgrade")throw new a("invalid upgrade header");else if(Q.length===6&&Q.toLowerCase()==="expect")throw new VW("expect header not supported");else if(NY.exec(Q)===null)throw new a("invalid header key");else if(Array.isArray(B))for(let E=0;E<B.length;E++)if(I)if(A.headers[Q])A.headers[Q]+=`,${VB(Q,B[E],I)}`;else A.headers[Q]=VB(Q,B[E],I);else A.headers+=VB(Q,B[E]);else if(I)A.headers[Q]=VB(Q,B,I);else A.headers+=VB(Q,B)}JY.exports=vE});var bE=L((yz,RY)=>{var KW=G("events");class GY extends KW{dispatch(){throw new Error("not implemented")}close(){throw new Error("not implemented")}destroy(){throw new Error("not implemented")}}RY.exports=GY});var _I=L((qz,MY)=>{var zW=bE(),{ClientDestroyedError:CD,ClientClosedError:HW,InvalidArgumentError:lB}=d(),{kDestroy:xW,kClose:hW,kDispatch:gD,kInterceptors:WB}=o(),iB=Symbol("destroyed"),kI=Symbol("closed"),dQ=Symbol("onDestroyed"),nB=Symbol("onClosed"),mE=Symbol("Intercepted Dispatch");class wY extends zW{constructor(){super();this[iB]=!1,this[dQ]=null,this[kI]=!1,this[nB]=[]}get destroyed(){return this[iB]}get closed(){return this[kI]}get interceptors(){return this[WB]}set interceptors(A){if(A){for(let Q=A.length-1;Q>=0;Q--)if(typeof this[WB][Q]!=="function")throw new lB("interceptor must be an function")}this[WB]=A}close(A){if(A===void 0)return new Promise((B,I)=>{this.close((E,C)=>{return E?I(E):B(C)})});if(typeof A!=="function")throw new lB("invalid callback");if(this[iB]){queueMicrotask(()=>A(new CD,null));return}if(this[kI]){if(this[nB])this[nB].push(A);else queueMicrotask(()=>A(null,null));return}this[kI]=!0,this[nB].push(A);let Q=()=>{let B=this[nB];this[nB]=null;for(let I=0;I<B.length;I++)B[I](null,null)};this[hW]().then(()=>this.destroy()).then(()=>{queueMicrotask(Q)})}destroy(A,Q){if(typeof A==="function")Q=A,A=null;if(Q===void 0)return new Promise((I,E)=>{this.destroy(A,(C,g)=>{return C?E(C):I(g)})});if(typeof Q!=="function")throw new lB("invalid callback");if(this[iB]){if(this[dQ])this[dQ].push(Q);else queueMicrotask(()=>Q(null,null));return}if(!A)A=new CD;this[iB]=!0,this[dQ]=this[dQ]||[],this[dQ].push(Q);let B=()=>{let I=this[dQ];this[dQ]=null;for(let E=0;E<I.length;E++)I[E](null,null)};this[xW](A).then(()=>{queueMicrotask(B)})}[mE](A,Q){if(!this[WB]||this[WB].length===0)return this[mE]=this[gD],this[gD](A,Q);let B=this[gD].bind(this);for(let I=this[WB].length-1;I>=0;I--)B=this[WB][I](B);return this[mE]=B,B(A,Q)}dispatch(A,Q){if(!Q||typeof Q!=="object")throw new lB("handler must be an object");try{if(!A||typeof A!=="object")throw new lB("opts must be an object.");if(this[iB]||this[dQ])throw new CD;if(this[kI])throw new HW;return this[mE](A,Q)}catch(B){if(typeof Q.onError!=="function")throw new lB("invalid onError method");return Q.onError(B),!1}}}MY.exports=wY});var fI=L((Oz,WY)=>{var TW=G("net"),LY=G("assert"),VY=f(),{InvalidArgumentError:jW,ConnectTimeoutError:$W}=d(),DD,FD;if(global.FinalizationRegistry&&!process.env.NODE_V8_COVERAGE)FD=class A{constructor(Q){this._maxCachedSessions=Q,this._sessionCache=new Map,this._sessionRegistry=new global.FinalizationRegistry((B)=>{if(this._sessionCache.size<this._maxCachedSessions)return;let I=this._sessionCache.get(B);if(I!==void 0&&I.deref()===void 0)this._sessionCache.delete(B)})}get(Q){let B=this._sessionCache.get(Q);return B?B.deref():null}set(Q,B){if(this._maxCachedSessions===0)return;this._sessionCache.set(Q,new WeakRef(B)),this._sessionRegistry.register(B,Q)}};else FD=class A{constructor(Q){this._maxCachedSessions=Q,this._sessionCache=new Map}get(Q){return this._sessionCache.get(Q)}set(Q,B){if(this._maxCachedSessions===0)return;if(this._sessionCache.size>=this._maxCachedSessions){let{value:I}=this._sessionCache.keys().next();this._sessionCache.delete(I)}this._sessionCache.set(Q,B)}};function yW({allowH2:A,maxCachedSessions:Q,socketPath:B,timeout:I,...E}){if(Q!=null&&(!Number.isInteger(Q)||Q<0))throw new jW("maxCachedSessions must be a positive integer or zero");let C={path:B,...E},g=new FD(Q==null?100:Q);return I=I==null?1e4:I,A=A!=null?A:!1,function D({hostname:F,host:Y,protocol:N,port:J,servername:U,localAddress:R,httpSocket:w},M){let V;if(N==="https:"){if(!DD)DD=G("tls");U=U||C.servername||VY.getServerName(Y)||null;let z=U||F,$=g.get(z)||null;LY(z),V=DD.connect({highWaterMark:16384,...C,servername:U,session:$,localAddress:R,ALPNProtocols:A?["http/1.1","h2"]:["http/1.1"],socket:w,port:J||443,host:F}),V.on("session",function(P){g.set(z,P)})}else LY(!w,"httpSocket can only be sent on TLS update"),V=TW.connect({highWaterMark:65536,...C,localAddress:R,port:J||80,host:F});if(C.keepAlive==null||C.keepAlive){let z=C.keepAliveInitialDelay===void 0?60000:C.keepAliveInitialDelay;V.setKeepAlive(!0,z)}let S=qW(()=>OW(V),I);return V.setNoDelay(!0).once(N==="https:"?"secureConnect":"connect",function(){if(S(),M){let z=M;M=null,z(null,this)}}).on("error",function(z){if(S(),M){let $=M;M=null,$(z)}}),V}}function qW(A,Q){if(!Q)return()=>{};let B=null,I=null,E=setTimeout(()=>{B=setImmediate(()=>{if(process.platform==="win32")I=setImmediate(()=>A());else A()})},Q);return()=>{clearTimeout(E),clearImmediate(B),clearImmediate(I)}}function OW(A){VY.destroy(A,new $W)}WY.exports=yW});var SY=L((ZY)=>{Object.defineProperty(ZY,"__esModule",{value:!0});ZY.enumToMap=void 0;function PW(A){let Q={};return Object.keys(A).forEach((B)=>{let I=A[B];if(typeof I==="number")Q[B]=I}),Q}ZY.enumToMap=PW});var bY=L(($Y)=>{Object.defineProperty($Y,"__esModule",{value:!0});$Y.SPECIAL_HEADERS=$Y.HEADER_STATE=$Y.MINOR=$Y.MAJOR=$Y.CONNECTION_TOKEN_CHARS=$Y.HEADER_CHARS=$Y.TOKEN=$Y.STRICT_TOKEN=$Y.HEX=$Y.URL_CHAR=$Y.STRICT_URL_CHAR=$Y.USERINFO_CHARS=$Y.MARK=$Y.ALPHANUM=$Y.NUM=$Y.HEX_MAP=$Y.NUM_MAP=$Y.ALPHA=$Y.FINISH=$Y.H_METHOD_MAP=$Y.METHOD_MAP=$Y.METHODS_RTSP=$Y.METHODS_ICE=$Y.METHODS_HTTP=$Y.METHODS=$Y.LENIENT_FLAGS=$Y.FLAGS=$Y.TYPE=$Y.ERROR=void 0;var kW=SY(),_W;(function(A){A[A.OK=0]="OK",A[A.INTERNAL=1]="INTERNAL",A[A.STRICT=2]="STRICT",A[A.LF_EXPECTED=3]="LF_EXPECTED",A[A.UNEXPECTED_CONTENT_LENGTH=4]="UNEXPECTED_CONTENT_LENGTH",A[A.CLOSED_CONNECTION=5]="CLOSED_CONNECTION",A[A.INVALID_METHOD=6]="INVALID_METHOD",A[A.INVALID_URL=7]="INVALID_URL",A[A.INVALID_CONSTANT=8]="INVALID_CONSTANT",A[A.INVALID_VERSION=9]="INVALID_VERSION",A[A.INVALID_HEADER_TOKEN=10]="INVALID_HEADER_TOKEN",A[A.INVALID_CONTENT_LENGTH=11]="INVALID_CONTENT_LENGTH",A[A.INVALID_CHUNK_SIZE=12]="INVALID_CHUNK_SIZE",A[A.INVALID_STATUS=13]="INVALID_STATUS",A[A.INVALID_EOF_STATE=14]="INVALID_EOF_STATE",A[A.INVALID_TRANSFER_ENCODING=15]="INVALID_TRANSFER_ENCODING",A[A.CB_MESSAGE_BEGIN=16]="CB_MESSAGE_BEGIN",A[A.CB_HEADERS_COMPLETE=17]="CB_HEADERS_COMPLETE",A[A.CB_MESSAGE_COMPLETE=18]="CB_MESSAGE_COMPLETE",A[A.CB_CHUNK_HEADER=19]="CB_CHUNK_HEADER",A[A.CB_CHUNK_COMPLETE=20]="CB_CHUNK_COMPLETE",A[A.PAUSED=21]="PAUSED",A[A.PAUSED_UPGRADE=22]="PAUSED_UPGRADE",A[A.PAUSED_H2_UPGRADE=23]="PAUSED_H2_UPGRADE",A[A.USER=24]="USER"})(_W=$Y.ERROR||($Y.ERROR={}));var fW;(function(A){A[A.BOTH=0]="BOTH",A[A.REQUEST=1]="REQUEST",A[A.RESPONSE=2]="RESPONSE"})(fW=$Y.TYPE||($Y.TYPE={}));var vW;(function(A){A[A.CONNECTION_KEEP_ALIVE=1]="CONNECTION_KEEP_ALIVE",A[A.CONNECTION_CLOSE=2]="CONNECTION_CLOSE",A[A.CONNECTION_UPGRADE=4]="CONNECTION_UPGRADE",A[A.CHUNKED=8]="CHUNKED",A[A.UPGRADE=16]="UPGRADE",A[A.CONTENT_LENGTH=32]="CONTENT_LENGTH",A[A.SKIPBODY=64]="SKIPBODY",A[A.TRAILING=128]="TRAILING",A[A.TRANSFER_ENCODING=512]="TRANSFER_ENCODING"})(vW=$Y.FLAGS||($Y.FLAGS={}));var bW;(function(A){A[A.HEADERS=1]="HEADERS",A[A.CHUNKED_LENGTH=2]="CHUNKED_LENGTH",A[A.KEEP_ALIVE=4]="KEEP_ALIVE"})(bW=$Y.LENIENT_FLAGS||($Y.LENIENT_FLAGS={}));var H;(function(A){A[A.DELETE=0]="DELETE",A[A.GET=1]="GET",A[A.HEAD=2]="HEAD",A[A.POST=3]="POST",A[A.PUT=4]="PUT",A[A.CONNECT=5]="CONNECT",A[A.OPTIONS=6]="OPTIONS",A[A.TRACE=7]="TRACE",A[A.COPY=8]="COPY",A[A.LOCK=9]="LOCK",A[A.MKCOL=10]="MKCOL",A[A.MOVE=11]="MOVE",A[A.PROPFIND=12]="PROPFIND",A[A.PROPPATCH=13]="PROPPATCH",A[A.SEARCH=14]="SEARCH",A[A.UNLOCK=15]="UNLOCK",A[A.BIND=16]="BIND",A[A.REBIND=17]="REBIND",A[A.UNBIND=18]="UNBIND",A[A.ACL=19]="ACL",A[A.REPORT=20]="REPORT",A[A.MKACTIVITY=21]="MKACTIVITY",A[A.CHECKOUT=22]="CHECKOUT",A[A.MERGE=23]="MERGE",A[A["M-SEARCH"]=24]="M-SEARCH",A[A.NOTIFY=25]="NOTIFY",A[A.SUBSCRIBE=26]="SUBSCRIBE",A[A.UNSUBSCRIBE=27]="UNSUBSCRIBE",A[A.PATCH=28]="PATCH",A[A.PURGE=29]="PURGE",A[A.MKCALENDAR=30]="MKCALENDAR",A[A.LINK=31]="LINK",A[A.UNLINK=32]="UNLINK",A[A.SOURCE=33]="SOURCE",A[A.PRI=34]="PRI",A[A.DESCRIBE=35]="DESCRIBE",A[A.ANNOUNCE=36]="ANNOUNCE",A[A.SETUP=37]="SETUP",A[A.PLAY=38]="PLAY",A[A.PAUSE=39]="PAUSE",A[A.TEARDOWN=40]="TEARDOWN",A[A.GET_PARAMETER=41]="GET_PARAMETER",A[A.SET_PARAMETER=42]="SET_PARAMETER",A[A.REDIRECT=43]="REDIRECT",A[A.RECORD=44]="RECORD",A[A.FLUSH=45]="FLUSH"})(H=$Y.METHODS||($Y.METHODS={}));$Y.METHODS_HTTP=[H.DELETE,H.GET,H.HEAD,H.POST,H.PUT,H.CONNECT,H.OPTIONS,H.TRACE,H.COPY,H.LOCK,H.MKCOL,H.MOVE,H.PROPFIND,H.PROPPATCH,H.SEARCH,H.UNLOCK,H.BIND,H.REBIND,H.UNBIND,H.ACL,H.REPORT,H.MKACTIVITY,H.CHECKOUT,H.MERGE,H["M-SEARCH"],H.NOTIFY,H.SUBSCRIBE,H.UNSUBSCRIBE,H.PATCH,H.PURGE,H.MKCALENDAR,H.LINK,H.UNLINK,H.PRI,H.SOURCE];$Y.METHODS_ICE=[H.SOURCE];$Y.METHODS_RTSP=[H.OPTIONS,H.DESCRIBE,H.ANNOUNCE,H.SETUP,H.PLAY,H.PAUSE,H.TEARDOWN,H.GET_PARAMETER,H.SET_PARAMETER,H.REDIRECT,H.RECORD,H.FLUSH,H.GET,H.POST];$Y.METHOD_MAP=kW.enumToMap(H);$Y.H_METHOD_MAP={};Object.keys($Y.METHOD_MAP).forEach((A)=>{if(/^H/.test(A))$Y.H_METHOD_MAP[A]=$Y.METHOD_MAP[A]});var mW;(function(A){A[A.SAFE=0]="SAFE",A[A.SAFE_WITH_CB=1]="SAFE_WITH_CB",A[A.UNSAFE=2]="UNSAFE"})(mW=$Y.FINISH||($Y.FINISH={}));$Y.ALPHA=[];for(let A=65;A<=90;A++)$Y.ALPHA.push(String.fromCharCode(A)),$Y.ALPHA.push(String.fromCharCode(A+32));$Y.NUM_MAP={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9};$Y.HEX_MAP={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15};$Y.NUM=["0","1","2","3","4","5","6","7","8","9"];$Y.ALPHANUM=$Y.ALPHA.concat($Y.NUM);$Y.MARK=["-","_",".","!","~","*","'","(",")"];$Y.USERINFO_CHARS=$Y.ALPHANUM.concat($Y.MARK).concat(["%",";",":","&","=","+","$",","]);$Y.STRICT_URL_CHAR=["!",'"',"$","%","&","'","(",")","*","+",",","-",".","/",":",";","<","=",">","@","[","\\","]","^","_","`","{","|","}","~"].concat($Y.ALPHANUM);$Y.URL_CHAR=$Y.STRICT_URL_CHAR.concat(["\t","\f"]);for(let A=128;A<=255;A++)$Y.URL_CHAR.push(A);$Y.HEX=$Y.NUM.concat(["a","b","c","d","e","f","A","B","C","D","E","F"]);$Y.STRICT_TOKEN=["!","#","$","%","&","'","*","+","-",".","^","_","`","|","~"].concat($Y.ALPHANUM);$Y.TOKEN=$Y.STRICT_TOKEN.concat([" "]);$Y.HEADER_CHARS=["\t"];for(let A=32;A<=255;A++)if(A!==127)$Y.HEADER_CHARS.push(A);$Y.CONNECTION_TOKEN_CHARS=$Y.HEADER_CHARS.filter((A)=>A!==44);$Y.MAJOR=$Y.NUM_MAP;$Y.MINOR=$Y.MAJOR;var oB;(function(A){A[A.GENERAL=0]="GENERAL",A[A.CONNECTION=1]="CONNECTION",A[A.CONTENT_LENGTH=2]="CONTENT_LENGTH",A[A.TRANSFER_ENCODING=3]="TRANSFER_ENCODING",A[A.UPGRADE=4]="UPGRADE",A[A.CONNECTION_KEEP_ALIVE=5]="CONNECTION_KEEP_ALIVE",A[A.CONNECTION_CLOSE=6]="CONNECTION_CLOSE",A[A.CONNECTION_UPGRADE=7]="CONNECTION_UPGRADE",A[A.TRANSFER_ENCODING_CHUNKED=8]="TRANSFER_ENCODING_CHUNKED"})(oB=$Y.HEADER_STATE||($Y.HEADER_STATE={}));$Y.SPECIAL_HEADERS={connection:oB.CONNECTION,"content-length":oB.CONTENT_LENGTH,"proxy-connection":oB.CONNECTION,"transfer-encoding":oB.TRANSFER_ENCODING,upgrade:oB.UPGRADE}});var RD=L((_z,pY)=>{var lQ=f(),{kBodyUsed:vI}=o(),GD=G("assert"),{InvalidArgumentError:sW}=d(),rW=G("events"),tW=[300,301,302,303,307,308],mY=Symbol("body");class UD{constructor(A){this[mY]=A,this[vI]=!1}async*[Symbol.asyncIterator](){GD(!this[vI],"disturbed"),this[vI]=!0,yield*this[mY]}}class uY{constructor(A,Q,B,I){if(Q!=null&&(!Number.isInteger(Q)||Q<0))throw new sW("maxRedirections must be a positive number");if(lQ.validateHandler(I,B.method,B.upgrade),this.dispatch=A,this.location=null,this.abort=null,this.opts={...B,maxRedirections:0},this.maxRedirections=Q,this.handler=I,this.history=[],lQ.isStream(this.opts.body)){if(lQ.bodyLength(this.opts.body)===0)this.opts.body.on("data",function(){GD(!1)});if(typeof this.opts.body.readableDidRead!=="boolean")this.opts.body[vI]=!1,rW.prototype.on.call(this.opts.body,"data",function(){this[vI]=!0})}else if(this.opts.body&&typeof this.opts.body.pipeTo==="function")this.opts.body=new UD(this.opts.body);else if(this.opts.body&&typeof this.opts.body!=="string"&&!ArrayBuffer.isView(this.opts.body)&&lQ.isIterable(this.opts.body))this.opts.body=new UD(this.opts.body)}onConnect(A){this.abort=A,this.handler.onConnect(A,{history:this.history})}onUpgrade(A,Q,B){this.handler.onUpgrade(A,Q,B)}onError(A){this.handler.onError(A)}onHeaders(A,Q,B,I){if(this.location=this.history.length>=this.maxRedirections||lQ.isDisturbed(this.opts.body)?null:eW(A,Q),this.opts.origin)this.history.push(new URL(this.opts.path,this.opts.origin));if(!this.location)return this.handler.onHeaders(A,Q,B,I);let{origin:E,pathname:C,search:g}=lQ.parseURL(new URL(this.location,this.opts.origin&&new URL(this.opts.path,this.opts.origin))),D=g?`${C}${g}`:C;if(this.opts.headers=AZ(this.opts.headers,A===303,this.opts.origin!==E),this.opts.path=D,this.opts.origin=E,this.opts.maxRedirections=0,this.opts.query=null,A===303&&this.opts.method!=="HEAD")this.opts.method="GET",this.opts.body=null}onData(A){if(this.location);else return this.handler.onData(A)}onComplete(A){if(this.location)this.location=null,this.abort=null,this.dispatch(this.opts,this);else this.handler.onComplete(A)}onBodySent(A){if(this.handler.onBodySent)this.handler.onBodySent(A)}}function eW(A,Q){if(tW.indexOf(A)===-1)return null;for(let B=0;B<Q.length;B+=2)if(Q[B].toString().toLowerCase()==="location")return Q[B+1]}function cY(A,Q,B){if(A.length===4)return lQ.headerNameToString(A)==="host";if(Q&&lQ.headerNameToString(A).startsWith("content-"))return!0;if(B&&(A.length===13||A.length===6||A.length===19)){let I=lQ.headerNameToString(A);return I==="authorization"||I==="cookie"||I==="proxy-authorization"}return!1}function AZ(A,Q,B){let I=[];if(Array.isArray(A)){for(let E=0;E<A.length;E+=2)if(!cY(A[E],Q,B))I.push(A[E],A[E+1])}else if(A&&typeof A==="object"){for(let E of Object.keys(A))if(!cY(E,Q,B))I.push(E,A[E])}else GD(A==null,"headers must be an object or an array");return I}pY.exports=uY});var pE=L((fz,dY)=>{var QZ=RD();function BZ({maxRedirections:A}){return(Q)=>{return function B(I,E){let{maxRedirections:C=A}=I;if(!C)return Q(I,E);let g=new QZ(Q,C,I,E);return I={...I,maxRedirections:0},Q(I,g)}}}dY.exports=BZ});var wD=L((vz,lY)=>{lY.exports=""});var nY=L((bz,iY)=>{iY.exports=""});var lI=L((mz,RJ)=>{var Z=G("assert"),sY=G("net"),IZ=G("http"),{pipeline:EZ}=G("stream"),K=f(),MD=bF(),VD=UY(),CZ=_I(),{RequestContentLengthMismatchError:iQ,ResponseContentLengthMismatchError:gZ,InvalidArgumentError:CA,RequestAbortedError:zD,HeadersTimeoutError:DZ,HeadersOverflowError:FZ,SocketError:sB,InformationalError:xQ,BodyTimeoutError:NZ,HTTPParserError:YZ,ResponseExceededMaxSizeError:JZ,ClientDestroyedError:UZ}=d(),GZ=fI(),{kUrl:LA,kReset:hA,kServerName:IB,kClient:hQ,kBusy:WD,kParser:IA,kConnect:RZ,kBlocking:rB,kResuming:ZB,kRunning:QA,kPending:SB,kSize:XB,kWriting:nQ,kQueue:r,kConnected:wZ,kConnecting:aB,kNeedDrain:CB,kNoRef:bI,kKeepAliveDefaultTimeout:ZD,kHostHeader:rY,kPendingIdx:rA,kRunningIdx:t,kError:VA,kPipelining:gB,kSocket:EA,kKeepAliveTimeoutValue:uI,kMaxHeadersSize:iE,kKeepAliveMaxTimeout:tY,kKeepAliveTimeoutThreshold:eY,kHeadersTimeout:AJ,kBodyTimeout:QJ,kStrictContentLength:pI,kConnector:mI,kMaxRedirections:MZ,kMaxRequests:dI,kCounter:BJ,kClose:LZ,kDestroy:VZ,kDispatch:WZ,kInterceptors:ZZ,kLocalAddress:cI,kMaxResponseSize:IJ,kHTTPConnVersion:TQ,kHost:EJ,kHTTP2Session:tA,kHTTP2SessionState:oE,kHTTP2BuildRequest:XZ,kHTTP2CopyHeaders:SZ,kHTTP1BuildRequest:KZ}=o(),aE;try{aE=G("http2")}catch{aE={constants:{}}}var{constants:{HTTP2_HEADER_AUTHORITY:zZ,HTTP2_HEADER_METHOD:HZ,HTTP2_HEADER_PATH:xZ,HTTP2_HEADER_SCHEME:hZ,HTTP2_HEADER_CONTENT_LENGTH:TZ,HTTP2_HEADER_EXPECT:jZ,HTTP2_HEADER_STATUS:$Z}}=aE,oY=!1,dE=Buffer[Symbol.species],EB=Symbol("kClosedResolve"),XA={};try{let A=G("diagnostics_channel");XA.sendHeaders=A.channel("undici:client:sendHeaders"),XA.beforeConnect=A.channel("undici:client:beforeConnect"),XA.connectError=A.channel("undici:client:connectError"),XA.connected=A.channel("undici:client:connected")}catch{XA.sendHeaders={hasSubscribers:!1},XA.beforeConnect={hasSubscribers:!1},XA.connectError={hasSubscribers:!1},XA.connected={hasSubscribers:!1}}class CJ extends CZ{constructor(A,{interceptors:Q,maxHeaderSize:B,headersTimeout:I,socketTimeout:E,requestTimeout:C,connectTimeout:g,bodyTimeout:D,idleTimeout:F,keepAlive:Y,keepAliveTimeout:N,maxKeepAliveTimeout:J,keepAliveMaxTimeout:U,keepAliveTimeoutThreshold:R,socketPath:w,pipelining:M,tls:V,strictContentLength:S,maxCachedSessions:z,maxRedirections:$,connect:P,maxRequestsPerClient:iA,localAddress:GA,maxResponseSize:YA,autoSelectFamily:nA,autoSelectFamilyAttemptTimeout:OA,allowH2:oA,maxConcurrentStreams:PA}={}){super();if(Y!==void 0)throw new CA("unsupported keepAlive, use pipelining=0 instead");if(E!==void 0)throw new CA("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");if(C!==void 0)throw new CA("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");if(F!==void 0)throw new CA("unsupported idleTimeout, use keepAliveTimeout instead");if(J!==void 0)throw new CA("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");if(B!=null&&!Number.isFinite(B))throw new CA("invalid maxHeaderSize");if(w!=null&&typeof w!=="string")throw new CA("invalid socketPath");if(g!=null&&(!Number.isFinite(g)||g<0))throw new CA("invalid connectTimeout");if(N!=null&&(!Number.isFinite(N)||N<=0))throw new CA("invalid keepAliveTimeout");if(U!=null&&(!Number.isFinite(U)||U<=0))throw new CA("invalid keepAliveMaxTimeout");if(R!=null&&!Number.isFinite(R))throw new CA("invalid keepAliveTimeoutThreshold");if(I!=null&&(!Number.isInteger(I)||I<0))throw new CA("headersTimeout must be a positive integer or zero");if(D!=null&&(!Number.isInteger(D)||D<0))throw new CA("bodyTimeout must be a positive integer or zero");if(P!=null&&typeof P!=="function"&&typeof P!=="object")throw new CA("connect must be a function or an object");if($!=null&&(!Number.isInteger($)||$<0))throw new CA("maxRedirections must be a positive number");if(iA!=null&&(!Number.isInteger(iA)||iA<0))throw new CA("maxRequestsPerClient must be a positive number");if(GA!=null&&(typeof GA!=="string"||sY.isIP(GA)===0))throw new CA("localAddress must be valid string IP address");if(YA!=null&&(!Number.isInteger(YA)||YA<-1))throw new CA("maxResponseSize must be a positive number");if(OA!=null&&(!Number.isInteger(OA)||OA<-1))throw new CA("autoSelectFamilyAttemptTimeout must be a positive number");if(oA!=null&&typeof oA!=="boolean")throw new CA("allowH2 must be a valid boolean value");if(PA!=null&&(typeof PA!=="number"||PA<1))throw new CA("maxConcurrentStreams must be a possitive integer, greater than 0");if(typeof P!=="function")P=GZ({...V,maxCachedSessions:z,allowH2:oA,socketPath:w,timeout:g,...K.nodeHasAutoSelectFamily&&nA?{autoSelectFamily:nA,autoSelectFamilyAttemptTimeout:OA}:void 0,...P});this[ZZ]=Q&&Q.Client&&Array.isArray(Q.Client)?Q.Client:[kZ({maxRedirections:$})],this[LA]=K.parseOrigin(A),this[mI]=P,this[EA]=null,this[gB]=M!=null?M:1,this[iE]=B||IZ.maxHeaderSize,this[ZD]=N==null?4000:N,this[tY]=U==null?600000:U,this[eY]=R==null?1000:R,this[uI]=this[ZD],this[IB]=null,this[cI]=GA!=null?GA:null,this[ZB]=0,this[CB]=0,this[rY]=`host: ${this[LA].hostname}${this[LA].port?`:${this[LA].port}`:""}\r
`,this[QJ]=D!=null?D:300000,this[AJ]=I!=null?I:300000,this[pI]=S==null?!0:S,this[MZ]=$,this[dI]=iA,this[EB]=null,this[IJ]=YA>-1?YA:-1,this[TQ]="h1",this[tA]=null,this[oE]=!oA?null:{openStreams:0,maxConcurrentStreams:PA!=null?PA:100},this[EJ]=`${this[LA].hostname}${this[LA].port?`:${this[LA].port}`:""}`,this[r]=[],this[t]=0,this[rA]=0}get pipelining(){return this[gB]}set pipelining(A){this[gB]=A,eA(this,!0)}get[SB](){return this[r].length-this[rA]}get[QA](){return this[rA]-this[t]}get[XB](){return this[r].length-this[t]}get[wZ](){return!!this[EA]&&!this[aB]&&!this[EA].destroyed}get[WD](){let A=this[EA];return A&&(A[hA]||A[nQ]||A[rB])||this[XB]>=(this[gB]||1)||this[SB]>0}[RZ](A){YJ(this),this.once("connect",A)}[WZ](A,Q){let B=A.origin||this[LA].origin,I=this[TQ]==="h2"?VD[XZ](B,A,Q):VD[KZ](B,A,Q);if(this[r].push(I),this[ZB]);else if(K.bodyLength(I.body)==null&&K.isIterable(I.body))this[ZB]=1,process.nextTick(eA,this);else eA(this,!0);if(this[ZB]&&this[CB]!==2&&this[WD])this[CB]=2;return this[CB]<2}async[LZ](){return new Promise((A)=>{if(!this[XB])A(null);else this[EB]=A})}async[VZ](A){return new Promise((Q)=>{let B=this[r].splice(this[rA]);for(let E=0;E<B.length;E++){let C=B[E];TA(this,C,A)}let I=()=>{if(this[EB])this[EB](),this[EB]=null;Q()};if(this[tA]!=null)K.destroy(this[tA],A),this[tA]=null,this[oE]=null;if(!this[EA])queueMicrotask(I);else K.destroy(this[EA].on("close",I),A);eA(this)})}}function yZ(A){Z(A.code!=="ERR_TLS_CERT_ALTNAME_INVALID"),this[EA][VA]=A,rE(this[hQ],A)}function qZ(A,Q,B){let I=new xQ(`HTTP/2: "frameError" received - type ${A}, code ${Q}`);if(B===0)this[EA][VA]=I,rE(this[hQ],I)}function OZ(){K.destroy(this,new sB("other side closed")),K.destroy(this[EA],new sB("other side closed"))}function PZ(A){let Q=this[hQ],B=new xQ(`HTTP/2: "GOAWAY" frame received with code ${A}`);if(Q[EA]=null,Q[tA]=null,Q.destroyed){Z(this[SB]===0);let I=Q[r].splice(Q[t]);for(let E=0;E<I.length;E++){let C=I[E];TA(this,C,B)}}else if(Q[QA]>0){let I=Q[r][Q[t]];Q[r][Q[t]++]=null,TA(Q,I,B)}Q[rA]=Q[t],Z(Q[QA]===0),Q.emit("disconnect",Q[LA],[Q],B),eA(Q)}var KQ=bY(),kZ=pE(),_Z=Buffer.alloc(0);async function fZ(){let A=process.env.JEST_WORKER_ID?wD():void 0,Q;try{Q=await WebAssembly.compile(Buffer.from(nY(),"base64"))}catch(B){Q=await WebAssembly.compile(Buffer.from(A||wD(),"base64"))}return await WebAssembly.instantiate(Q,{env:{wasm_on_url:(B,I,E)=>{return 0},wasm_on_status:(B,I,E)=>{Z.strictEqual(JA.ptr,B);let C=I-HQ+zQ.byteOffset;return JA.onStatus(new dE(zQ.buffer,C,E))||0},wasm_on_message_begin:(B)=>{return Z.strictEqual(JA.ptr,B),JA.onMessageBegin()||0},wasm_on_header_field:(B,I,E)=>{Z.strictEqual(JA.ptr,B);let C=I-HQ+zQ.byteOffset;return JA.onHeaderField(new dE(zQ.buffer,C,E))||0},wasm_on_header_value:(B,I,E)=>{Z.strictEqual(JA.ptr,B);let C=I-HQ+zQ.byteOffset;return JA.onHeaderValue(new dE(zQ.buffer,C,E))||0},wasm_on_headers_complete:(B,I,E,C)=>{return Z.strictEqual(JA.ptr,B),JA.onHeadersComplete(I,Boolean(E),Boolean(C))||0},wasm_on_body:(B,I,E)=>{Z.strictEqual(JA.ptr,B);let C=I-HQ+zQ.byteOffset;return JA.onBody(new dE(zQ.buffer,C,E))||0},wasm_on_message_complete:(B)=>{return Z.strictEqual(JA.ptr,B),JA.onMessageComplete()||0}}})}var LD=null,XD=fZ();XD.catch();var JA=null,zQ=null,lE=0,HQ=null,tB=1,nE=2,SD=3;class gJ{constructor(A,Q,{exports:B}){Z(Number.isFinite(A[iE])&&A[iE]>0),this.llhttp=B,this.ptr=this.llhttp.llhttp_alloc(KQ.TYPE.RESPONSE),this.client=A,this.socket=Q,this.timeout=null,this.timeoutValue=null,this.timeoutType=null,this.statusCode=null,this.statusText="",this.upgrade=!1,this.headers=[],this.headersSize=0,this.headersMaxSize=A[iE],this.shouldKeepAlive=!1,this.paused=!1,this.resume=this.resume.bind(this),this.bytesRead=0,this.keepAlive="",this.contentLength="",this.connection="",this.maxResponseSize=A[IJ]}setTimeout(A,Q){if(this.timeoutType=Q,A!==this.timeoutValue){if(MD.clearTimeout(this.timeout),A){if(this.timeout=MD.setTimeout(vZ,A,this),this.timeout.unref)this.timeout.unref()}else this.timeout=null;this.timeoutValue=A}else if(this.timeout){if(this.timeout.refresh)this.timeout.refresh()}}resume(){if(this.socket.destroyed||!this.paused)return;if(Z(this.ptr!=null),Z(JA==null),this.llhttp.llhttp_resume(this.ptr),Z(this.timeoutType===nE),this.timeout){if(this.timeout.refresh)this.timeout.refresh()}this.paused=!1,this.execute(this.socket.read()||_Z),this.readMore()}readMore(){while(!this.paused&&this.ptr){let A=this.socket.read();if(A===null)break;this.execute(A)}}execute(A){Z(this.ptr!=null),Z(JA==null),Z(!this.paused);let{socket:Q,llhttp:B}=this;if(A.length>lE){if(HQ)B.free(HQ);lE=Math.ceil(A.length/4096)*4096,HQ=B.malloc(lE)}new Uint8Array(B.memory.buffer,HQ,lE).set(A);try{let I;try{zQ=A,JA=this,I=B.llhttp_execute(this.ptr,HQ,A.length)}catch(C){throw C}finally{JA=null,zQ=null}let E=B.llhttp_get_error_pos(this.ptr)-HQ;if(I===KQ.ERROR.PAUSED_UPGRADE)this.onUpgrade(A.slice(E));else if(I===KQ.ERROR.PAUSED)this.paused=!0,Q.unshift(A.slice(E));else if(I!==KQ.ERROR.OK){let C=B.llhttp_get_error_reason(this.ptr),g="";if(C){let D=new Uint8Array(B.memory.buffer,C).indexOf(0);g="Response does not match the HTTP/1.1 protocol ("+Buffer.from(B.memory.buffer,C,D).toString()+")"}throw new YZ(g,KQ.ERROR[I],A.slice(E))}}catch(I){K.destroy(Q,I)}}destroy(){Z(this.ptr!=null),Z(JA==null),this.llhttp.llhttp_free(this.ptr),this.ptr=null,MD.clearTimeout(this.timeout),this.timeout=null,this.timeoutValue=null,this.timeoutType=null,this.paused=!1}onStatus(A){this.statusText=A.toString()}onMessageBegin(){let{socket:A,client:Q}=this;if(A.destroyed)return-1;if(!Q[r][Q[t]])return-1}onHeaderField(A){let Q=this.headers.length;if((Q&1)===0)this.headers.push(A);else this.headers[Q-1]=Buffer.concat([this.headers[Q-1],A]);this.trackHeader(A.length)}onHeaderValue(A){let Q=this.headers.length;if((Q&1)===1)this.headers.push(A),Q+=1;else this.headers[Q-1]=Buffer.concat([this.headers[Q-1],A]);let B=this.headers[Q-2];if(B.length===10&&B.toString().toLowerCase()==="keep-alive")this.keepAlive+=A.toString();else if(B.length===10&&B.toString().toLowerCase()==="connection")this.connection+=A.toString();else if(B.length===14&&B.toString().toLowerCase()==="content-length")this.contentLength+=A.toString();this.trackHeader(A.length)}trackHeader(A){if(this.headersSize+=A,this.headersSize>=this.headersMaxSize)K.destroy(this.socket,new FZ)}onUpgrade(A){let{upgrade:Q,client:B,socket:I,headers:E,statusCode:C}=this;Z(Q);let g=B[r][B[t]];Z(g),Z(!I.destroyed),Z(I===B[EA]),Z(!this.paused),Z(g.upgrade||g.method==="CONNECT"),this.statusCode=null,this.statusText="",this.shouldKeepAlive=null,Z(this.headers.length%2===0),this.headers=[],this.headersSize=0,I.unshift(A),I[IA].destroy(),I[IA]=null,I[hQ]=null,I[VA]=null,I.removeListener("error",FJ).removeListener("readable",DJ).removeListener("end",NJ).removeListener("close",KD),B[EA]=null,B[r][B[t]++]=null,B.emit("disconnect",B[LA],[B],new xQ("upgrade"));try{g.onUpgrade(C,E,I)}catch(D){K.destroy(I,D)}eA(B)}onHeadersComplete(A,Q,B){let{client:I,socket:E,headers:C,statusText:g}=this;if(E.destroyed)return-1;let D=I[r][I[t]];if(!D)return-1;if(Z(!this.upgrade),Z(this.statusCode<200),A===100)return K.destroy(E,new sB("bad response",K.getSocketInfo(E))),-1;if(Q&&!D.upgrade)return K.destroy(E,new sB("bad upgrade",K.getSocketInfo(E))),-1;if(Z.strictEqual(this.timeoutType,tB),this.statusCode=A,this.shouldKeepAlive=B||D.method==="HEAD"&&!E[hA]&&this.connection.toLowerCase()==="keep-alive",this.statusCode>=200){let Y=D.bodyTimeout!=null?D.bodyTimeout:I[QJ];this.setTimeout(Y,nE)}else if(this.timeout){if(this.timeout.refresh)this.timeout.refresh()}if(D.method==="CONNECT")return Z(I[QA]===1),this.upgrade=!0,2;if(Q)return Z(I[QA]===1),this.upgrade=!0,2;if(Z(this.headers.length%2===0),this.headers=[],this.headersSize=0,this.shouldKeepAlive&&I[gB]){let Y=this.keepAlive?K.parseKeepAliveTimeout(this.keepAlive):null;if(Y!=null){let N=Math.min(Y-I[eY],I[tY]);if(N<=0)E[hA]=!0;else I[uI]=N}else I[uI]=I[ZD]}else E[hA]=!0;let F=D.onHeaders(A,C,this.resume,g)===!1;if(D.aborted)return-1;if(D.method==="HEAD")return 1;if(A<200)return 1;if(E[rB])E[rB]=!1,eA(I);return F?KQ.ERROR.PAUSED:0}onBody(A){let{client:Q,socket:B,statusCode:I,maxResponseSize:E}=this;if(B.destroyed)return-1;let C=Q[r][Q[t]];if(Z(C),Z.strictEqual(this.timeoutType,nE),this.timeout){if(this.timeout.refresh)this.timeout.refresh()}if(Z(I>=200),E>-1&&this.bytesRead+A.length>E)return K.destroy(B,new JZ),-1;if(this.bytesRead+=A.length,C.onData(A)===!1)return KQ.ERROR.PAUSED}onMessageComplete(){let{client:A,socket:Q,statusCode:B,upgrade:I,headers:E,contentLength:C,bytesRead:g,shouldKeepAlive:D}=this;if(Q.destroyed&&(!B||D))return-1;if(I)return;let F=A[r][A[t]];if(Z(F),Z(B>=100),this.statusCode=null,this.statusText="",this.bytesRead=0,this.contentLength="",this.keepAlive="",this.connection="",Z(this.headers.length%2===0),this.headers=[],this.headersSize=0,B<200)return;if(F.method!=="HEAD"&&C&&g!==parseInt(C,10))return K.destroy(Q,new gZ),-1;if(F.onComplete(E),A[r][A[t]++]=null,Q[nQ])return Z.strictEqual(A[QA],0),K.destroy(Q,new xQ("reset")),KQ.ERROR.PAUSED;else if(!D)return K.destroy(Q,new xQ("reset")),KQ.ERROR.PAUSED;else if(Q[hA]&&A[QA]===0)return K.destroy(Q,new xQ("reset")),KQ.ERROR.PAUSED;else if(A[gB]===1)setImmediate(eA,A);else eA(A)}}function vZ(A){let{socket:Q,timeoutType:B,client:I}=A;if(B===tB){if(!Q[nQ]||Q.writableNeedDrain||I[QA]>1)Z(!A.paused,"cannot be paused while waiting for headers"),K.destroy(Q,new DZ)}else if(B===nE){if(!A.paused)K.destroy(Q,new NZ)}else if(B===SD)Z(I[QA]===0&&I[uI]),K.destroy(Q,new xQ("socket idle timeout"))}function DJ(){let{[IA]:A}=this;if(A)A.readMore()}function FJ(A){let{[hQ]:Q,[IA]:B}=this;if(Z(A.code!=="ERR_TLS_CERT_ALTNAME_INVALID"),Q[TQ]!=="h2"){if(A.code==="ECONNRESET"&&B.statusCode&&!B.shouldKeepAlive){B.onMessageComplete();return}}this[VA]=A,rE(this[hQ],A)}function rE(A,Q){if(A[QA]===0&&Q.code!=="UND_ERR_INFO"&&Q.code!=="UND_ERR_SOCKET"){Z(A[rA]===A[t]);let B=A[r].splice(A[t]);for(let I=0;I<B.length;I++){let E=B[I];TA(A,E,Q)}Z(A[XB]===0)}}function NJ(){let{[IA]:A,[hQ]:Q}=this;if(Q[TQ]!=="h2"){if(A.statusCode&&!A.shouldKeepAlive){A.onMessageComplete();return}}K.destroy(this,new sB("other side closed",K.getSocketInfo(this)))}function KD(){let{[hQ]:A,[IA]:Q}=this;if(A[TQ]==="h1"&&Q){if(!this[VA]&&Q.statusCode&&!Q.shouldKeepAlive)Q.onMessageComplete();this[IA].destroy(),this[IA]=null}let B=this[VA]||new sB("closed",K.getSocketInfo(this));if(A[EA]=null,A.destroyed){Z(A[SB]===0);let I=A[r].splice(A[t]);for(let E=0;E<I.length;E++){let C=I[E];TA(A,C,B)}}else if(A[QA]>0&&B.code!=="UND_ERR_INFO"){let I=A[r][A[t]];A[r][A[t]++]=null,TA(A,I,B)}A[rA]=A[t],Z(A[QA]===0),A.emit("disconnect",A[LA],[A],B),eA(A)}async function YJ(A){Z(!A[aB]),Z(!A[EA]);let{host:Q,hostname:B,protocol:I,port:E}=A[LA];if(B[0]==="["){let C=B.indexOf("]");Z(C!==-1);let g=B.substring(1,C);Z(sY.isIP(g)),B=g}if(A[aB]=!0,XA.beforeConnect.hasSubscribers)XA.beforeConnect.publish({connectParams:{host:Q,hostname:B,protocol:I,port:E,servername:A[IB],localAddress:A[cI]},connector:A[mI]});try{let C=await new Promise((D,F)=>{A[mI]({host:Q,hostname:B,protocol:I,port:E,servername:A[IB],localAddress:A[cI]},(Y,N)=>{if(Y)F(Y);else D(N)})});if(A.destroyed){K.destroy(C.on("error",()=>{}),new UZ);return}if(A[aB]=!1,Z(C),C.alpnProtocol==="h2"){if(!oY)oY=!0,process.emitWarning("H2 support is experimental, expect them to change at any time.",{code:"UNDICI-H2"});let D=aE.connect(A[LA],{createConnection:()=>C,peerMaxConcurrentStreams:A[oE].maxConcurrentStreams});A[TQ]="h2",D[hQ]=A,D[EA]=C,D.on("error",yZ),D.on("frameError",qZ),D.on("end",OZ),D.on("goaway",PZ),D.on("close",KD),D.unref(),A[tA]=D,C[tA]=D}else{if(!LD)LD=await XD,XD=null;C[bI]=!1,C[nQ]=!1,C[hA]=!1,C[rB]=!1,C[IA]=new gJ(A,C,LD)}if(C[BJ]=0,C[dI]=A[dI],C[hQ]=A,C[VA]=null,C.on("error",FJ).on("readable",DJ).on("end",NJ).on("close",KD),A[EA]=C,XA.connected.hasSubscribers)XA.connected.publish({connectParams:{host:Q,hostname:B,protocol:I,port:E,servername:A[IB],localAddress:A[cI]},connector:A[mI],socket:C});A.emit("connect",A[LA],[A])}catch(C){if(A.destroyed)return;if(A[aB]=!1,XA.connectError.hasSubscribers)XA.connectError.publish({connectParams:{host:Q,hostname:B,protocol:I,port:E,servername:A[IB],localAddress:A[cI]},connector:A[mI],error:C});if(C.code==="ERR_TLS_CERT_ALTNAME_INVALID"){Z(A[QA]===0);while(A[SB]>0&&A[r][A[rA]].servername===A[IB]){let g=A[r][A[rA]++];TA(A,g,C)}}else rE(A,C);A.emit("connectionError",A[LA],[A],C)}eA(A)}function aY(A){A[CB]=0,A.emit("drain",A[LA],[A])}function eA(A,Q){if(A[ZB]===2)return;if(A[ZB]=2,bZ(A,Q),A[ZB]=0,A[t]>256)A[r].splice(0,A[t]),A[rA]-=A[t],A[t]=0}function bZ(A,Q){while(!0){if(A.destroyed){Z(A[SB]===0);return}if(A[EB]&&!A[XB]){A[EB](),A[EB]=null;return}let B=A[EA];if(B&&!B.destroyed&&B.alpnProtocol!=="h2"){if(A[XB]===0){if(!B[bI]&&B.unref)B.unref(),B[bI]=!0}else if(B[bI]&&B.ref)B.ref(),B[bI]=!1;if(A[XB]===0){if(B[IA].timeoutType!==SD)B[IA].setTimeout(A[uI],SD)}else if(A[QA]>0&&B[IA].statusCode<200){if(B[IA].timeoutType!==tB){let E=A[r][A[t]],C=E.headersTimeout!=null?E.headersTimeout:A[AJ];B[IA].setTimeout(C,tB)}}}if(A[WD])A[CB]=2;else if(A[CB]===2){if(Q)A[CB]=1,process.nextTick(aY,A);else aY(A);continue}if(A[SB]===0)return;if(A[QA]>=(A[gB]||1))return;let I=A[r][A[rA]];if(A[LA].protocol==="https:"&&A[IB]!==I.servername){if(A[QA]>0)return;if(A[IB]=I.servername,B&&B.servername!==I.servername){K.destroy(B,new xQ("servername changed"));return}}if(A[aB])return;if(!B&&!A[tA]){YJ(A);return}if(B.destroyed||B[nQ]||B[hA]||B[rB])return;if(A[QA]>0&&!I.idempotent)return;if(A[QA]>0&&(I.upgrade||I.method==="CONNECT"))return;if(A[QA]>0&&K.bodyLength(I.body)!==0&&(K.isStream(I.body)||K.isAsyncIterable(I.body)))return;if(!I.aborted&&mZ(A,I))A[rA]++;else A[r].splice(A[rA],1)}}function JJ(A){return A!=="GET"&&A!=="HEAD"&&A!=="OPTIONS"&&A!=="TRACE"&&A!=="CONNECT"}function mZ(A,Q){if(A[TQ]==="h2"){cZ(A,A[tA],Q);return}let{body:B,method:I,path:E,host:C,upgrade:g,headers:D,blocking:F,reset:Y}=Q,N=I==="PUT"||I==="POST"||I==="PATCH";if(B&&typeof B.read==="function")B.read(0);let J=K.bodyLength(B),U=J;if(U===null)U=Q.contentLength;if(U===0&&!N)U=null;if(JJ(I)&&U>0&&Q.contentLength!==null&&Q.contentLength!==U){if(A[pI])return TA(A,Q,new iQ),!1;process.emitWarning(new iQ)}let R=A[EA];try{Q.onConnect((M)=>{if(Q.aborted||Q.completed)return;TA(A,Q,M||new zD),K.destroy(R,new xQ("aborted"))})}catch(M){TA(A,Q,M)}if(Q.aborted)return!1;if(I==="HEAD")R[hA]=!0;if(g||I==="CONNECT")R[hA]=!0;if(Y!=null)R[hA]=Y;if(A[dI]&&R[BJ]++>=A[dI])R[hA]=!0;if(F)R[rB]=!0;let w=`${I} ${E} HTTP/1.1\r
`;if(typeof C==="string")w+=`host: ${C}\r
`;else w+=A[rY];if(g)w+=`connection: upgrade\r
upgrade: ${g}\r
`;else if(A[gB]&&!R[hA])w+=`connection: keep-alive\r
`;else w+=`connection: close\r
`;if(D)w+=D;if(XA.sendHeaders.hasSubscribers)XA.sendHeaders.publish({request:Q,headers:w,socket:R});if(!B||J===0){if(U===0)R.write(`${w}content-length: 0\r
\r
`,"latin1");else Z(U===null,"no body must not have content length"),R.write(`${w}\r
`,"latin1");Q.onRequestSent()}else if(K.isBuffer(B)){if(Z(U===B.byteLength,"buffer body must have content length"),R.cork(),R.write(`${w}content-length: ${U}\r
\r
`,"latin1"),R.write(B),R.uncork(),Q.onBodySent(B),Q.onRequestSent(),!N)R[hA]=!0}else if(K.isBlobLike(B))if(typeof B.stream==="function")sE({body:B.stream(),client:A,request:Q,socket:R,contentLength:U,header:w,expectsPayload:N});else GJ({body:B,client:A,request:Q,socket:R,contentLength:U,header:w,expectsPayload:N});else if(K.isStream(B))UJ({body:B,client:A,request:Q,socket:R,contentLength:U,header:w,expectsPayload:N});else if(K.isIterable(B))sE({body:B,client:A,request:Q,socket:R,contentLength:U,header:w,expectsPayload:N});else Z(!1);return!0}function cZ(A,Q,B){let{body:I,method:E,path:C,host:g,upgrade:D,expectContinue:F,signal:Y,headers:N}=B,J;if(typeof N==="string")J=VD[SZ](N.trim());else J=N;if(D)return TA(A,B,new Error("Upgrade not supported for H2")),!1;try{B.onConnect((z)=>{if(B.aborted||B.completed)return;TA(A,B,z||new zD)})}catch(z){TA(A,B,z)}if(B.aborted)return!1;let U,R=A[oE];if(J[zZ]=g||A[EJ],J[HZ]=E,E==="CONNECT"){if(Q.ref(),U=Q.request(J,{endStream:!1,signal:Y}),U.id&&!U.pending)B.onUpgrade(null,null,U),++R.openStreams;else U.once("ready",()=>{B.onUpgrade(null,null,U),++R.openStreams});return U.once("close",()=>{if(R.openStreams-=1,R.openStreams===0)Q.unref()}),!0}J[xZ]=C,J[hZ]="https";let w=E==="PUT"||E==="POST"||E==="PATCH";if(I&&typeof I.read==="function")I.read(0);let M=K.bodyLength(I);if(M==null)M=B.contentLength;if(M===0||!w)M=null;if(JJ(E)&&M>0&&B.contentLength!=null&&B.contentLength!==M){if(A[pI])return TA(A,B,new iQ),!1;process.emitWarning(new iQ)}if(M!=null)Z(I,"no body must not have content length"),J[TZ]=`${M}`;Q.ref();let V=E==="GET"||E==="HEAD";if(F)J[jZ]="100-continue",U=Q.request(J,{endStream:V,signal:Y}),U.once("continue",S);else U=Q.request(J,{endStream:V,signal:Y}),S();return++R.openStreams,U.once("response",(z)=>{let{[$Z]:$,...P}=z;if(B.onHeaders(Number($),P,U.resume.bind(U),"")===!1)U.pause()}),U.once("end",()=>{B.onComplete([])}),U.on("data",(z)=>{if(B.onData(z)===!1)U.pause()}),U.once("close",()=>{if(R.openStreams-=1,R.openStreams===0)Q.unref()}),U.once("error",function(z){if(A[tA]&&!A[tA].destroyed&&!this.closed&&!this.destroyed)R.streams-=1,K.destroy(U,z)}),U.once("frameError",(z,$)=>{let P=new xQ(`HTTP/2: "frameError" received - type ${z}, code ${$}`);if(TA(A,B,P),A[tA]&&!A[tA].destroyed&&!this.closed&&!this.destroyed)R.streams-=1,K.destroy(U,P)}),!0;function S(){if(!I)B.onRequestSent();else if(K.isBuffer(I))Z(M===I.byteLength,"buffer body must have content length"),U.cork(),U.write(I),U.uncork(),U.end(),B.onBodySent(I),B.onRequestSent();else if(K.isBlobLike(I))if(typeof I.stream==="function")sE({client:A,request:B,contentLength:M,h2stream:U,expectsPayload:w,body:I.stream(),socket:A[EA],header:""});else GJ({body:I,client:A,request:B,contentLength:M,expectsPayload:w,h2stream:U,header:"",socket:A[EA]});else if(K.isStream(I))UJ({body:I,client:A,request:B,contentLength:M,expectsPayload:w,socket:A[EA],h2stream:U,header:""});else if(K.isIterable(I))sE({body:I,client:A,request:B,contentLength:M,expectsPayload:w,header:"",h2stream:U,socket:A[EA]});else Z(!1)}}function UJ({h2stream:A,body:Q,client:B,request:I,socket:E,contentLength:C,header:g,expectsPayload:D}){if(Z(C!==0||B[QA]===0,"stream body cannot be pipelined"),B[TQ]==="h2"){let M=function(V){I.onBodySent(V)},w=EZ(Q,A,(V)=>{if(V)K.destroy(Q,V),K.destroy(A,V);else I.onRequestSent()});w.on("data",M),w.once("end",()=>{w.removeListener("data",M),K.destroy(w)});return}let F=!1,Y=new HD({socket:E,request:I,contentLength:C,client:B,expectsPayload:D,header:g}),N=function(w){if(F)return;try{if(!Y.write(w)&&this.pause)this.pause()}catch(M){K.destroy(this,M)}},J=function(){if(F)return;if(Q.resume)Q.resume()},U=function(){if(F)return;let w=new zD;queueMicrotask(()=>R(w))},R=function(w){if(F)return;if(F=!0,Z(E.destroyed||E[nQ]&&B[QA]<=1),E.off("drain",J).off("error",R),Q.removeListener("data",N).removeListener("end",R).removeListener("error",R).removeListener("close",U),!w)try{Y.end()}catch(M){w=M}if(Y.destroy(w),w&&(w.code!=="UND_ERR_INFO"||w.message!=="reset"))K.destroy(Q,w);else K.destroy(Q)};if(Q.on("data",N).on("end",R).on("error",R).on("close",U),Q.resume)Q.resume();E.on("drain",J).on("error",R)}async function GJ({h2stream:A,body:Q,client:B,request:I,socket:E,contentLength:C,header:g,expectsPayload:D}){Z(C===Q.size,"blob body must have content length");let F=B[TQ]==="h2";try{if(C!=null&&C!==Q.size)throw new iQ;let Y=Buffer.from(await Q.arrayBuffer());if(F)A.cork(),A.write(Y),A.uncork();else E.cork(),E.write(`${g}content-length: ${C}\r
\r
`,"latin1"),E.write(Y),E.uncork();if(I.onBodySent(Y),I.onRequestSent(),!D)E[hA]=!0;eA(B)}catch(Y){K.destroy(F?A:E,Y)}}async function sE({h2stream:A,body:Q,client:B,request:I,socket:E,contentLength:C,header:g,expectsPayload:D}){Z(C!==0||B[QA]===0,"iterator body cannot be pipelined");let F=null;function Y(){if(F){let U=F;F=null,U()}}let N=()=>new Promise((U,R)=>{if(Z(F===null),E[VA])R(E[VA]);else F=U});if(B[TQ]==="h2"){A.on("close",Y).on("drain",Y);try{for await(let U of Q){if(E[VA])throw E[VA];let R=A.write(U);if(I.onBodySent(U),!R)await N()}}catch(U){A.destroy(U)}finally{I.onRequestSent(),A.end(),A.off("close",Y).off("drain",Y)}return}E.on("close",Y).on("drain",Y);let J=new HD({socket:E,request:I,contentLength:C,client:B,expectsPayload:D,header:g});try{for await(let U of Q){if(E[VA])throw E[VA];if(!J.write(U))await N()}J.end()}catch(U){J.destroy(U)}finally{E.off("close",Y).off("drain",Y)}}class HD{constructor({socket:A,request:Q,contentLength:B,client:I,expectsPayload:E,header:C}){this.socket=A,this.request=Q,this.contentLength=B,this.client=I,this.bytesWritten=0,this.expectsPayload=E,this.header=C,A[nQ]=!0}write(A){let{socket:Q,request:B,contentLength:I,client:E,bytesWritten:C,expectsPayload:g,header:D}=this;if(Q[VA])throw Q[VA];if(Q.destroyed)return!1;let F=Buffer.byteLength(A);if(!F)return!0;if(I!==null&&C+F>I){if(E[pI])throw new iQ;process.emitWarning(new iQ)}if(Q.cork(),C===0){if(!g)Q[hA]=!0;if(I===null)Q.write(`${D}transfer-encoding: chunked\r
`,"latin1");else Q.write(`${D}content-length: ${I}\r
\r
`,"latin1")}if(I===null)Q.write(`\r
${F.toString(16)}\r
`,"latin1");this.bytesWritten+=F;let Y=Q.write(A);if(Q.uncork(),B.onBodySent(A),!Y){if(Q[IA].timeout&&Q[IA].timeoutType===tB){if(Q[IA].timeout.refresh)Q[IA].timeout.refresh()}}return Y}end(){let{socket:A,contentLength:Q,client:B,bytesWritten:I,expectsPayload:E,header:C,request:g}=this;if(g.onRequestSent(),A[nQ]=!1,A[VA])throw A[VA];if(A.destroyed)return;if(I===0)if(E)A.write(`${C}content-length: 0\r
\r
`,"latin1");else A.write(`${C}\r
`,"latin1");else if(Q===null)A.write(`\r
0\r
\r
`,"latin1");if(Q!==null&&I!==Q)if(B[pI])throw new iQ;else process.emitWarning(new iQ);if(A[IA].timeout&&A[IA].timeoutType===tB){if(A[IA].timeout.refresh)A[IA].timeout.refresh()}eA(B)}destroy(A){let{socket:Q,client:B}=this;if(Q[nQ]=!1,A)Z(B[QA]<=1,"pipeline should only contain this request"),K.destroy(Q,A)}}function TA(A,Q,B){try{Q.onError(B),Z(Q.aborted)}catch(I){A.emit("error",I)}}RJ.exports=CJ});var MJ=L((cz,wJ)=>{class xD{constructor(){this.bottom=0,this.top=0,this.list=new Array(2048),this.next=null}isEmpty(){return this.top===this.bottom}isFull(){return(this.top+1&2047)===this.bottom}push(A){this.list[this.top]=A,this.top=this.top+1&2047}shift(){let A=this.list[this.bottom];if(A===void 0)return null;return this.list[this.bottom]=void 0,this.bottom=this.bottom+1&2047,A}}wJ.exports=class A{constructor(){this.head=this.tail=new xD}isEmpty(){return this.head.isEmpty()}push(Q){if(this.head.isFull())this.head=this.head.next=new xD;this.head.push(Q)}shift(){let Q=this.tail,B=Q.shift();if(Q.isEmpty()&&Q.next!==null)this.tail=Q.next;return B}}});var WJ=L((uz,VJ)=>{var{kFree:uZ,kConnected:pZ,kPending:dZ,kQueued:lZ,kRunning:iZ,kSize:nZ}=o(),KB=Symbol("pool");class LJ{constructor(A){this[KB]=A}get connected(){return this[KB][pZ]}get free(){return this[KB][uZ]}get pending(){return this[KB][dZ]}get queued(){return this[KB][lZ]}get running(){return this[KB][iZ]}get size(){return this[KB][nZ]}}VJ.exports=LJ});var yD=L((pz,$J)=>{var oZ=_I(),aZ=MJ(),{kConnected:hD,kSize:ZJ,kRunning:XJ,kPending:SJ,kQueued:iI,kBusy:sZ,kFree:rZ,kUrl:tZ,kClose:eZ,kDestroy:AX,kDispatch:QX}=o(),BX=WJ(),fA=Symbol("clients"),jA=Symbol("needDrain"),nI=Symbol("queue"),TD=Symbol("closed resolve"),jD=Symbol("onDrain"),KJ=Symbol("onConnect"),zJ=Symbol("onDisconnect"),HJ=Symbol("onConnectionError"),$D=Symbol("get dispatcher"),hJ=Symbol("add client"),TJ=Symbol("remove client"),xJ=Symbol("stats");class jJ extends oZ{constructor(){super();this[nI]=new aZ,this[fA]=[],this[iI]=0;let A=this;this[jD]=function Q(B,I){let E=A[nI],C=!1;while(!C){let g=E.shift();if(!g)break;A[iI]--,C=!this.dispatch(g.opts,g.handler)}if(this[jA]=C,!this[jA]&&A[jA])A[jA]=!1,A.emit("drain",B,[A,...I]);if(A[TD]&&E.isEmpty())Promise.all(A[fA].map((g)=>g.close())).then(A[TD])},this[KJ]=(Q,B)=>{A.emit("connect",Q,[A,...B])},this[zJ]=(Q,B,I)=>{A.emit("disconnect",Q,[A,...B],I)},this[HJ]=(Q,B,I)=>{A.emit("connectionError",Q,[A,...B],I)},this[xJ]=new BX(this)}get[sZ](){return this[jA]}get[hD](){return this[fA].filter((A)=>A[hD]).length}get[rZ](){return this[fA].filter((A)=>A[hD]&&!A[jA]).length}get[SJ](){let A=this[iI];for(let{[SJ]:Q}of this[fA])A+=Q;return A}get[XJ](){let A=0;for(let{[XJ]:Q}of this[fA])A+=Q;return A}get[ZJ](){let A=this[iI];for(let{[ZJ]:Q}of this[fA])A+=Q;return A}get stats(){return this[xJ]}async[eZ](){if(this[nI].isEmpty())return Promise.all(this[fA].map((A)=>A.close()));else return new Promise((A)=>{this[TD]=A})}async[AX](A){while(!0){let Q=this[nI].shift();if(!Q)break;Q.handler.onError(A)}return Promise.all(this[fA].map((Q)=>Q.destroy(A)))}[QX](A,Q){let B=this[$D]();if(!B)this[jA]=!0,this[nI].push({opts:A,handler:Q}),this[iI]++;else if(!B.dispatch(A,Q))B[jA]=!0,this[jA]=!this[$D]();return!this[jA]}[hJ](A){if(A.on("drain",this[jD]).on("connect",this[KJ]).on("disconnect",this[zJ]).on("connectionError",this[HJ]),this[fA].push(A),this[jA])process.nextTick(()=>{if(this[jA])this[jD](A[tZ],[this,A])});return this}[TJ](A){A.close(()=>{let Q=this[fA].indexOf(A);if(Q!==-1)this[fA].splice(Q,1)}),this[jA]=this[fA].some((Q)=>!Q[jA]&&Q.closed!==!0&&Q.destroyed!==!0)}}$J.exports={PoolBase:jJ,kClients:fA,kNeedDrain:jA,kAddClient:hJ,kRemoveClient:TJ,kGetDispatcher:$D}});var eB=L((dz,kJ)=>{var{PoolBase:IX,kClients:yJ,kNeedDrain:EX,kAddClient:CX,kGetDispatcher:gX}=yD(),DX=lI(),{InvalidArgumentError:qD}=d(),OD=f(),{kUrl:qJ,kInterceptors:FX}=o(),NX=fI(),PD=Symbol("options"),kD=Symbol("connections"),OJ=Symbol("factory");function YX(A,Q){return new DX(A,Q)}class PJ extends IX{constructor(A,{connections:Q,factory:B=YX,connect:I,connectTimeout:E,tls:C,maxCachedSessions:g,socketPath:D,autoSelectFamily:F,autoSelectFamilyAttemptTimeout:Y,allowH2:N,...J}={}){super();if(Q!=null&&(!Number.isFinite(Q)||Q<0))throw new qD("invalid connections");if(typeof B!=="function")throw new qD("factory must be a function.");if(I!=null&&typeof I!=="function"&&typeof I!=="object")throw new qD("connect must be a function or an object");if(typeof I!=="function")I=NX({...C,maxCachedSessions:g,allowH2:N,socketPath:D,timeout:E,...OD.nodeHasAutoSelectFamily&&F?{autoSelectFamily:F,autoSelectFamilyAttemptTimeout:Y}:void 0,...I});this[FX]=J.interceptors&&J.interceptors.Pool&&Array.isArray(J.interceptors.Pool)?J.interceptors.Pool:[],this[kD]=Q||null,this[qJ]=OD.parseOrigin(A),this[PD]={...OD.deepClone(J),connect:I,allowH2:N},this[PD].interceptors=J.interceptors?{...J.interceptors}:void 0,this[OJ]=B}[gX](){let A=this[yJ].find((Q)=>!Q[EX]);if(A)return A;if(!this[kD]||this[yJ].length<this[kD])A=this[OJ](this[qJ],this[PD]),this[CX](A);return A}}kJ.exports=PJ});var uJ=L((lz,cJ)=>{var{BalancedPoolMissingUpstreamError:JX,InvalidArgumentError:UX}=d(),{PoolBase:GX,kClients:$A,kNeedDrain:oI,kAddClient:RX,kRemoveClient:wX,kGetDispatcher:MX}=yD(),LX=eB(),{kUrl:_D,kInterceptors:VX}=o(),{parseOrigin:_J}=f(),fJ=Symbol("factory"),tE=Symbol("options"),vJ=Symbol("kGreatestCommonDivisor"),zB=Symbol("kCurrentWeight"),HB=Symbol("kIndex"),FQ=Symbol("kWeight"),eE=Symbol("kMaxWeightPerServer"),AC=Symbol("kErrorPenalty");function bJ(A,Q){if(Q===0)return A;return bJ(Q,A%Q)}function WX(A,Q){return new LX(A,Q)}class mJ extends GX{constructor(A=[],{factory:Q=WX,...B}={}){super();if(this[tE]=B,this[HB]=-1,this[zB]=0,this[eE]=this[tE].maxWeightPerServer||100,this[AC]=this[tE].errorPenalty||15,!Array.isArray(A))A=[A];if(typeof Q!=="function")throw new UX("factory must be a function.");this[VX]=B.interceptors&&B.interceptors.BalancedPool&&Array.isArray(B.interceptors.BalancedPool)?B.interceptors.BalancedPool:[],this[fJ]=Q;for(let I of A)this.addUpstream(I);this._updateBalancedPoolStats()}addUpstream(A){let Q=_J(A).origin;if(this[$A].find((I)=>I[_D].origin===Q&&I.closed!==!0&&I.destroyed!==!0))return this;let B=this[fJ](Q,Object.assign({},this[tE]));this[RX](B),B.on("connect",()=>{B[FQ]=Math.min(this[eE],B[FQ]+this[AC])}),B.on("connectionError",()=>{B[FQ]=Math.max(1,B[FQ]-this[AC]),this._updateBalancedPoolStats()}),B.on("disconnect",(...I)=>{let E=I[2];if(E&&E.code==="UND_ERR_SOCKET")B[FQ]=Math.max(1,B[FQ]-this[AC]),this._updateBalancedPoolStats()});for(let I of this[$A])I[FQ]=this[eE];return this._updateBalancedPoolStats(),this}_updateBalancedPoolStats(){this[vJ]=this[$A].map((A)=>A[FQ]).reduce(bJ,0)}removeUpstream(A){let Q=_J(A).origin,B=this[$A].find((I)=>I[_D].origin===Q&&I.closed!==!0&&I.destroyed!==!0);if(B)this[wX](B);return this}get upstreams(){return this[$A].filter((A)=>A.closed!==!0&&A.destroyed!==!0).map((A)=>A[_D].origin)}[MX](){if(this[$A].length===0)throw new JX;if(!this[$A].find((E)=>!E[oI]&&E.closed!==!0&&E.destroyed!==!0))return;if(this[$A].map((E)=>E[oI]).reduce((E,C)=>E&&C,!0))return;let B=0,I=this[$A].findIndex((E)=>!E[oI]);while(B++<this[$A].length){this[HB]=(this[HB]+1)%this[$A].length;let E=this[$A][this[HB]];if(E[FQ]>this[$A][I][FQ]&&!E[oI])I=this[HB];if(this[HB]===0){if(this[zB]=this[zB]-this[vJ],this[zB]<=0)this[zB]=this[eE]}if(E[FQ]>=this[zB]&&!E[oI])return E}return this[zB]=this[$A][I][FQ],this[HB]=I,this[$A][I]}}cJ.exports=mJ});var bD=L((iz,lJ)=>{var{kConnected:pJ,kSize:dJ}=o();class fD{constructor(A){this.value=A}deref(){return this.value[pJ]===0&&this.value[dJ]===0?void 0:this.value}}class vD{constructor(A){this.finalizer=A}register(A,Q){if(A.on)A.on("disconnect",()=>{if(A[pJ]===0&&A[dJ]===0)this.finalizer(Q)})}}lJ.exports=function(){if(process.env.NODE_V8_COVERAGE)return{WeakRef:fD,FinalizationRegistry:vD};return{WeakRef:global.WeakRef||fD,FinalizationRegistry:global.FinalizationRegistry||vD}}});var aI=L((nz,AU)=>{var{InvalidArgumentError:QC}=d(),{kClients:DB,kRunning:iJ,kClose:ZX,kDestroy:XX,kDispatch:SX,kInterceptors:KX}=o(),zX=_I(),HX=eB(),xX=lI(),hX=f(),TX=pE(),{WeakRef:jX,FinalizationRegistry:$X}=bD()(),nJ=Symbol("onConnect"),oJ=Symbol("onDisconnect"),aJ=Symbol("onConnectionError"),yX=Symbol("maxRedirections"),sJ=Symbol("onDrain"),rJ=Symbol("factory"),tJ=Symbol("finalizer"),mD=Symbol("options");function qX(A,Q){return Q&&Q.connections===1?new xX(A,Q):new HX(A,Q)}class eJ extends zX{constructor({factory:A=qX,maxRedirections:Q=0,connect:B,...I}={}){super();if(typeof A!=="function")throw new QC("factory must be a function.");if(B!=null&&typeof B!=="function"&&typeof B!=="object")throw new QC("connect must be a function or an object");if(!Number.isInteger(Q)||Q<0)throw new QC("maxRedirections must be a positive number");if(B&&typeof B!=="function")B={...B};this[KX]=I.interceptors&&I.interceptors.Agent&&Array.isArray(I.interceptors.Agent)?I.interceptors.Agent:[TX({maxRedirections:Q})],this[mD]={...hX.deepClone(I),connect:B},this[mD].interceptors=I.interceptors?{...I.interceptors}:void 0,this[yX]=Q,this[rJ]=A,this[DB]=new Map,this[tJ]=new $X((C)=>{let g=this[DB].get(C);if(g!==void 0&&g.deref()===void 0)this[DB].delete(C)});let E=this;this[sJ]=(C,g)=>{E.emit("drain",C,[E,...g])},this[nJ]=(C,g)=>{E.emit("connect",C,[E,...g])},this[oJ]=(C,g,D)=>{E.emit("disconnect",C,[E,...g],D)},this[aJ]=(C,g,D)=>{E.emit("connectionError",C,[E,...g],D)}}get[iJ](){let A=0;for(let Q of this[DB].values()){let B=Q.deref();if(B)A+=B[iJ]}return A}[SX](A,Q){let B;if(A.origin&&(typeof A.origin==="string"||A.origin instanceof URL))B=String(A.origin);else throw new QC("opts.origin must be a non-empty string or URL.");let I=this[DB].get(B),E=I?I.deref():null;if(!E)E=this[rJ](A.origin,this[mD]).on("drain",this[sJ]).on("connect",this[nJ]).on("disconnect",this[oJ]).on("connectionError",this[aJ]),this[DB].set(B,new jX(E)),this[tJ].register(E,B);return E.dispatch(A,Q)}async[ZX](){let A=[];for(let Q of this[DB].values()){let B=Q.deref();if(B)A.push(B.close())}await Promise.all(A)}async[XX](A){let Q=[];for(let B of this[DB].values()){let I=B.deref();if(I)Q.push(I.destroy(A))}await Promise.all(Q)}}AU.exports=eJ});var NU=L((oz,FU)=>{var EU=G("assert"),{Readable:OX}=G("stream"),{RequestAbortedError:CU,NotSupportedError:PX,InvalidArgumentError:kX}=d(),EC=f(),{ReadableStreamFrom:_X,toUSVString:fX}=f(),cD,AQ=Symbol("kConsume"),BC=Symbol("kReading"),FB=Symbol("kBody"),QU=Symbol("abort"),gU=Symbol("kContentType"),BU=()=>{};FU.exports=class A extends OX{constructor({resume:Q,abort:B,contentType:I="",highWaterMark:E=65536}){super({autoDestroy:!0,read:Q,highWaterMark:E});this._readableState.dataEmitted=!1,this[QU]=B,this[AQ]=null,this[FB]=null,this[gU]=I,this[BC]=!1}destroy(Q){if(this.destroyed)return this;if(!Q&&!this._readableState.endEmitted)Q=new CU;if(Q)this[QU]();return super.destroy(Q)}emit(Q,...B){if(Q==="data")this._readableState.dataEmitted=!0;else if(Q==="error")this._readableState.errorEmitted=!0;return super.emit(Q,...B)}on(Q,...B){if(Q==="data"||Q==="readable")this[BC]=!0;return super.on(Q,...B)}addListener(Q,...B){return this.on(Q,...B)}off(Q,...B){let I=super.off(Q,...B);if(Q==="data"||Q==="readable")this[BC]=this.listenerCount("data")>0||this.listenerCount("readable")>0;return I}removeListener(Q,...B){return this.off(Q,...B)}push(Q){if(this[AQ]&&Q!==null&&this.readableLength===0)return DU(this[AQ],Q),this[BC]?super.push(Q):!0;return super.push(Q)}async text(){return IC(this,"text")}async json(){return IC(this,"json")}async blob(){return IC(this,"blob")}async arrayBuffer(){return IC(this,"arrayBuffer")}async formData(){throw new PX}get bodyUsed(){return EC.isDisturbed(this)}get body(){if(!this[FB]){if(this[FB]=_X(this),this[AQ])this[FB].getReader(),EU(this[FB].locked)}return this[FB]}dump(Q){let B=Q&&Number.isFinite(Q.limit)?Q.limit:262144,I=Q&&Q.signal;if(I)try{if(typeof I!=="object"||!("aborted"in I))throw new kX("signal must be an AbortSignal");EC.throwIfAborted(I)}catch(E){return Promise.reject(E)}if(this.closed)return Promise.resolve(null);return new Promise((E,C)=>{let g=I?EC.addAbortListener(I,()=>{this.destroy()}):BU;this.on("close",function(){if(g(),I&&I.aborted)C(I.reason||Object.assign(new Error("The operation was aborted"),{name:"AbortError"}));else E(null)}).on("error",BU).on("data",function(D){if(B-=D.length,B<=0)this.destroy()}).resume()})}};function vX(A){return A[FB]&&A[FB].locked===!0||A[AQ]}function bX(A){return EC.isDisturbed(A)||vX(A)}async function IC(A,Q){if(bX(A))throw new TypeError("unusable");return EU(!A[AQ]),new Promise((B,I)=>{A[AQ]={type:Q,stream:A,resolve:B,reject:I,length:0,body:[]},A.on("error",function(E){uD(this[AQ],E)}).on("close",function(){if(this[AQ].body!==null)uD(this[AQ],new CU)}),process.nextTick(mX,A[AQ])})}function mX(A){if(A.body===null)return;let{_readableState:Q}=A.stream;for(let B of Q.buffer)DU(A,B);if(Q.endEmitted)IU(this[AQ]);else A.stream.on("end",function(){IU(this[AQ])});A.stream.resume();while(A.stream.read()!=null);}function IU(A){let{type:Q,body:B,resolve:I,stream:E,length:C}=A;try{if(Q==="text")I(fX(Buffer.concat(B)));else if(Q==="json")I(JSON.parse(Buffer.concat(B)));else if(Q==="arrayBuffer"){let g=new Uint8Array(C),D=0;for(let F of B)g.set(F,D),D+=F.byteLength;I(g.buffer)}else if(Q==="blob"){if(!cD)cD=G("buffer").Blob;I(new cD(B,{type:E[gU]}))}uD(A)}catch(g){E.destroy(g)}}function DU(A,Q){A.length+=Q.length,A.body.push(Q)}function uD(A,Q){if(A.body===null)return;if(Q)A.reject(Q);else A.resolve();A.type=null,A.stream=null,A.resolve=null,A.reject=null,A.length=0,A.body=null}});var pD=L((az,JU)=>{var cX=G("assert"),{ResponseStatusCodeError:CC}=d(),{toUSVString:YU}=f();async function uX({callback:A,body:Q,contentType:B,statusCode:I,statusMessage:E,headers:C}){cX(Q);let g=[],D=0;for await(let F of Q)if(g.push(F),D+=F.length,D>131072){g=null;break}if(I===204||!B||!g){process.nextTick(A,new CC(`Response status code ${I}${E?`: ${E}`:""}`,I,C));return}try{if(B.startsWith("application/json")){let F=JSON.parse(YU(Buffer.concat(g)));process.nextTick(A,new CC(`Response status code ${I}${E?`: ${E}`:""}`,I,C,F));return}if(B.startsWith("text/")){let F=YU(Buffer.concat(g));process.nextTick(A,new CC(`Response status code ${I}${E?`: ${E}`:""}`,I,C,F));return}}catch(F){}process.nextTick(A,new CC(`Response status code ${I}${E?`: ${E}`:""}`,I,C))}JU.exports={getResolveErrorBodyCallback:uX}});var QI=L((sz,GU)=>{var{addAbortListener:pX}=f(),{RequestAbortedError:dX}=d(),AI=Symbol("kListener"),NB=Symbol("kSignal");function UU(A){if(A.abort)A.abort();else A.onError(new dX)}function lX(A,Q){if(A[NB]=null,A[AI]=null,!Q)return;if(Q.aborted){UU(A);return}A[NB]=Q,A[AI]=()=>{UU(A)},pX(A[NB],A[AI])}function iX(A){if(!A[NB])return;if("removeEventListener"in A[NB])A[NB].removeEventListener("abort",A[AI]);else A[NB].removeListener("abort",A[AI]);A[NB]=null,A[AI]=null}GU.exports={addSignal:lX,removeSignal:iX}});var MU=L((rz,lD)=>{var nX=NU(),{InvalidArgumentError:BI,RequestAbortedError:oX}=d(),jQ=f(),{getResolveErrorBodyCallback:aX}=pD(),{AsyncResource:sX}=G("async_hooks"),{addSignal:rX,removeSignal:RU}=QI();class dD extends sX{constructor(A,Q){if(!A||typeof A!=="object")throw new BI("invalid opts");let{signal:B,method:I,opaque:E,body:C,onInfo:g,responseHeaders:D,throwOnError:F,highWaterMark:Y}=A;try{if(typeof Q!=="function")throw new BI("invalid callback");if(Y&&(typeof Y!=="number"||Y<0))throw new BI("invalid highWaterMark");if(B&&typeof B.on!=="function"&&typeof B.addEventListener!=="function")throw new BI("signal must be an EventEmitter or EventTarget");if(I==="CONNECT")throw new BI("invalid method");if(g&&typeof g!=="function")throw new BI("invalid onInfo callback");super("UNDICI_REQUEST")}catch(N){if(jQ.isStream(C))jQ.destroy(C.on("error",jQ.nop),N);throw N}if(this.responseHeaders=D||null,this.opaque=E||null,this.callback=Q,this.res=null,this.abort=null,this.body=C,this.trailers={},this.context=null,this.onInfo=g||null,this.throwOnError=F,this.highWaterMark=Y,jQ.isStream(C))C.on("error",(N)=>{this.onError(N)});rX(this,B)}onConnect(A,Q){if(!this.callback)throw new oX;this.abort=A,this.context=Q}onHeaders(A,Q,B,I){let{callback:E,opaque:C,abort:g,context:D,responseHeaders:F,highWaterMark:Y}=this,N=F==="raw"?jQ.parseRawHeaders(Q):jQ.parseHeaders(Q);if(A<200){if(this.onInfo)this.onInfo({statusCode:A,headers:N});return}let U=(F==="raw"?jQ.parseHeaders(Q):N)["content-type"],R=new nX({resume:B,abort:g,contentType:U,highWaterMark:Y});if(this.callback=null,this.res=R,E!==null)if(this.throwOnError&&A>=400)this.runInAsyncScope(aX,null,{callback:E,body:R,contentType:U,statusCode:A,statusMessage:I,headers:N});else this.runInAsyncScope(E,null,null,{statusCode:A,headers:N,trailers:this.trailers,opaque:C,body:R,context:D})}onData(A){let{res:Q}=this;return Q.push(A)}onComplete(A){let{res:Q}=this;RU(this),jQ.parseHeaders(A,this.trailers),Q.push(null)}onError(A){let{res:Q,callback:B,body:I,opaque:E}=this;if(RU(this),B)this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(B,null,A,{opaque:E})});if(Q)this.res=null,queueMicrotask(()=>{jQ.destroy(Q,A)});if(I)this.body=null,jQ.destroy(I,A)}}function wU(A,Q){if(Q===void 0)return new Promise((B,I)=>{wU.call(this,A,(E,C)=>{return E?I(E):B(C)})});try{this.dispatch(A,new dD(A,Q))}catch(B){if(typeof Q!=="function")throw B;let I=A&&A.opaque;queueMicrotask(()=>Q(B,{opaque:I}))}}lD.exports=wU;lD.exports.RequestHandler=dD});var XU=L((tz,ZU)=>{var{finished:tX,PassThrough:eX}=G("stream"),{InvalidArgumentError:II,InvalidReturnValueError:A9,RequestAbortedError:Q9}=d(),VQ=f(),{getResolveErrorBodyCallback:B9}=pD(),{AsyncResource:I9}=G("async_hooks"),{addSignal:E9,removeSignal:LU}=QI();class VU extends I9{constructor(A,Q,B){if(!A||typeof A!=="object")throw new II("invalid opts");let{signal:I,method:E,opaque:C,body:g,onInfo:D,responseHeaders:F,throwOnError:Y}=A;try{if(typeof B!=="function")throw new II("invalid callback");if(typeof Q!=="function")throw new II("invalid factory");if(I&&typeof I.on!=="function"&&typeof I.addEventListener!=="function")throw new II("signal must be an EventEmitter or EventTarget");if(E==="CONNECT")throw new II("invalid method");if(D&&typeof D!=="function")throw new II("invalid onInfo callback");super("UNDICI_STREAM")}catch(N){if(VQ.isStream(g))VQ.destroy(g.on("error",VQ.nop),N);throw N}if(this.responseHeaders=F||null,this.opaque=C||null,this.factory=Q,this.callback=B,this.res=null,this.abort=null,this.context=null,this.trailers=null,this.body=g,this.onInfo=D||null,this.throwOnError=Y||!1,VQ.isStream(g))g.on("error",(N)=>{this.onError(N)});E9(this,I)}onConnect(A,Q){if(!this.callback)throw new Q9;this.abort=A,this.context=Q}onHeaders(A,Q,B,I){let{factory:E,opaque:C,context:g,callback:D,responseHeaders:F}=this,Y=F==="raw"?VQ.parseRawHeaders(Q):VQ.parseHeaders(Q);if(A<200){if(this.onInfo)this.onInfo({statusCode:A,headers:Y});return}this.factory=null;let N;if(this.throwOnError&&A>=400){let R=(F==="raw"?VQ.parseHeaders(Q):Y)["content-type"];N=new eX,this.callback=null,this.runInAsyncScope(B9,null,{callback:D,body:N,contentType:R,statusCode:A,statusMessage:I,headers:Y})}else{if(E===null)return;if(N=this.runInAsyncScope(E,null,{statusCode:A,headers:Y,opaque:C,context:g}),!N||typeof N.write!=="function"||typeof N.end!=="function"||typeof N.on!=="function")throw new A9("expected Writable");tX(N,{readable:!1},(U)=>{let{callback:R,res:w,opaque:M,trailers:V,abort:S}=this;if(this.res=null,U||!w.readable)VQ.destroy(w,U);if(this.callback=null,this.runInAsyncScope(R,null,U||null,{opaque:M,trailers:V}),U)S()})}return N.on("drain",B),this.res=N,(N.writableNeedDrain!==void 0?N.writableNeedDrain:N._writableState&&N._writableState.needDrain)!==!0}onData(A){let{res:Q}=this;return Q?Q.write(A):!0}onComplete(A){let{res:Q}=this;if(LU(this),!Q)return;this.trailers=VQ.parseHeaders(A),Q.end()}onError(A){let{res:Q,callback:B,opaque:I,body:E}=this;if(LU(this),this.factory=null,Q)this.res=null,VQ.destroy(Q,A);else if(B)this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(B,null,A,{opaque:I})});if(E)this.body=null,VQ.destroy(E,A)}}function WU(A,Q,B){if(B===void 0)return new Promise((I,E)=>{WU.call(this,A,Q,(C,g)=>{return C?E(C):I(g)})});try{this.dispatch(A,new VU(A,Q,B))}catch(I){if(typeof B!=="function")throw I;let E=A&&A.opaque;queueMicrotask(()=>B(I,{opaque:E}))}}ZU.exports=WU});var hU=L((ez,xU)=>{var{Readable:SU,Duplex:C9,PassThrough:g9}=G("stream"),{InvalidArgumentError:sI,InvalidReturnValueError:D9,RequestAbortedError:gC}=d(),NQ=f(),{AsyncResource:F9}=G("async_hooks"),{addSignal:N9,removeSignal:Y9}=QI(),J9=G("assert"),EI=Symbol("resume");class KU extends SU{constructor(){super({autoDestroy:!0});this[EI]=null}_read(){let{[EI]:A}=this;if(A)this[EI]=null,A()}_destroy(A,Q){this._read(),Q(A)}}class zU extends SU{constructor(A){super({autoDestroy:!0});this[EI]=A}_read(){this[EI]()}_destroy(A,Q){if(!A&&!this._readableState.endEmitted)A=new gC;Q(A)}}class HU extends F9{constructor(A,Q){if(!A||typeof A!=="object")throw new sI("invalid opts");if(typeof Q!=="function")throw new sI("invalid handler");let{signal:B,method:I,opaque:E,onInfo:C,responseHeaders:g}=A;if(B&&typeof B.on!=="function"&&typeof B.addEventListener!=="function")throw new sI("signal must be an EventEmitter or EventTarget");if(I==="CONNECT")throw new sI("invalid method");if(C&&typeof C!=="function")throw new sI("invalid onInfo callback");super("UNDICI_PIPELINE");this.opaque=E||null,this.responseHeaders=g||null,this.handler=Q,this.abort=null,this.context=null,this.onInfo=C||null,this.req=new KU().on("error",NQ.nop),this.ret=new C9({readableObjectMode:A.objectMode,autoDestroy:!0,read:()=>{let{body:D}=this;if(D&&D.resume)D.resume()},write:(D,F,Y)=>{let{req:N}=this;if(N.push(D,F)||N._readableState.destroyed)Y();else N[EI]=Y},destroy:(D,F)=>{let{body:Y,req:N,res:J,ret:U,abort:R}=this;if(!D&&!U._readableState.endEmitted)D=new gC;if(R&&D)R();NQ.destroy(Y,D),NQ.destroy(N,D),NQ.destroy(J,D),Y9(this),F(D)}}).on("prefinish",()=>{let{req:D}=this;D.push(null)}),this.res=null,N9(this,B)}onConnect(A,Q){let{ret:B,res:I}=this;if(J9(!I,"pipeline cannot be retried"),B.destroyed)throw new gC;this.abort=A,this.context=Q}onHeaders(A,Q,B){let{opaque:I,handler:E,context:C}=this;if(A<200){if(this.onInfo){let D=this.responseHeaders==="raw"?NQ.parseRawHeaders(Q):NQ.parseHeaders(Q);this.onInfo({statusCode:A,headers:D})}return}this.res=new zU(B);let g;try{this.handler=null;let D=this.responseHeaders==="raw"?NQ.parseRawHeaders(Q):NQ.parseHeaders(Q);g=this.runInAsyncScope(E,null,{statusCode:A,headers:D,opaque:I,body:this.res,context:C})}catch(D){throw this.res.on("error",NQ.nop),D}if(!g||typeof g.on!=="function")throw new D9("expected Readable");g.on("data",(D)=>{let{ret:F,body:Y}=this;if(!F.push(D)&&Y.pause)Y.pause()}).on("error",(D)=>{let{ret:F}=this;NQ.destroy(F,D)}).on("end",()=>{let{ret:D}=this;D.push(null)}).on("close",()=>{let{ret:D}=this;if(!D._readableState.ended)NQ.destroy(D,new gC)}),this.body=g}onData(A){let{res:Q}=this;return Q.push(A)}onComplete(A){let{res:Q}=this;Q.push(null)}onError(A){let{ret:Q}=this;this.handler=null,NQ.destroy(Q,A)}}function U9(A,Q){try{let B=new HU(A,Q);return this.dispatch({...A,body:B.req},B),B.ret}catch(B){return new g9().destroy(B)}}xU.exports=U9});var OU=L((AH,qU)=>{var{InvalidArgumentError:iD,RequestAbortedError:G9,SocketError:R9}=d(),{AsyncResource:w9}=G("async_hooks"),TU=f(),{addSignal:M9,removeSignal:jU}=QI(),L9=G("assert");class $U extends w9{constructor(A,Q){if(!A||typeof A!=="object")throw new iD("invalid opts");if(typeof Q!=="function")throw new iD("invalid callback");let{signal:B,opaque:I,responseHeaders:E}=A;if(B&&typeof B.on!=="function"&&typeof B.addEventListener!=="function")throw new iD("signal must be an EventEmitter or EventTarget");super("UNDICI_UPGRADE");this.responseHeaders=E||null,this.opaque=I||null,this.callback=Q,this.abort=null,this.context=null,M9(this,B)}onConnect(A,Q){if(!this.callback)throw new G9;this.abort=A,this.context=null}onHeaders(){throw new R9("bad upgrade",null)}onUpgrade(A,Q,B){let{callback:I,opaque:E,context:C}=this;L9.strictEqual(A,101),jU(this),this.callback=null;let g=this.responseHeaders==="raw"?TU.parseRawHeaders(Q):TU.parseHeaders(Q);this.runInAsyncScope(I,null,null,{headers:g,socket:B,opaque:E,context:C})}onError(A){let{callback:Q,opaque:B}=this;if(jU(this),Q)this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(Q,null,A,{opaque:B})})}}function yU(A,Q){if(Q===void 0)return new Promise((B,I)=>{yU.call(this,A,(E,C)=>{return E?I(E):B(C)})});try{let B=new $U(A,Q);this.dispatch({...A,method:A.method||"GET",upgrade:A.protocol||"Websocket"},B)}catch(B){if(typeof Q!=="function")throw B;let I=A&&A.opaque;queueMicrotask(()=>Q(B,{opaque:I}))}}qU.exports=yU});var bU=L((QH,vU)=>{var{AsyncResource:V9}=G("async_hooks"),{InvalidArgumentError:nD,RequestAbortedError:W9,SocketError:Z9}=d(),PU=f(),{addSignal:X9,removeSignal:kU}=QI();class _U extends V9{constructor(A,Q){if(!A||typeof A!=="object")throw new nD("invalid opts");if(typeof Q!=="function")throw new nD("invalid callback");let{signal:B,opaque:I,responseHeaders:E}=A;if(B&&typeof B.on!=="function"&&typeof B.addEventListener!=="function")throw new nD("signal must be an EventEmitter or EventTarget");super("UNDICI_CONNECT");this.opaque=I||null,this.responseHeaders=E||null,this.callback=Q,this.abort=null,X9(this,B)}onConnect(A,Q){if(!this.callback)throw new W9;this.abort=A,this.context=Q}onHeaders(){throw new Z9("bad connect",null)}onUpgrade(A,Q,B){let{callback:I,opaque:E,context:C}=this;kU(this),this.callback=null;let g=Q;if(g!=null)g=this.responseHeaders==="raw"?PU.parseRawHeaders(Q):PU.parseHeaders(Q);this.runInAsyncScope(I,null,null,{statusCode:A,headers:g,socket:B,opaque:E,context:C})}onError(A){let{callback:Q,opaque:B}=this;if(kU(this),Q)this.callback=null,queueMicrotask(()=>{this.runInAsyncScope(Q,null,A,{opaque:B})})}}function fU(A,Q){if(Q===void 0)return new Promise((B,I)=>{fU.call(this,A,(E,C)=>{return E?I(E):B(C)})});try{let B=new _U(A,Q);this.dispatch({...A,method:"CONNECT"},B)}catch(B){if(typeof Q!=="function")throw B;let I=A&&A.opaque;queueMicrotask(()=>Q(B,{opaque:I}))}}vU.exports=fU});var mU=L((S9,CI)=>{S9.request=MU();S9.stream=XU();S9.pipeline=hU();S9.upgrade=OU();S9.connect=bU()});var aD=L((BH,cU)=>{var{UndiciError:T9}=d();class oD extends T9{constructor(A){super(A);Error.captureStackTrace(this,oD),this.name="MockNotMatchedError",this.message=A||"The request does not match any registered mock dispatches",this.code="UND_MOCK_ERR_MOCK_NOT_MATCHED"}}cU.exports={MockNotMatchedError:oD}});var gI=L((IH,uU)=>{uU.exports={kAgent:Symbol("agent"),kOptions:Symbol("options"),kFactory:Symbol("factory"),kDispatches:Symbol("dispatches"),kDispatchKey:Symbol("dispatch key"),kDefaultHeaders:Symbol("default headers"),kDefaultTrailers:Symbol("default trailers"),kContentLength:Symbol("content length"),kMockAgent:Symbol("mock agent"),kMockAgentSet:Symbol("mock agent set"),kMockAgentGet:Symbol("mock agent get"),kMockDispatch:Symbol("mock dispatch"),kClose:Symbol("close"),kOriginalClose:Symbol("original agent close"),kOrigin:Symbol("origin"),kIsMockActive:Symbol("is mock active"),kNetConnect:Symbol("net connect"),kGetNetConnect:Symbol("get net connect"),kConnected:Symbol("connected")}});var rI=L((EH,AG)=>{var{MockNotMatchedError:xB}=aD(),{kDispatches:DC,kMockAgent:j9,kOriginalDispatch:$9,kOrigin:y9,kGetNetConnect:q9}=gI(),{buildURL:O9,nop:P9}=f(),{STATUS_CODES:k9}=G("http"),{types:{isPromise:_9}}=G("util");function oQ(A,Q){if(typeof A==="string")return A===Q;if(A instanceof RegExp)return A.test(Q);if(typeof A==="function")return A(Q)===!0;return!1}function dU(A){return Object.fromEntries(Object.entries(A).map(([Q,B])=>{return[Q.toLocaleLowerCase(),B]}))}function lU(A,Q){if(Array.isArray(A)){for(let B=0;B<A.length;B+=2)if(A[B].toLocaleLowerCase()===Q.toLocaleLowerCase())return A[B+1];return}else if(typeof A.get==="function")return A.get(Q);else return dU(A)[Q.toLocaleLowerCase()]}function iU(A){let Q=A.slice(),B=[];for(let I=0;I<Q.length;I+=2)B.push([Q[I],Q[I+1]]);return Object.fromEntries(B)}function nU(A,Q){if(typeof A.headers==="function"){if(Array.isArray(Q))Q=iU(Q);return A.headers(Q?dU(Q):{})}if(typeof A.headers==="undefined")return!0;if(typeof Q!=="object"||typeof A.headers!=="object")return!1;for(let[B,I]of Object.entries(A.headers)){let E=lU(Q,B);if(!oQ(I,E))return!1}return!0}function pU(A){if(typeof A!=="string")return A;let Q=A.split("?");if(Q.length!==2)return A;let B=new URLSearchParams(Q.pop());return B.sort(),[...Q,B.toString()].join("?")}function f9(A,{path:Q,method:B,body:I,headers:E}){let C=oQ(A.path,Q),g=oQ(A.method,B),D=typeof A.body!=="undefined"?oQ(A.body,I):!0,F=nU(A,E);return C&&g&&D&&F}function oU(A){if(Buffer.isBuffer(A))return A;else if(typeof A==="object")return JSON.stringify(A);else return A.toString()}function aU(A,Q){let B=Q.query?O9(Q.path,Q.query):Q.path,I=typeof B==="string"?pU(B):B,E=A.filter(({consumed:C})=>!C).filter(({path:C})=>oQ(pU(C),I));if(E.length===0)throw new xB(`Mock dispatch not matched for path '${I}'`);if(E=E.filter(({method:C})=>oQ(C,Q.method)),E.length===0)throw new xB(`Mock dispatch not matched for method '${Q.method}'`);if(E=E.filter(({body:C})=>typeof C!=="undefined"?oQ(C,Q.body):!0),E.length===0)throw new xB(`Mock dispatch not matched for body '${Q.body}'`);if(E=E.filter((C)=>nU(C,Q.headers)),E.length===0)throw new xB(`Mock dispatch not matched for headers '${typeof Q.headers==="object"?JSON.stringify(Q.headers):Q.headers}'`);return E[0]}function v9(A,Q,B){let I={timesInvoked:0,times:1,persist:!1,consumed:!1},E=typeof B==="function"?{callback:B}:{...B},C={...I,...Q,pending:!0,data:{error:null,...E}};return A.push(C),C}function sD(A,Q){let B=A.findIndex((I)=>{if(!I.consumed)return!1;return f9(I,Q)});if(B!==-1)A.splice(B,1)}function sU(A){let{path:Q,method:B,body:I,headers:E,query:C}=A;return{path:Q,method:B,body:I,headers:E,query:C}}function rD(A){return Object.entries(A).reduce((Q,[B,I])=>[...Q,Buffer.from(`${B}`),Array.isArray(I)?I.map((E)=>Buffer.from(`${E}`)):Buffer.from(`${I}`)],[])}function rU(A){return k9[A]||"unknown"}async function b9(A){let Q=[];for await(let B of A)Q.push(B);return Buffer.concat(Q).toString("utf8")}function tU(A,Q){let B=sU(A),I=aU(this[DC],B);if(I.timesInvoked++,I.data.callback)I.data={...I.data,...I.data.callback(A)};let{data:{statusCode:E,data:C,headers:g,trailers:D,error:F},delay:Y,persist:N}=I,{timesInvoked:J,times:U}=I;if(I.consumed=!N&&J>=U,I.pending=J<U,F!==null)return sD(this[DC],B),Q.onError(F),!0;if(typeof Y==="number"&&Y>0)setTimeout(()=>{R(this[DC])},Y);else R(this[DC]);function R(M,V=C){let S=Array.isArray(A.headers)?iU(A.headers):A.headers,z=typeof V==="function"?V({...A,headers:S}):V;if(_9(z)){z.then((GA)=>R(M,GA));return}let $=oU(z),P=rD(g),iA=rD(D);Q.abort=P9,Q.onHeaders(E,P,w,rU(E)),Q.onData(Buffer.from($)),Q.onComplete(iA),sD(M,B)}function w(){}return!0}function m9(){let A=this[j9],Q=this[y9],B=this[$9];return function I(E,C){if(A.isMockActive)try{tU.call(this,E,C)}catch(g){if(g instanceof xB){let D=A[q9]();if(D===!1)throw new xB(`${g.message}: subsequent request to origin ${Q} was not allowed (net.connect disabled)`);if(eU(D,Q))B.call(this,E,C);else throw new xB(`${g.message}: subsequent request to origin ${Q} was not allowed (net.connect is not enabled for this origin)`)}else throw g}else B.call(this,E,C)}}function eU(A,Q){let B=new URL(Q);if(A===!0)return!0;else if(Array.isArray(A)&&A.some((I)=>oQ(I,B.host)))return!0;return!1}function c9(A){if(A){let{agent:Q,...B}=A;return B}}AG.exports={getResponseData:oU,getMockDispatch:aU,addMockDispatch:v9,deleteMockDispatch:sD,buildKey:sU,generateKeyValues:rD,matchValue:oQ,getResponse:b9,getStatusText:rU,mockDispatch:tU,buildMockDispatch:m9,checkNetConnect:eU,buildMockOptions:c9,getHeaderByName:lU}});var I0=L((l9,B0)=>{var{getResponseData:u9,buildKey:p9,addMockDispatch:tD}=rI(),{kDispatches:FC,kDispatchKey:NC,kDefaultHeaders:eD,kDefaultTrailers:A0,kContentLength:Q0,kMockDispatch:YC}=gI(),{InvalidArgumentError:WQ}=d(),{buildURL:d9}=f();class tI{constructor(A){this[YC]=A}delay(A){if(typeof A!=="number"||!Number.isInteger(A)||A<=0)throw new WQ("waitInMs must be a valid integer > 0");return this[YC].delay=A,this}persist(){return this[YC].persist=!0,this}times(A){if(typeof A!=="number"||!Number.isInteger(A)||A<=0)throw new WQ("repeatTimes must be a valid integer > 0");return this[YC].times=A,this}}class QG{constructor(A,Q){if(typeof A!=="object")throw new WQ("opts must be an object");if(typeof A.path==="undefined")throw new WQ("opts.path must be defined");if(typeof A.method==="undefined")A.method="GET";if(typeof A.path==="string")if(A.query)A.path=d9(A.path,A.query);else{let B=new URL(A.path,"data://");A.path=B.pathname+B.search}if(typeof A.method==="string")A.method=A.method.toUpperCase();this[NC]=p9(A),this[FC]=Q,this[eD]={},this[A0]={},this[Q0]=!1}createMockScopeDispatchData(A,Q,B={}){let I=u9(Q),E=this[Q0]?{"content-length":I.length}:{},C={...this[eD],...E,...B.headers},g={...this[A0],...B.trailers};return{statusCode:A,data:Q,headers:C,trailers:g}}validateReplyParameters(A,Q,B){if(typeof A==="undefined")throw new WQ("statusCode must be defined");if(typeof Q==="undefined")throw new WQ("data must be defined");if(typeof B!=="object")throw new WQ("responseOptions must be an object")}reply(A){if(typeof A==="function"){let g=(F)=>{let Y=A(F);if(typeof Y!=="object")throw new WQ("reply options callback must return an object");let{statusCode:N,data:J="",responseOptions:U={}}=Y;return this.validateReplyParameters(N,J,U),{...this.createMockScopeDispatchData(N,J,U)}},D=tD(this[FC],this[NC],g);return new tI(D)}let[Q,B="",I={}]=[...arguments];this.validateReplyParameters(Q,B,I);let E=this.createMockScopeDispatchData(Q,B,I),C=tD(this[FC],this[NC],E);return new tI(C)}replyWithError(A){if(typeof A==="undefined")throw new WQ("error must be defined");let Q=tD(this[FC],this[NC],{error:A});return new tI(Q)}defaultReplyHeaders(A){if(typeof A==="undefined")throw new WQ("headers must be defined");return this[eD]=A,this}defaultReplyTrailers(A){if(typeof A==="undefined")throw new WQ("trailers must be defined");return this[A0]=A,this}replyContentLength(){return this[Q0]=!0,this}}l9.MockInterceptor=QG;l9.MockScope=tI});var C0=L((CH,NG)=>{var{promisify:o9}=G("util"),a9=lI(),{buildMockDispatch:s9}=rI(),{kDispatches:BG,kMockAgent:IG,kClose:EG,kOriginalClose:CG,kOrigin:gG,kOriginalDispatch:r9,kConnected:E0}=gI(),{MockInterceptor:t9}=I0(),DG=o(),{InvalidArgumentError:e9}=d();class FG extends a9{constructor(A,Q){super(A,Q);if(!Q||!Q.agent||typeof Q.agent.dispatch!=="function")throw new e9("Argument opts.agent must implement Agent");this[IG]=Q.agent,this[gG]=A,this[BG]=[],this[E0]=1,this[r9]=this.dispatch,this[CG]=this.close.bind(this),this.dispatch=s9.call(this),this.close=this[EG]}get[DG.kConnected](){return this[E0]}intercept(A){return new t9(A,this[BG])}async[EG](){await o9(this[CG])(),this[E0]=0,this[IG][DG.kClients].delete(this[gG])}}NG.exports=FG});var D0=L((gH,LG)=>{var{promisify:AS}=G("util"),QS=eB(),{buildMockDispatch:BS}=rI(),{kDispatches:YG,kMockAgent:JG,kClose:UG,kOriginalClose:GG,kOrigin:RG,kOriginalDispatch:IS,kConnected:g0}=gI(),{MockInterceptor:ES}=I0(),wG=o(),{InvalidArgumentError:CS}=d();class MG extends QS{constructor(A,Q){super(A,Q);if(!Q||!Q.agent||typeof Q.agent.dispatch!=="function")throw new CS("Argument opts.agent must implement Agent");this[JG]=Q.agent,this[RG]=A,this[YG]=[],this[g0]=1,this[IS]=this.dispatch,this[GG]=this.close.bind(this),this.dispatch=BS.call(this),this.close=this[UG]}get[wG.kConnected](){return this[g0]}intercept(A){return new ES(A,this[YG])}async[UG](){await AS(this[GG])(),this[g0]=0,this[JG][wG.kClients].delete(this[RG])}}LG.exports=MG});var WG=L((DH,VG)=>{var gS={pronoun:"it",is:"is",was:"was",this:"this"},DS={pronoun:"they",is:"are",was:"were",this:"these"};VG.exports=class A{constructor(Q,B){this.singular=Q,this.plural=B}pluralize(Q){let B=Q===1,I=B?gS:DS,E=B?this.singular:this.plural;return{...I,count:Q,noun:E}}}});var XG=L((FH,ZG)=>{var{Transform:FS}=G("stream"),{Console:NS}=G("console");ZG.exports=class A{constructor({disableColors:Q}={}){this.transform=new FS({transform(B,I,E){E(null,B)}}),this.logger=new NS({stdout:this.transform,inspectOptions:{colors:!Q&&!process.env.CI}})}format(Q){let B=Q.map(({method:I,path:E,data:{statusCode:C},persist:g,times:D,timesInvoked:F,origin:Y})=>({Method:I,Origin:Y,Path:E,"Status code":C,Persistent:g?"✅":"❌",Invocations:F,Remaining:g?1/0:D-F}));return this.logger.table(B),this.transform.read().toString()}}});var hG=L((NH,xG)=>{var{kClients:hB}=o(),YS=aI(),{kAgent:F0,kMockAgentSet:JC,kMockAgentGet:SG,kDispatches:N0,kIsMockActive:UC,kNetConnect:TB,kGetNetConnect:JS,kOptions:GC,kFactory:RC}=gI(),US=C0(),GS=D0(),{matchValue:RS,buildMockOptions:wS}=rI(),{InvalidArgumentError:KG,UndiciError:MS}=d(),LS=bE(),VS=WG(),WS=XG();class zG{constructor(A){this.value=A}deref(){return this.value}}class HG extends LS{constructor(A){super(A);if(this[TB]=!0,this[UC]=!0,A&&A.agent&&typeof A.agent.dispatch!=="function")throw new KG("Argument opts.agent must implement Agent");let Q=A&&A.agent?A.agent:new YS(A);this[F0]=Q,this[hB]=Q[hB],this[GC]=wS(A)}get(A){let Q=this[SG](A);if(!Q)Q=this[RC](A),this[JC](A,Q);return Q}dispatch(A,Q){return this.get(A.origin),this[F0].dispatch(A,Q)}async close(){await this[F0].close(),this[hB].clear()}deactivate(){this[UC]=!1}activate(){this[UC]=!0}enableNetConnect(A){if(typeof A==="string"||typeof A==="function"||A instanceof RegExp)if(Array.isArray(this[TB]))this[TB].push(A);else this[TB]=[A];else if(typeof A==="undefined")this[TB]=!0;else throw new KG("Unsupported matcher. Must be one of String|Function|RegExp.")}disableNetConnect(){this[TB]=!1}get isMockActive(){return this[UC]}[JC](A,Q){this[hB].set(A,new zG(Q))}[RC](A){let Q=Object.assign({agent:this},this[GC]);return this[GC]&&this[GC].connections===1?new US(A,Q):new GS(A,Q)}[SG](A){let Q=this[hB].get(A);if(Q)return Q.deref();if(typeof A!=="string"){let B=this[RC]("http://localhost:9999");return this[JC](A,B),B}for(let[B,I]of Array.from(this[hB])){let E=I.deref();if(E&&typeof B!=="string"&&RS(B,A)){let C=this[RC](A);return this[JC](A,C),C[N0]=E[N0],C}}}[JS](){return this[TB]}pendingInterceptors(){let A=this[hB];return Array.from(A.entries()).flatMap(([Q,B])=>B.deref()[N0].map((I)=>({...I,origin:Q}))).filter(({pending:Q})=>Q)}assertNoPendingInterceptors({pendingInterceptorsFormatter:A=new WS}={}){let Q=this.pendingInterceptors();if(Q.length===0)return;let B=new VS("interceptor","interceptors").pluralize(Q.length);throw new MS(`
${B.count} ${B.noun} ${B.is} pending:

${A.format(Q)}
`.trim())}}xG.exports=HG});var PG=L((YH,OG)=>{var{kProxy:ZS,kClose:XS,kDestroy:SS,kInterceptors:KS}=o(),{URL:TG}=G("url"),jG=aI(),zS=eB(),HS=_I(),{InvalidArgumentError:QE,RequestAbortedError:xS}=d(),$G=fI(),eI=Symbol("proxy agent"),wC=Symbol("proxy client"),AE=Symbol("proxy headers"),Y0=Symbol("request tls settings"),hS=Symbol("proxy tls settings"),yG=Symbol("connect endpoint function");function TS(A){return A==="https:"?443:80}function jS(A){if(typeof A==="string")A={uri:A};if(!A||!A.uri)throw new QE("Proxy opts.uri is mandatory");return{uri:A.uri,protocol:A.protocol||"https"}}function $S(A,Q){return new zS(A,Q)}class qG extends HS{constructor(A){super(A);if(this[ZS]=jS(A),this[eI]=new jG(A),this[KS]=A.interceptors&&A.interceptors.ProxyAgent&&Array.isArray(A.interceptors.ProxyAgent)?A.interceptors.ProxyAgent:[],typeof A==="string")A={uri:A};if(!A||!A.uri)throw new QE("Proxy opts.uri is mandatory");let{clientFactory:Q=$S}=A;if(typeof Q!=="function")throw new QE("Proxy opts.clientFactory must be a function.");this[Y0]=A.requestTls,this[hS]=A.proxyTls,this[AE]=A.headers||{};let B=new TG(A.uri),{origin:I,port:E,host:C,username:g,password:D}=B;if(A.auth&&A.token)throw new QE("opts.auth cannot be used in combination with opts.token");else if(A.auth)this[AE]["proxy-authorization"]=`Basic ${A.auth}`;else if(A.token)this[AE]["proxy-authorization"]=A.token;else if(g&&D)this[AE]["proxy-authorization"]=`Basic ${Buffer.from(`${decodeURIComponent(g)}:${decodeURIComponent(D)}`).toString("base64")}`;let F=$G({...A.proxyTls});this[yG]=$G({...A.requestTls}),this[wC]=Q(B,{connect:F}),this[eI]=new jG({...A,connect:async(Y,N)=>{let J=Y.host;if(!Y.port)J+=`:${TS(Y.protocol)}`;try{let{socket:U,statusCode:R}=await this[wC].connect({origin:I,port:E,path:J,signal:Y.signal,headers:{...this[AE],host:C}});if(R!==200)U.on("error",()=>{}).destroy(),N(new xS(`Proxy response (${R}) !== 200 when HTTP Tunneling`));if(Y.protocol!=="https:"){N(null,U);return}let w;if(this[Y0])w=this[Y0].servername;else w=Y.servername;this[yG]({...Y,servername:w,httpSocket:U},N)}catch(U){N(U)}}})}dispatch(A,Q){let{host:B}=new TG(A.origin),I=yS(A.headers);return qS(I),this[eI].dispatch({...A,headers:{...I,host:B}},Q)}async[XS](){await this[eI].close(),await this[wC].close()}async[SS](){await this[eI].destroy(),await this[wC].destroy()}}function yS(A){if(Array.isArray(A)){let Q={};for(let B=0;B<A.length;B+=2)Q[A[B]]=A[B+1];return Q}return A}function qS(A){if(A&&Object.keys(A).find((B)=>B.toLowerCase()==="proxy-authorization"))throw new QE("Proxy-Authorization should be sent in ProxyAgent constructor")}OG.exports=qG});var bG=L((JH,vG)=>{var jB=G("assert"),{kRetryHandlerDefaultRetry:kG}=o(),{RequestRetryError:MC}=d(),{isDisturbed:_G,parseHeaders:OS,parseRangeHeader:fG}=f();function PS(A){let Q=Date.now();return new Date(A).getTime()-Q}class J0{constructor(A,Q){let{retryOptions:B,...I}=A,{retry:E,maxRetries:C,maxTimeout:g,minTimeout:D,timeoutFactor:F,methods:Y,errorCodes:N,retryAfter:J,statusCodes:U}=B??{};this.dispatch=Q.dispatch,this.handler=Q.handler,this.opts=I,this.abort=null,this.aborted=!1,this.retryOpts={retry:E??J0[kG],retryAfter:J??!0,maxTimeout:g??30000,timeout:D??500,timeoutFactor:F??2,maxRetries:C??5,methods:Y??["GET","HEAD","OPTIONS","PUT","DELETE","TRACE"],statusCodes:U??[500,502,503,504,429],errorCodes:N??["ECONNRESET","ECONNREFUSED","ENOTFOUND","ENETDOWN","ENETUNREACH","EHOSTDOWN","EHOSTUNREACH","EPIPE"]},this.retryCount=0,this.start=0,this.end=null,this.etag=null,this.resume=null,this.handler.onConnect((R)=>{if(this.aborted=!0,this.abort)this.abort(R);else this.reason=R})}onRequestSent(){if(this.handler.onRequestSent)this.handler.onRequestSent()}onUpgrade(A,Q,B){if(this.handler.onUpgrade)this.handler.onUpgrade(A,Q,B)}onConnect(A){if(this.aborted)A(this.reason);else this.abort=A}onBodySent(A){if(this.handler.onBodySent)return this.handler.onBodySent(A)}static[kG](A,{state:Q,opts:B},I){let{statusCode:E,code:C,headers:g}=A,{method:D,retryOptions:F}=B,{maxRetries:Y,timeout:N,maxTimeout:J,timeoutFactor:U,statusCodes:R,errorCodes:w,methods:M}=F,{counter:V,currentTimeout:S}=Q;if(S=S!=null&&S>0?S:N,C&&C!=="UND_ERR_REQ_RETRY"&&C!=="UND_ERR_SOCKET"&&!w.includes(C)){I(A);return}if(Array.isArray(M)&&!M.includes(D)){I(A);return}if(E!=null&&Array.isArray(R)&&!R.includes(E)){I(A);return}if(V>Y){I(A);return}let z=g!=null&&g["retry-after"];if(z)z=Number(z),z=isNaN(z)?PS(z):z*1000;let $=z>0?Math.min(z,J):Math.min(S*U**V,J);Q.currentTimeout=$,setTimeout(()=>I(null),$)}onHeaders(A,Q,B,I){let E=OS(Q);if(this.retryCount+=1,A>=300)return this.abort(new MC("Request failed",A,{headers:E,count:this.retryCount})),!1;if(this.resume!=null){if(this.resume=null,A!==206)return!0;let g=fG(E["content-range"]);if(!g)return this.abort(new MC("Content-Range mismatch",A,{headers:E,count:this.retryCount})),!1;if(this.etag!=null&&this.etag!==E.etag)return this.abort(new MC("ETag mismatch",A,{headers:E,count:this.retryCount})),!1;let{start:D,size:F,end:Y=F}=g;return jB(this.start===D,"content-range mismatch"),jB(this.end==null||this.end===Y,"content-range mismatch"),this.resume=B,!0}if(this.end==null){if(A===206){let g=fG(E["content-range"]);if(g==null)return this.handler.onHeaders(A,Q,B,I);let{start:D,size:F,end:Y=F}=g;jB(D!=null&&Number.isFinite(D)&&this.start!==D,"content-range mismatch"),jB(Number.isFinite(D)),jB(Y!=null&&Number.isFinite(Y)&&this.end!==Y,"invalid content-length"),this.start=D,this.end=Y}if(this.end==null){let g=E["content-length"];this.end=g!=null?Number(g):null}return jB(Number.isFinite(this.start)),jB(this.end==null||Number.isFinite(this.end),"invalid content-length"),this.resume=B,this.etag=E.etag!=null?E.etag:null,this.handler.onHeaders(A,Q,B,I)}let C=new MC("Request failed",A,{headers:E,count:this.retryCount});return this.abort(C),!1}onData(A){return this.start+=A.length,this.handler.onData(A)}onComplete(A){return this.retryCount=0,this.handler.onComplete(A)}onError(A){if(this.aborted||_G(this.opts.body))return this.handler.onError(A);this.retryOpts.retry(A,{state:{counter:this.retryCount++,currentTimeout:this.retryAfter},opts:{retryOptions:this.retryOpts,...this.opts}},Q.bind(this));function Q(B){if(B!=null||this.aborted||_G(this.opts.body))return this.handler.onError(B);if(this.start!==0)this.opts={...this.opts,headers:{...this.opts.headers,range:`bytes=${this.start}-${this.end??""}`}};try{this.dispatch(this.opts,this)}catch(I){this.handler.onError(I)}}}}vG.exports=J0});var DI=L((UH,pG)=>{var mG=Symbol.for("undici.globalDispatcher.1"),{InvalidArgumentError:kS}=d(),_S=aI();if(uG()===void 0)cG(new _S);function cG(A){if(!A||typeof A.dispatch!=="function")throw new kS("Argument agent must implement Agent");Object.defineProperty(globalThis,mG,{value:A,writable:!0,enumerable:!1,configurable:!1})}function uG(){return globalThis[mG]}pG.exports={setGlobalDispatcher:cG,getGlobalDispatcher:uG}});var lG=L((GH,dG)=>{dG.exports=class A{constructor(Q){this.handler=Q}onConnect(...Q){return this.handler.onConnect(...Q)}onError(...Q){return this.handler.onError(...Q)}onUpgrade(...Q){return this.handler.onUpgrade(...Q)}onHeaders(...Q){return this.handler.onHeaders(...Q)}onData(...Q){return this.handler.onData(...Q)}onComplete(...Q){return this.handler.onComplete(...Q)}onBodySent(...Q){return this.handler.onBodySent(...Q)}}});var $B=L((RH,sG)=>{var{kHeadersList:bA,kConstruct:fS}=o(),{kGuard:yQ}=mQ(),{kEnumerableProperty:$Q}=f(),{makeIterator:FI,isValidHeaderName:BE,isValidHeaderValue:nG}=DQ(),{webidl:O}=HA(),vS=G("assert"),vA=Symbol("headers map"),WA=Symbol("headers map sorted");function iG(A){return A===10||A===13||A===9||A===32}function oG(A){let Q=0,B=A.length;while(B>Q&&iG(A.charCodeAt(B-1)))--B;while(B>Q&&iG(A.charCodeAt(Q)))++Q;return Q===0&&B===A.length?A:A.substring(Q,B)}function aG(A,Q){if(Array.isArray(Q))for(let B=0;B<Q.length;++B){let I=Q[B];if(I.length!==2)throw O.errors.exception({header:"Headers constructor",message:`expected name/value pair to be length 2, found ${I.length}.`});U0(A,I[0],I[1])}else if(typeof Q==="object"&&Q!==null){let B=Object.keys(Q);for(let I=0;I<B.length;++I)U0(A,B[I],Q[B[I]])}else throw O.errors.conversionFailed({prefix:"Headers constructor",argument:"Argument 1",types:["sequence<sequence<ByteString>>","record<ByteString, ByteString>"]})}function U0(A,Q,B){if(B=oG(B),!BE(Q))throw O.errors.invalidArgument({prefix:"Headers.append",value:Q,type:"header name"});else if(!nG(B))throw O.errors.invalidArgument({prefix:"Headers.append",value:B,type:"header value"});if(A[yQ]==="immutable")throw new TypeError("immutable");else if(A[yQ]==="request-no-cors");return A[bA].append(Q,B)}class LC{cookies=null;constructor(A){if(A instanceof LC)this[vA]=new Map(A[vA]),this[WA]=A[WA],this.cookies=A.cookies===null?null:[...A.cookies];else this[vA]=new Map(A),this[WA]=null}contains(A){return A=A.toLowerCase(),this[vA].has(A)}clear(){this[vA].clear(),this[WA]=null,this.cookies=null}append(A,Q){this[WA]=null;let B=A.toLowerCase(),I=this[vA].get(B);if(I){let E=B==="cookie"?"; ":", ";this[vA].set(B,{name:I.name,value:`${I.value}${E}${Q}`})}else this[vA].set(B,{name:A,value:Q});if(B==="set-cookie")this.cookies??=[],this.cookies.push(Q)}set(A,Q){this[WA]=null;let B=A.toLowerCase();if(B==="set-cookie")this.cookies=[Q];this[vA].set(B,{name:A,value:Q})}delete(A){if(this[WA]=null,A=A.toLowerCase(),A==="set-cookie")this.cookies=null;this[vA].delete(A)}get(A){let Q=this[vA].get(A.toLowerCase());return Q===void 0?null:Q.value}*[Symbol.iterator](){for(let[A,{value:Q}]of this[vA])yield[A,Q]}get entries(){let A={};if(this[vA].size)for(let{name:Q,value:B}of this[vA].values())A[Q]=B;return A}}class SA{constructor(A=void 0){if(A===fS)return;if(this[bA]=new LC,this[yQ]="none",A!==void 0)A=O.converters.HeadersInit(A),aG(this,A)}append(A,Q){return O.brandCheck(this,SA),O.argumentLengthCheck(arguments,2,{header:"Headers.append"}),A=O.converters.ByteString(A),Q=O.converters.ByteString(Q),U0(this,A,Q)}delete(A){if(O.brandCheck(this,SA),O.argumentLengthCheck(arguments,1,{header:"Headers.delete"}),A=O.converters.ByteString(A),!BE(A))throw O.errors.invalidArgument({prefix:"Headers.delete",value:A,type:"header name"});if(this[yQ]==="immutable")throw new TypeError("immutable");else if(this[yQ]==="request-no-cors");if(!this[bA].contains(A))return;this[bA].delete(A)}get(A){if(O.brandCheck(this,SA),O.argumentLengthCheck(arguments,1,{header:"Headers.get"}),A=O.converters.ByteString(A),!BE(A))throw O.errors.invalidArgument({prefix:"Headers.get",value:A,type:"header name"});return this[bA].get(A)}has(A){if(O.brandCheck(this,SA),O.argumentLengthCheck(arguments,1,{header:"Headers.has"}),A=O.converters.ByteString(A),!BE(A))throw O.errors.invalidArgument({prefix:"Headers.has",value:A,type:"header name"});return this[bA].contains(A)}set(A,Q){if(O.brandCheck(this,SA),O.argumentLengthCheck(arguments,2,{header:"Headers.set"}),A=O.converters.ByteString(A),Q=O.converters.ByteString(Q),Q=oG(Q),!BE(A))throw O.errors.invalidArgument({prefix:"Headers.set",value:A,type:"header name"});else if(!nG(Q))throw O.errors.invalidArgument({prefix:"Headers.set",value:Q,type:"header value"});if(this[yQ]==="immutable")throw new TypeError("immutable");else if(this[yQ]==="request-no-cors");this[bA].set(A,Q)}getSetCookie(){O.brandCheck(this,SA);let A=this[bA].cookies;if(A)return[...A];return[]}get[WA](){if(this[bA][WA])return this[bA][WA];let A=[],Q=[...this[bA]].sort((I,E)=>I[0]<E[0]?-1:1),B=this[bA].cookies;for(let I=0;I<Q.length;++I){let[E,C]=Q[I];if(E==="set-cookie")for(let g=0;g<B.length;++g)A.push([E,B[g]]);else vS(C!==null),A.push([E,C])}return this[bA][WA]=A,A}keys(){if(O.brandCheck(this,SA),this[yQ]==="immutable"){let A=this[WA];return FI(()=>A,"Headers","key")}return FI(()=>[...this[WA].values()],"Headers","key")}values(){if(O.brandCheck(this,SA),this[yQ]==="immutable"){let A=this[WA];return FI(()=>A,"Headers","value")}return FI(()=>[...this[WA].values()],"Headers","value")}entries(){if(O.brandCheck(this,SA),this[yQ]==="immutable"){let A=this[WA];return FI(()=>A,"Headers","key+value")}return FI(()=>[...this[WA].values()],"Headers","key+value")}forEach(A,Q=globalThis){if(O.brandCheck(this,SA),O.argumentLengthCheck(arguments,1,{header:"Headers.forEach"}),typeof A!=="function")throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");for(let[B,I]of this)A.apply(Q,[I,B,this])}[Symbol.for("nodejs.util.inspect.custom")](){return O.brandCheck(this,SA),this[bA]}}SA.prototype[Symbol.iterator]=SA.prototype.entries;Object.defineProperties(SA.prototype,{append:$Q,delete:$Q,get:$Q,has:$Q,set:$Q,getSetCookie:$Q,keys:$Q,values:$Q,entries:$Q,forEach:$Q,[Symbol.iterator]:{enumerable:!1},[Symbol.toStringTag]:{value:"Headers",configurable:!0}});O.converters.HeadersInit=function(A){if(O.util.Type(A)==="Object"){if(A[Symbol.iterator])return O.converters["sequence<sequence<ByteString>>"](A);return O.converters["record<ByteString, ByteString>"](A)}throw O.errors.conversionFailed({prefix:"Headers constructor",argument:"Argument 1",types:["sequence<sequence<ByteString>>","record<ByteString, ByteString>"]})};sG.exports={fill:aG,Headers:SA,HeadersList:LC}});var XC=L((wH,ER)=>{var{Headers:bS,HeadersList:rG,fill:mS}=$B(),{extractBody:tG,cloneBody:cS,mixinBody:uS}=OI(),w0=f(),{kEnumerableProperty:BQ}=w0,{isValidReasonPhrase:pS,isCancelled:dS,isAborted:lS,isBlobLike:iS,serializeJavascriptValueToJSONString:nS,isErrorLike:oS,isomorphicEncode:aS}=DQ(),{redirectStatusSet:sS,nullBodyStatus:rS,DOMException:eG}=BB(),{kState:AA,kHeaders:wA,kGuard:NI,kRealm:QQ}=mQ(),{webidl:q}=HA(),{FormData:tS}=kE(),{getGlobalOrigin:eS}=cB(),{URLSerializer:AR}=MQ(),{kHeadersList:G0,kConstruct:A4}=o(),M0=G("assert"),{types:R0}=G("util"),BR=globalThis.ReadableStream||G("stream/web").ReadableStream,Q4=new TextEncoder("utf-8");class UA{static error(){let A={settingsObject:{}},Q=new UA;return Q[AA]=WC(),Q[QQ]=A,Q[wA][G0]=Q[AA].headersList,Q[wA][NI]="immutable",Q[wA][QQ]=A,Q}static json(A,Q={}){if(q.argumentLengthCheck(arguments,1,{header:"Response.json"}),Q!==null)Q=q.converters.ResponseInit(Q);let B=Q4.encode(nS(A)),I=tG(B),E={settingsObject:{}},C=new UA;return C[QQ]=E,C[wA][NI]="response",C[wA][QQ]=E,QR(C,Q,{body:I[0],type:"application/json"}),C}static redirect(A,Q=302){let B={settingsObject:{}};q.argumentLengthCheck(arguments,1,{header:"Response.redirect"}),A=q.converters.USVString(A),Q=q.converters["unsigned short"](Q);let I;try{I=new URL(A,eS())}catch(g){throw Object.assign(new TypeError("Failed to parse URL from "+A),{cause:g})}if(!sS.has(Q))throw new RangeError("Invalid status code "+Q);let E=new UA;E[QQ]=B,E[wA][NI]="immutable",E[wA][QQ]=B,E[AA].status=Q;let C=aS(AR(I));return E[AA].headersList.append("location",C),E}constructor(A=null,Q={}){if(A!==null)A=q.converters.BodyInit(A);Q=q.converters.ResponseInit(Q),this[QQ]={settingsObject:{}},this[AA]=ZC({}),this[wA]=new bS(A4),this[wA][NI]="response",this[wA][G0]=this[AA].headersList,this[wA][QQ]=this[QQ];let B=null;if(A!=null){let[I,E]=tG(A);B={body:I,type:E}}QR(this,Q,B)}get type(){return q.brandCheck(this,UA),this[AA].type}get url(){q.brandCheck(this,UA);let A=this[AA].urlList,Q=A[A.length-1]??null;if(Q===null)return"";return AR(Q,!0)}get redirected(){return q.brandCheck(this,UA),this[AA].urlList.length>1}get status(){return q.brandCheck(this,UA),this[AA].status}get ok(){return q.brandCheck(this,UA),this[AA].status>=200&&this[AA].status<=299}get statusText(){return q.brandCheck(this,UA),this[AA].statusText}get headers(){return q.brandCheck(this,UA),this[wA]}get body(){return q.brandCheck(this,UA),this[AA].body?this[AA].body.stream:null}get bodyUsed(){return q.brandCheck(this,UA),!!this[AA].body&&w0.isDisturbed(this[AA].body.stream)}clone(){if(q.brandCheck(this,UA),this.bodyUsed||this.body&&this.body.locked)throw q.errors.exception({header:"Response.clone",message:"Body has already been consumed."});let A=L0(this[AA]),Q=new UA;return Q[AA]=A,Q[QQ]=this[QQ],Q[wA][G0]=A.headersList,Q[wA][NI]=this[wA][NI],Q[wA][QQ]=this[wA][QQ],Q}}uS(UA);Object.defineProperties(UA.prototype,{type:BQ,url:BQ,status:BQ,ok:BQ,redirected:BQ,statusText:BQ,headers:BQ,clone:BQ,body:BQ,bodyUsed:BQ,[Symbol.toStringTag]:{value:"Response",configurable:!0}});Object.defineProperties(UA,{json:BQ,redirect:BQ,error:BQ});function L0(A){if(A.internalResponse)return IR(L0(A.internalResponse),A.type);let Q=ZC({...A,body:null});if(A.body!=null)Q.body=cS(A.body);return Q}function ZC(A){return{aborted:!1,rangeRequested:!1,timingAllowPassed:!1,requestIncludesCredentials:!1,type:"default",status:200,timingInfo:null,cacheState:"",statusText:"",...A,headersList:A.headersList?new rG(A.headersList):new rG,urlList:A.urlList?[...A.urlList]:[]}}function WC(A){let Q=oS(A);return ZC({type:"error",status:0,error:Q?A:new Error(A?String(A):A),aborted:A&&A.name==="AbortError"})}function VC(A,Q){return Q={internalResponse:A,...Q},new Proxy(A,{get(B,I){return I in Q?Q[I]:B[I]},set(B,I,E){return M0(!(I in Q)),B[I]=E,!0}})}function IR(A,Q){if(Q==="basic")return VC(A,{type:"basic",headersList:A.headersList});else if(Q==="cors")return VC(A,{type:"cors",headersList:A.headersList});else if(Q==="opaque")return VC(A,{type:"opaque",urlList:Object.freeze([]),status:0,statusText:"",body:null});else if(Q==="opaqueredirect")return VC(A,{type:"opaqueredirect",status:0,statusText:"",headersList:[],body:null});else M0(!1)}function B4(A,Q=null){return M0(dS(A)),lS(A)?WC(Object.assign(new eG("The operation was aborted.","AbortError"),{cause:Q})):WC(Object.assign(new eG("Request was cancelled."),{cause:Q}))}function QR(A,Q,B){if(Q.status!==null&&(Q.status<200||Q.status>599))throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');if("statusText"in Q&&Q.statusText!=null){if(!pS(String(Q.statusText)))throw new TypeError("Invalid statusText")}if("status"in Q&&Q.status!=null)A[AA].status=Q.status;if("statusText"in Q&&Q.statusText!=null)A[AA].statusText=Q.statusText;if("headers"in Q&&Q.headers!=null)mS(A[wA],Q.headers);if(B){if(rS.includes(A.status))throw q.errors.exception({header:"Response constructor",message:"Invalid response status code "+A.status});if(A[AA].body=B.body,B.type!=null&&!A[AA].headersList.contains("Content-Type"))A[AA].headersList.append("content-type",B.type)}}q.converters.ReadableStream=q.interfaceConverter(BR);q.converters.FormData=q.interfaceConverter(tS);q.converters.URLSearchParams=q.interfaceConverter(URLSearchParams);q.converters.XMLHttpRequestBodyInit=function(A){if(typeof A==="string")return q.converters.USVString(A);if(iS(A))return q.converters.Blob(A,{strict:!1});if(R0.isArrayBuffer(A)||R0.isTypedArray(A)||R0.isDataView(A))return q.converters.BufferSource(A);if(w0.isFormDataLike(A))return q.converters.FormData(A,{strict:!1});if(A instanceof URLSearchParams)return q.converters.URLSearchParams(A);return q.converters.DOMString(A)};q.converters.BodyInit=function(A){if(A instanceof BR)return q.converters.ReadableStream(A);if(A?.[Symbol.asyncIterator])return A;return q.converters.XMLHttpRequestBodyInit(A)};q.converters.ResponseInit=q.dictionaryConverter([{key:"status",converter:q.converters["unsigned short"],defaultValue:200},{key:"statusText",converter:q.converters.ByteString,defaultValue:""},{key:"headers",converter:q.converters.HeadersInit}]);ER.exports={makeNetworkError:WC,makeResponse:ZC,makeAppropriateNetworkError:B4,filterResponse:IR,Response:UA,cloneResponse:L0}});var CE=L((MH,YR)=>{var{extractBody:I4,mixinBody:E4,cloneBody:C4}=OI(),{Headers:CR,fill:g4,HeadersList:HC}=$B(),{FinalizationRegistry:D4}=bD()(),EE=f(),{isValidHTTPToken:F4,sameOrigin:gR,normalizeMethod:N4,makePolicyContainer:Y4,normalizeMethodRecord:J4}=DQ(),{forbiddenMethodsSet:U4,corsSafeListedMethodsSet:G4,referrerPolicy:R4,requestRedirect:w4,requestMode:M4,requestCredentials:L4,requestCache:V4,requestDuplex:W4}=BB(),{kEnumerableProperty:NA}=EE,{kHeaders:KA,kSignal:IE,kState:e,kGuard:SC,kRealm:IQ}=mQ(),{webidl:T}=HA(),{getGlobalOrigin:Z4}=cB(),{URLSerializer:X4}=MQ(),{kHeadersList:KC,kConstruct:zC}=o(),S4=G("assert"),{getMaxListeners:DR,setMaxListeners:FR,getEventListeners:K4,defaultMaxListeners:NR}=G("events"),V0=globalThis.TransformStream,z4=Symbol("abortController"),H4=new D4(({signal:A,abort:Q})=>{A.removeEventListener("abort",Q)});class l{constructor(A,Q={}){if(A===zC)return;T.argumentLengthCheck(arguments,1,{header:"Request constructor"}),A=T.converters.RequestInfo(A),Q=T.converters.RequestInit(Q),this[IQ]={settingsObject:{baseUrl:Z4(),get origin(){return this.baseUrl?.origin},policyContainer:Y4()}};let B=null,I=null,E=this[IQ].settingsObject.baseUrl,C=null;if(typeof A==="string"){let M;try{M=new URL(A,E)}catch(V){throw new TypeError("Failed to parse URL from "+A,{cause:V})}if(M.username||M.password)throw new TypeError("Request cannot be constructed from a URL that includes credentials: "+A);B=xC({urlList:[M]}),I="cors"}else S4(A instanceof l),B=A[e],C=A[IE];let g=this[IQ].settingsObject.origin,D="client";if(B.window?.constructor?.name==="EnvironmentSettingsObject"&&gR(B.window,g))D=B.window;if(Q.window!=null)throw new TypeError(`'window' option '${D}' must be null`);if("window"in Q)D="no-window";B=xC({method:B.method,headersList:B.headersList,unsafeRequest:B.unsafeRequest,client:this[IQ].settingsObject,window:D,priority:B.priority,origin:B.origin,referrer:B.referrer,referrerPolicy:B.referrerPolicy,mode:B.mode,credentials:B.credentials,cache:B.cache,redirect:B.redirect,integrity:B.integrity,keepalive:B.keepalive,reloadNavigation:B.reloadNavigation,historyNavigation:B.historyNavigation,urlList:[...B.urlList]});let F=Object.keys(Q).length!==0;if(F){if(B.mode==="navigate")B.mode="same-origin";B.reloadNavigation=!1,B.historyNavigation=!1,B.origin="client",B.referrer="client",B.referrerPolicy="",B.url=B.urlList[B.urlList.length-1],B.urlList=[B.url]}if(Q.referrer!==void 0){let M=Q.referrer;if(M==="")B.referrer="no-referrer";else{let V;try{V=new URL(M,E)}catch(S){throw new TypeError(`Referrer "${M}" is not a valid URL.`,{cause:S})}if(V.protocol==="about:"&&V.hostname==="client"||g&&!gR(V,this[IQ].settingsObject.baseUrl))B.referrer="client";else B.referrer=V}}if(Q.referrerPolicy!==void 0)B.referrerPolicy=Q.referrerPolicy;let Y;if(Q.mode!==void 0)Y=Q.mode;else Y=I;if(Y==="navigate")throw T.errors.exception({header:"Request constructor",message:"invalid request mode navigate."});if(Y!=null)B.mode=Y;if(Q.credentials!==void 0)B.credentials=Q.credentials;if(Q.cache!==void 0)B.cache=Q.cache;if(B.cache==="only-if-cached"&&B.mode!=="same-origin")throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");if(Q.redirect!==void 0)B.redirect=Q.redirect;if(Q.integrity!=null)B.integrity=String(Q.integrity);if(Q.keepalive!==void 0)B.keepalive=Boolean(Q.keepalive);if(Q.method!==void 0){let M=Q.method;if(!F4(M))throw new TypeError(`'${M}' is not a valid HTTP method.`);if(U4.has(M.toUpperCase()))throw new TypeError(`'${M}' HTTP method is unsupported.`);M=J4[M]??N4(M),B.method=M}if(Q.signal!==void 0)C=Q.signal;this[e]=B;let N=new AbortController;if(this[IE]=N.signal,this[IE][IQ]=this[IQ],C!=null){if(!C||typeof C.aborted!=="boolean"||typeof C.addEventListener!=="function")throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");if(C.aborted)N.abort(C.reason);else{this[z4]=N;let M=new WeakRef(N),V=function(){let S=M.deref();if(S!==void 0)S.abort(this.reason)};try{if(typeof DR==="function"&&DR(C)===NR)FR(100,C);else if(K4(C,"abort").length>=NR)FR(100,C)}catch{}EE.addAbortListener(C,V),H4.register(N,{signal:C,abort:V})}}if(this[KA]=new CR(zC),this[KA][KC]=B.headersList,this[KA][SC]="request",this[KA][IQ]=this[IQ],Y==="no-cors"){if(!G4.has(B.method))throw new TypeError(`'${B.method} is unsupported in no-cors mode.`);this[KA][SC]="request-no-cors"}if(F){let M=this[KA][KC],V=Q.headers!==void 0?Q.headers:new HC(M);if(M.clear(),V instanceof HC){for(let[S,z]of V)M.append(S,z);M.cookies=V.cookies}else g4(this[KA],V)}let J=A instanceof l?A[e].body:null;if((Q.body!=null||J!=null)&&(B.method==="GET"||B.method==="HEAD"))throw new TypeError("Request with GET/HEAD method cannot have body.");let U=null;if(Q.body!=null){let[M,V]=I4(Q.body,B.keepalive);if(U=M,V&&!this[KA][KC].contains("content-type"))this[KA].append("content-type",V)}let R=U??J;if(R!=null&&R.source==null){if(U!=null&&Q.duplex==null)throw new TypeError("RequestInit: duplex option is required when sending a body.");if(B.mode!=="same-origin"&&B.mode!=="cors")throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');B.useCORSPreflightFlag=!0}let w=R;if(U==null&&J!=null){if(EE.isDisturbed(J.stream)||J.stream.locked)throw new TypeError("Cannot construct a Request with a Request object that has already been used.");if(!V0)V0=G("stream/web").TransformStream;let M=new V0;J.stream.pipeThrough(M),w={source:J.source,length:J.length,stream:M.readable}}this[e].body=w}get method(){return T.brandCheck(this,l),this[e].method}get url(){return T.brandCheck(this,l),X4(this[e].url)}get headers(){return T.brandCheck(this,l),this[KA]}get destination(){return T.brandCheck(this,l),this[e].destination}get referrer(){if(T.brandCheck(this,l),this[e].referrer==="no-referrer")return"";if(this[e].referrer==="client")return"about:client";return this[e].referrer.toString()}get referrerPolicy(){return T.brandCheck(this,l),this[e].referrerPolicy}get mode(){return T.brandCheck(this,l),this[e].mode}get credentials(){return this[e].credentials}get cache(){return T.brandCheck(this,l),this[e].cache}get redirect(){return T.brandCheck(this,l),this[e].redirect}get integrity(){return T.brandCheck(this,l),this[e].integrity}get keepalive(){return T.brandCheck(this,l),this[e].keepalive}get isReloadNavigation(){return T.brandCheck(this,l),this[e].reloadNavigation}get isHistoryNavigation(){return T.brandCheck(this,l),this[e].historyNavigation}get signal(){return T.brandCheck(this,l),this[IE]}get body(){return T.brandCheck(this,l),this[e].body?this[e].body.stream:null}get bodyUsed(){return T.brandCheck(this,l),!!this[e].body&&EE.isDisturbed(this[e].body.stream)}get duplex(){return T.brandCheck(this,l),"half"}clone(){if(T.brandCheck(this,l),this.bodyUsed||this.body?.locked)throw new TypeError("unusable");let A=x4(this[e]),Q=new l(zC);Q[e]=A,Q[IQ]=this[IQ],Q[KA]=new CR(zC),Q[KA][KC]=A.headersList,Q[KA][SC]=this[KA][SC],Q[KA][IQ]=this[KA][IQ];let B=new AbortController;if(this.signal.aborted)B.abort(this.signal.reason);else EE.addAbortListener(this.signal,()=>{B.abort(this.signal.reason)});return Q[IE]=B.signal,Q}}E4(l);function xC(A){let Q={method:"GET",localURLsOnly:!1,unsafeRequest:!1,body:null,client:null,reservedClient:null,replacesClientId:"",window:"client",keepalive:!1,serviceWorkers:"all",initiator:"",destination:"",priority:null,origin:"client",policyContainer:"client",referrer:"client",referrerPolicy:"",mode:"no-cors",useCORSPreflightFlag:!1,credentials:"same-origin",useCredentials:!1,cache:"default",redirect:"follow",integrity:"",cryptoGraphicsNonceMetadata:"",parserMetadata:"",reloadNavigation:!1,historyNavigation:!1,userActivation:!1,taintedOrigin:!1,redirectCount:0,responseTainting:"basic",preventNoCacheCacheControlHeaderModification:!1,done:!1,timingAllowFailed:!1,...A,headersList:A.headersList?new HC(A.headersList):new HC};return Q.url=Q.urlList[0],Q}function x4(A){let Q=xC({...A,body:null});if(A.body!=null)Q.body=C4(A.body);return Q}Object.defineProperties(l.prototype,{method:NA,url:NA,headers:NA,redirect:NA,clone:NA,signal:NA,duplex:NA,destination:NA,body:NA,bodyUsed:NA,isHistoryNavigation:NA,isReloadNavigation:NA,keepalive:NA,integrity:NA,cache:NA,credentials:NA,attribute:NA,referrerPolicy:NA,referrer:NA,mode:NA,[Symbol.toStringTag]:{value:"Request",configurable:!0}});T.converters.Request=T.interfaceConverter(l);T.converters.RequestInfo=function(A){if(typeof A==="string")return T.converters.USVString(A);if(A instanceof l)return T.converters.Request(A);return T.converters.USVString(A)};T.converters.AbortSignal=T.interfaceConverter(AbortSignal);T.converters.RequestInit=T.dictionaryConverter([{key:"method",converter:T.converters.ByteString},{key:"headers",converter:T.converters.HeadersInit},{key:"body",converter:T.nullableConverter(T.converters.BodyInit)},{key:"referrer",converter:T.converters.USVString},{key:"referrerPolicy",converter:T.converters.DOMString,allowedValues:R4},{key:"mode",converter:T.converters.DOMString,allowedValues:M4},{key:"credentials",converter:T.converters.DOMString,allowedValues:L4},{key:"cache",converter:T.converters.DOMString,allowedValues:V4},{key:"redirect",converter:T.converters.DOMString,allowedValues:w4},{key:"integrity",converter:T.converters.DOMString},{key:"keepalive",converter:T.converters.boolean},{key:"signal",converter:T.nullableConverter((A)=>T.converters.AbortSignal(A,{strict:!1}))},{key:"window",converter:T.converters.any},{key:"duplex",converter:T.converters.DOMString,allowedValues:W4}]);YR.exports={Request:l,makeRequest:xC}});var qC=L((LH,zR)=>{var{Response:h4,makeNetworkError:i,makeAppropriateNetworkError:hC,filterResponse:W0,makeResponse:TC}=XC(),{Headers:JR}=$B(),{Request:T4,makeRequest:j4}=CE(),gE=G("zlib"),{bytesMatch:$4,makePolicyContainer:y4,clonePolicyContainer:q4,requestBadPort:O4,TAOCheck:P4,appendRequestOriginHeader:k4,responseLocationURL:_4,requestCurrentURL:qQ,setRequestReferrerPolicyOnRedirect:f4,tryUpgradeRequestToAPotentiallyTrustworthyURL:v4,createOpaqueTimingInfo:T0,appendFetchMetadata:b4,corsCheck:m4,crossOriginResourcePolicyCheck:c4,determineRequestsReferrer:u4,coarsenedSharedCurrentTime:j0,createDeferredPromise:p4,isBlobLike:d4,sameOrigin:H0,isCancelled:JI,isAborted:UR,isErrorLike:l4,fullyReadBody:MR,readableStreamClose:i4,isomorphicEncode:x0,urlIsLocal:n4,urlIsHttpHttpsScheme:$0,urlHasHttpsScheme:o4}=DQ(),{kState:h0,kHeaders:Z0,kGuard:a4,kRealm:GR}=mQ(),UI=G("assert"),{safelyExtractBody:jC}=OI(),{redirectStatusSet:LR,nullBodyStatus:VR,safeMethodsSet:s4,requestBodyHeader:r4,subresourceSet:t4,DOMException:$C}=BB(),{kHeadersList:YI}=o(),e4=G("events"),{Readable:AK,pipeline:QK}=G("stream"),{addAbortListener:BK,isErrored:IK,isReadable:yC,nodeMajor:RR,nodeMinor:EK}=f(),{dataURLProcessor:CK,serializeAMimeType:gK}=MQ(),{TransformStream:DK}=G("stream/web"),{getGlobalDispatcher:FK}=DI(),{webidl:NK}=HA(),{STATUS_CODES:YK}=G("http"),JK=["GET","HEAD"],X0,S0=globalThis.ReadableStream;class y0 extends e4{constructor(A){super();this.dispatcher=A,this.connection=null,this.dump=!1,this.state="ongoing",this.setMaxListeners(21)}terminate(A){if(this.state!=="ongoing")return;this.state="terminated",this.connection?.destroy(A),this.emit("terminated",A)}abort(A){if(this.state!=="ongoing")return;if(this.state="aborted",!A)A=new $C("The operation was aborted.","AbortError");this.serializedAbortReason=A,this.connection?.destroy(A),this.emit("terminated",A)}}function UK(A,Q={}){NK.argumentLengthCheck(arguments,1,{header:"globalThis.fetch"});let B=p4(),I;try{I=new T4(A,Q)}catch(U){return B.reject(U),B.promise}let E=I[h0];if(I.signal.aborted)return K0(B,E,null,I.signal.reason),B.promise;if(E.client.globalObject?.constructor?.name==="ServiceWorkerGlobalScope")E.serviceWorkers="none";let g=null,D=null,F=!1,Y=null;return BK(I.signal,()=>{F=!0,UI(Y!=null),Y.abort(I.signal.reason),K0(B,E,g,I.signal.reason)}),Y=ZR({request:E,processResponseEndOfBody:(U)=>WR(U,"fetch"),processResponse:(U)=>{if(F)return Promise.resolve();if(U.aborted)return K0(B,E,g,Y.serializedAbortReason),Promise.resolve();if(U.type==="error")return B.reject(Object.assign(new TypeError("fetch failed"),{cause:U.error})),Promise.resolve();g=new h4,g[h0]=U,g[GR]=D,g[Z0][YI]=U.headersList,g[Z0][a4]="immutable",g[Z0][GR]=D,B.resolve(g)},dispatcher:Q.dispatcher??FK()}),B.promise}function WR(A,Q="other"){if(A.type==="error"&&A.aborted)return;if(!A.urlList?.length)return;let B=A.urlList[0],I=A.timingInfo,E=A.cacheState;if(!$0(B))return;if(I===null)return;if(!A.timingAllowPassed)I=T0({startTime:I.startTime}),E="";I.endTime=j0(),A.timingInfo=I,GK(I,B,Q,globalThis,E)}function GK(A,Q,B,I,E){if(RR>18||RR===18&&EK>=2)performance.markResourceTiming(A,Q.href,B,I,E)}function K0(A,Q,B,I){if(!I)I=new $C("The operation was aborted.","AbortError");if(A.reject(I),Q.body!=null&&yC(Q.body?.stream))Q.body.stream.cancel(I).catch((C)=>{if(C.code==="ERR_INVALID_STATE")return;throw C});if(B==null)return;let E=B[h0];if(E.body!=null&&yC(E.body?.stream))E.body.stream.cancel(I).catch((C)=>{if(C.code==="ERR_INVALID_STATE")return;throw C})}function ZR({request:A,processRequestBodyChunkLength:Q,processRequestEndOfBody:B,processResponse:I,processResponseEndOfBody:E,processResponseConsumeBody:C,useParallelQueue:g=!1,dispatcher:D}){let F=null,Y=!1;if(A.client!=null)F=A.client.globalObject,Y=A.client.crossOriginIsolatedCapability;let N=j0(Y),J=T0({startTime:N}),U={controller:new y0(D),request:A,timingInfo:J,processRequestBodyChunkLength:Q,processRequestEndOfBody:B,processResponse:I,processResponseConsumeBody:C,processResponseEndOfBody:E,taskDestination:F,crossOriginIsolatedCapability:Y};if(UI(!A.body||A.body.stream),A.window==="client")A.window=A.client?.globalObject?.constructor?.name==="Window"?A.client:"no-window";if(A.origin==="client")A.origin=A.client?.origin;if(A.policyContainer==="client")if(A.client!=null)A.policyContainer=q4(A.client.policyContainer);else A.policyContainer=y4();if(!A.headersList.contains("accept"))A.headersList.append("accept","*/*");if(!A.headersList.contains("accept-language"))A.headersList.append("accept-language","*");if(A.priority===null);if(t4.has(A.destination));return XR(U).catch((R)=>{U.controller.terminate(R)}),U.controller}async function XR(A,Q=!1){let B=A.request,I=null;if(B.localURLsOnly&&!n4(qQ(B)))I=i("local URLs only");if(v4(B),O4(B)==="blocked")I=i("bad port");if(B.referrerPolicy==="")B.referrerPolicy=B.policyContainer.referrerPolicy;if(B.referrer!=="no-referrer")B.referrer=u4(B);if(I===null)I=await(async()=>{let C=qQ(B);if(H0(C,B.url)&&B.responseTainting==="basic"||C.protocol==="data:"||(B.mode==="navigate"||B.mode==="websocket"))return B.responseTainting="basic",await wR(A);if(B.mode==="same-origin")return i('request mode cannot be "same-origin"');if(B.mode==="no-cors"){if(B.redirect!=="follow")return i('redirect mode cannot be "follow" for "no-cors" request');return B.responseTainting="opaque",await wR(A)}if(!$0(qQ(B)))return i("URL scheme must be a HTTP(S) scheme");return B.responseTainting="cors",await SR(A)})();if(Q)return I;if(I.status!==0&&!I.internalResponse){if(B.responseTainting==="cors");if(B.responseTainting==="basic")I=W0(I,"basic");else if(B.responseTainting==="cors")I=W0(I,"cors");else if(B.responseTainting==="opaque")I=W0(I,"opaque");else UI(!1)}let E=I.status===0?I:I.internalResponse;if(E.urlList.length===0)E.urlList.push(...B.urlList);if(!B.timingAllowFailed)I.timingAllowPassed=!0;if(I.type==="opaque"&&E.status===206&&E.rangeRequested&&!B.headers.contains("range"))I=E=i();if(I.status!==0&&(B.method==="HEAD"||B.method==="CONNECT"||VR.includes(E.status)))E.body=null,A.controller.dump=!0;if(B.integrity){let C=(D)=>z0(A,i(D));if(B.responseTainting==="opaque"||I.body==null){C(I.error);return}let g=(D)=>{if(!$4(D,B.integrity)){C("integrity mismatch");return}I.body=jC(D)[0],z0(A,I)};await MR(I.body,g,C)}else z0(A,I)}function wR(A){if(JI(A)&&A.request.redirectCount===0)return Promise.resolve(hC(A));let{request:Q}=A,{protocol:B}=qQ(Q);switch(B){case"about:":return Promise.resolve(i("about scheme is not supported"));case"blob:":{if(!X0)X0=G("buffer").resolveObjectURL;let I=qQ(Q);if(I.search.length!==0)return Promise.resolve(i("NetworkError when attempting to fetch resource."));let E=X0(I.toString());if(Q.method!=="GET"||!d4(E))return Promise.resolve(i("invalid method"));let C=jC(E),g=C[0],D=x0(`${g.length}`),F=C[1]??"",Y=TC({statusText:"OK",headersList:[["content-length",{name:"Content-Length",value:D}],["content-type",{name:"Content-Type",value:F}]]});return Y.body=g,Promise.resolve(Y)}case"data:":{let I=qQ(Q),E=CK(I);if(E==="failure")return Promise.resolve(i("failed to fetch the data URL"));let C=gK(E.mimeType);return Promise.resolve(TC({statusText:"OK",headersList:[["content-type",{name:"Content-Type",value:C}]],body:jC(E.body)[0]}))}case"file:":return Promise.resolve(i("not implemented... yet..."));case"http:":case"https:":return SR(A).catch((I)=>i(I));default:return Promise.resolve(i("unknown scheme"))}}function RK(A,Q){if(A.request.done=!0,A.processResponseDone!=null)queueMicrotask(()=>A.processResponseDone(Q))}function z0(A,Q){if(Q.type==="error")Q.urlList=[A.request.urlList[0]],Q.timingInfo=T0({startTime:A.timingInfo.startTime});let B=()=>{if(A.request.done=!0,A.processResponseEndOfBody!=null)queueMicrotask(()=>A.processResponseEndOfBody(Q))};if(A.processResponse!=null)queueMicrotask(()=>A.processResponse(Q));if(Q.body==null)B();else{let E=new DK({start(){},transform:(C,g)=>{g.enqueue(C)},flush:B},{size(){return 1}},{size(){return 1}});Q.body={stream:Q.body.stream.pipeThrough(E)}}if(A.processResponseConsumeBody!=null){let I=(C)=>A.processResponseConsumeBody(Q,C),E=(C)=>A.processResponseConsumeBody(Q,C);if(Q.body==null)queueMicrotask(()=>I(null));else return MR(Q.body,I,E);return Promise.resolve()}}async function SR(A){let Q=A.request,B=null,I=null,E=A.timingInfo;if(Q.serviceWorkers==="all");if(B===null){if(Q.redirect==="follow")Q.serviceWorkers="none";if(I=B=await KR(A),Q.responseTainting==="cors"&&m4(Q,B)==="failure")return i("cors failure");if(P4(Q,B)==="failure")Q.timingAllowFailed=!0}if((Q.responseTainting==="opaque"||B.type==="opaque")&&c4(Q.origin,Q.client,Q.destination,I)==="blocked")return i("blocked");if(LR.has(I.status)){if(Q.redirect!=="manual")A.controller.connection.destroy();if(Q.redirect==="error")B=i("unexpected redirect");else if(Q.redirect==="manual")B=I;else if(Q.redirect==="follow")B=await wK(A,B);else UI(!1)}return B.timingInfo=E,B}function wK(A,Q){let B=A.request,I=Q.internalResponse?Q.internalResponse:Q,E;try{if(E=_4(I,qQ(B).hash),E==null)return Q}catch(g){return Promise.resolve(i(g))}if(!$0(E))return Promise.resolve(i("URL scheme must be a HTTP(S) scheme"));if(B.redirectCount===20)return Promise.resolve(i("redirect count exceeded"));if(B.redirectCount+=1,B.mode==="cors"&&(E.username||E.password)&&!H0(B,E))return Promise.resolve(i('cross origin not allowed for request mode "cors"'));if(B.responseTainting==="cors"&&(E.username||E.password))return Promise.resolve(i('URL cannot contain credentials for request mode "cors"'));if(I.status!==303&&B.body!=null&&B.body.source==null)return Promise.resolve(i());if([301,302].includes(I.status)&&B.method==="POST"||I.status===303&&!JK.includes(B.method)){B.method="GET",B.body=null;for(let g of r4)B.headersList.delete(g)}if(!H0(qQ(B),E))B.headersList.delete("authorization"),B.headersList.delete("proxy-authorization",!0),B.headersList.delete("cookie"),B.headersList.delete("host");if(B.body!=null)UI(B.body.source!=null),B.body=jC(B.body.source)[0];let C=A.timingInfo;if(C.redirectEndTime=C.postRedirectStartTime=j0(A.crossOriginIsolatedCapability),C.redirectStartTime===0)C.redirectStartTime=C.startTime;return B.urlList.push(E),f4(B,I),XR(A,!0)}async function KR(A,Q=!1,B=!1){let I=A.request,E=null,C=null,g=null,D=null,F=!1;if(I.window==="no-window"&&I.redirect==="error")E=A,C=I;else C=j4(I),E={...A},E.request=C;let Y=I.credentials==="include"||I.credentials==="same-origin"&&I.responseTainting==="basic",N=C.body?C.body.length:null,J=null;if(C.body==null&&["POST","PUT"].includes(C.method))J="0";if(N!=null)J=x0(`${N}`);if(J!=null)C.headersList.append("content-length",J);if(N!=null&&C.keepalive);if(C.referrer instanceof URL)C.headersList.append("referer",x0(C.referrer.href));if(k4(C),b4(C),!C.headersList.contains("user-agent"))C.headersList.append("user-agent",typeof esbuildDetection==="undefined"?"undici":"node");if(C.cache==="default"&&(C.headersList.contains("if-modified-since")||C.headersList.contains("if-none-match")||C.headersList.contains("if-unmodified-since")||C.headersList.contains("if-match")||C.headersList.contains("if-range")))C.cache="no-store";if(C.cache==="no-cache"&&!C.preventNoCacheCacheControlHeaderModification&&!C.headersList.contains("cache-control"))C.headersList.append("cache-control","max-age=0");if(C.cache==="no-store"||C.cache==="reload"){if(!C.headersList.contains("pragma"))C.headersList.append("pragma","no-cache");if(!C.headersList.contains("cache-control"))C.headersList.append("cache-control","no-cache")}if(C.headersList.contains("range"))C.headersList.append("accept-encoding","identity");if(!C.headersList.contains("accept-encoding"))if(o4(qQ(C)))C.headersList.append("accept-encoding","br, gzip, deflate");else C.headersList.append("accept-encoding","gzip, deflate");if(C.headersList.delete("host"),D==null)C.cache="no-store";if(C.mode!=="no-store"&&C.mode!=="reload");if(g==null){if(C.mode==="only-if-cached")return i("only if cached");let U=await MK(E,Y,B);if(!s4.has(C.method)&&U.status>=200&&U.status<=399);if(F&&U.status===304);if(g==null)g=U}if(g.urlList=[...C.urlList],C.headersList.contains("range"))g.rangeRequested=!0;if(g.requestIncludesCredentials=Y,g.status===407){if(I.window==="no-window")return i();if(JI(A))return hC(A);return i("proxy authentication required")}if(g.status===421&&!B&&(I.body==null||I.body.source!=null)){if(JI(A))return hC(A);A.controller.connection.destroy(),g=await KR(A,Q,!0)}return g}async function MK(A,Q=!1,B=!1){UI(!A.controller.connection||A.controller.connection.destroyed),A.controller.connection={abort:null,destroyed:!1,destroy(w){if(!this.destroyed)this.destroyed=!0,this.abort?.(w??new $C("The operation was aborted.","AbortError"))}};let I=A.request,E=null,C=A.timingInfo;if(!0)I.cache="no-store";let D=B?"yes":"no";if(I.mode==="websocket");let F=null;if(I.body==null&&A.processRequestEndOfBody)queueMicrotask(()=>A.processRequestEndOfBody());else if(I.body!=null){let w=async function*(S){if(JI(A))return;yield S,A.processRequestBodyChunkLength?.(S.byteLength)},M=()=>{if(JI(A))return;if(A.processRequestEndOfBody)A.processRequestEndOfBody()},V=(S)=>{if(JI(A))return;if(S.name==="AbortError")A.controller.abort();else A.controller.terminate(S)};F=async function*(){try{for await(let S of I.body.stream)yield*w(S);M()}catch(S){V(S)}}()}try{let{body:w,status:M,statusText:V,headersList:S,socket:z}=await R({body:F});if(z)E=TC({status:M,statusText:V,headersList:S,socket:z});else{let $=w[Symbol.asyncIterator]();A.controller.next=()=>$.next(),E=TC({status:M,statusText:V,headersList:S})}}catch(w){if(w.name==="AbortError")return A.controller.connection.destroy(),hC(A,w);return i(w)}let Y=()=>{A.controller.resume()},N=(w)=>{A.controller.abort(w)};if(!S0)S0=G("stream/web").ReadableStream;let J=new S0({async start(w){A.controller.controller=w},async pull(w){await Y(w)},async cancel(w){await N(w)}},{highWaterMark:0,size(){return 1}});E.body={stream:J},A.controller.on("terminated",U),A.controller.resume=async()=>{while(!0){let w,M;try{let{done:V,value:S}=await A.controller.next();if(UR(A))break;w=V?void 0:S}catch(V){if(A.controller.ended&&!C.encodedBodySize)w=void 0;else w=V,M=!0}if(w===void 0){i4(A.controller.controller),RK(A,E);return}if(C.decodedBodySize+=w?.byteLength??0,M){A.controller.terminate(w);return}if(A.controller.controller.enqueue(new Uint8Array(w)),IK(J)){A.controller.terminate();return}if(!A.controller.controller.desiredSize)return}};function U(w){if(UR(A)){if(E.aborted=!0,yC(J))A.controller.controller.error(A.controller.serializedAbortReason)}else if(yC(J))A.controller.controller.error(new TypeError("terminated",{cause:l4(w)?w:void 0}));A.controller.connection.destroy()}return E;async function R({body:w}){let M=qQ(I),V=A.controller.dispatcher;return new Promise((S,z)=>V.dispatch({path:M.pathname+M.search,origin:M.origin,method:I.method,body:A.controller.dispatcher.isMockActive?I.body&&(I.body.source||I.body.stream):w,headers:I.headersList.entries,maxRedirections:0,upgrade:I.mode==="websocket"?"websocket":void 0},{body:null,abort:null,onConnect($){let{connection:P}=A.controller;if(P.destroyed)$(new $C("The operation was aborted.","AbortError"));else A.controller.on("terminated",$),this.abort=P.abort=$},onHeaders($,P,iA,GA){if($<200)return;let YA=[],nA="",OA=new JR;if(Array.isArray(P))for(let n=0;n<P.length;n+=2){let BA=P[n+0].toString("latin1"),kA=P[n+1].toString("latin1");if(BA.toLowerCase()==="content-encoding")YA=kA.toLowerCase().split(",").map((tQ)=>tQ.trim());else if(BA.toLowerCase()==="location")nA=kA;OA[YI].append(BA,kA)}else{let n=Object.keys(P);for(let BA of n){let kA=P[BA];if(BA.toLowerCase()==="content-encoding")YA=kA.toLowerCase().split(",").map((tQ)=>tQ.trim()).reverse();else if(BA.toLowerCase()==="location")nA=kA;OA[YI].append(BA,kA)}}this.body=new AK({read:iA});let oA=[],PA=I.redirect==="follow"&&nA&&LR.has($);if(I.method!=="HEAD"&&I.method!=="CONNECT"&&!VR.includes($)&&!PA)for(let n of YA)if(n==="x-gzip"||n==="gzip")oA.push(gE.createGunzip({flush:gE.constants.Z_SYNC_FLUSH,finishFlush:gE.constants.Z_SYNC_FLUSH}));else if(n==="deflate")oA.push(gE.createInflate());else if(n==="br")oA.push(gE.createBrotliDecompress());else{oA.length=0;break}return S({status:$,statusText:GA,headersList:OA[YI],body:oA.length?QK(this.body,...oA,()=>{}):this.body.on("error",()=>{})}),!0},onData($){if(A.controller.dump)return;let P=$;return C.encodedBodySize+=P.byteLength,this.body.push(P)},onComplete(){if(this.abort)A.controller.off("terminated",this.abort);A.controller.ended=!0,this.body.push(null)},onError($){if(this.abort)A.controller.off("terminated",this.abort);this.body?.destroy($),A.controller.terminate($),z($)},onUpgrade($,P,iA){if($!==101)return;let GA=new JR;for(let YA=0;YA<P.length;YA+=2){let nA=P[YA+0].toString("latin1"),OA=P[YA+1].toString("latin1");GA[YI].append(nA,OA)}return S({status:$,statusText:YK[$],headersList:GA[YI],socket:iA}),!0}}))}}zR.exports={fetch:UK,Fetch:y0,fetching:ZR,finalizeAndReportTiming:WR}});var q0=L((VH,HR)=>{HR.exports={kState:Symbol("FileReader state"),kResult:Symbol("FileReader result"),kError:Symbol("FileReader error"),kLastProgressEventFired:Symbol("FileReader last progress event fired timestamp"),kEvents:Symbol("FileReader events"),kAborted:Symbol("FileReader aborted")}});var hR=L((WH,xR)=>{var{webidl:EQ}=HA(),OC=Symbol("ProgressEvent state");class DE extends Event{constructor(A,Q={}){A=EQ.converters.DOMString(A),Q=EQ.converters.ProgressEventInit(Q??{});super(A,Q);this[OC]={lengthComputable:Q.lengthComputable,loaded:Q.loaded,total:Q.total}}get lengthComputable(){return EQ.brandCheck(this,DE),this[OC].lengthComputable}get loaded(){return EQ.brandCheck(this,DE),this[OC].loaded}get total(){return EQ.brandCheck(this,DE),this[OC].total}}EQ.converters.ProgressEventInit=EQ.dictionaryConverter([{key:"lengthComputable",converter:EQ.converters.boolean,defaultValue:!1},{key:"loaded",converter:EQ.converters["unsigned long long"],defaultValue:0},{key:"total",converter:EQ.converters["unsigned long long"],defaultValue:0},{key:"bubbles",converter:EQ.converters.boolean,defaultValue:!1},{key:"cancelable",converter:EQ.converters.boolean,defaultValue:!1},{key:"composed",converter:EQ.converters.boolean,defaultValue:!1}]);xR.exports={ProgressEvent:DE}});var jR=L((ZH,TR)=>{function LK(A){if(!A)return"failure";switch(A.trim().toLowerCase()){case"unicode-1-1-utf-8":case"unicode11utf8":case"unicode20utf8":case"utf-8":case"utf8":case"x-unicode20utf8":return"UTF-8";case"866":case"cp866":case"csibm866":case"ibm866":return"IBM866";case"csisolatin2":case"iso-8859-2":case"iso-ir-101":case"iso8859-2":case"iso88592":case"iso_8859-2":case"iso_8859-2:1987":case"l2":case"latin2":return"ISO-8859-2";case"csisolatin3":case"iso-8859-3":case"iso-ir-109":case"iso8859-3":case"iso88593":case"iso_8859-3":case"iso_8859-3:1988":case"l3":case"latin3":return"ISO-8859-3";case"csisolatin4":case"iso-8859-4":case"iso-ir-110":case"iso8859-4":case"iso88594":case"iso_8859-4":case"iso_8859-4:1988":case"l4":case"latin4":return"ISO-8859-4";case"csisolatincyrillic":case"cyrillic":case"iso-8859-5":case"iso-ir-144":case"iso8859-5":case"iso88595":case"iso_8859-5":case"iso_8859-5:1988":return"ISO-8859-5";case"arabic":case"asmo-708":case"csiso88596e":case"csiso88596i":case"csisolatinarabic":case"ecma-114":case"iso-8859-6":case"iso-8859-6-e":case"iso-8859-6-i":case"iso-ir-127":case"iso8859-6":case"iso88596":case"iso_8859-6":case"iso_8859-6:1987":return"ISO-8859-6";case"csisolatingreek":case"ecma-118":case"elot_928":case"greek":case"greek8":case"iso-8859-7":case"iso-ir-126":case"iso8859-7":case"iso88597":case"iso_8859-7":case"iso_8859-7:1987":case"sun_eu_greek":return"ISO-8859-7";case"csiso88598e":case"csisolatinhebrew":case"hebrew":case"iso-8859-8":case"iso-8859-8-e":case"iso-ir-138":case"iso8859-8":case"iso88598":case"iso_8859-8":case"iso_8859-8:1988":case"visual":return"ISO-8859-8";case"csiso88598i":case"iso-8859-8-i":case"logical":return"ISO-8859-8-I";case"csisolatin6":case"iso-8859-10":case"iso-ir-157":case"iso8859-10":case"iso885910":case"l6":case"latin6":return"ISO-8859-10";case"iso-8859-13":case"iso8859-13":case"iso885913":return"ISO-8859-13";case"iso-8859-14":case"iso8859-14":case"iso885914":return"ISO-8859-14";case"csisolatin9":case"iso-8859-15":case"iso8859-15":case"iso885915":case"iso_8859-15":case"l9":return"ISO-8859-15";case"iso-8859-16":return"ISO-8859-16";case"cskoi8r":case"koi":case"koi8":case"koi8-r":case"koi8_r":return"KOI8-R";case"koi8-ru":case"koi8-u":return"KOI8-U";case"csmacintosh":case"mac":case"macintosh":case"x-mac-roman":return"macintosh";case"iso-8859-11":case"iso8859-11":case"iso885911":case"tis-620":case"windows-874":return"windows-874";case"cp1250":case"windows-1250":case"x-cp1250":return"windows-1250";case"cp1251":case"windows-1251":case"x-cp1251":return"windows-1251";case"ansi_x3.4-1968":case"ascii":case"cp1252":case"cp819":case"csisolatin1":case"ibm819":case"iso-8859-1":case"iso-ir-100":case"iso8859-1":case"iso88591":case"iso_8859-1":case"iso_8859-1:1987":case"l1":case"latin1":case"us-ascii":case"windows-1252":case"x-cp1252":return"windows-1252";case"cp1253":case"windows-1253":case"x-cp1253":return"windows-1253";case"cp1254":case"csisolatin5":case"iso-8859-9":case"iso-ir-148":case"iso8859-9":case"iso88599":case"iso_8859-9":case"iso_8859-9:1989":case"l5":case"latin5":case"windows-1254":case"x-cp1254":return"windows-1254";case"cp1255":case"windows-1255":case"x-cp1255":return"windows-1255";case"cp1256":case"windows-1256":case"x-cp1256":return"windows-1256";case"cp1257":case"windows-1257":case"x-cp1257":return"windows-1257";case"cp1258":case"windows-1258":case"x-cp1258":return"windows-1258";case"x-mac-cyrillic":case"x-mac-ukrainian":return"x-mac-cyrillic";case"chinese":case"csgb2312":case"csiso58gb231280":case"gb2312":case"gb_2312":case"gb_2312-80":case"gbk":case"iso-ir-58":case"x-gbk":return"GBK";case"gb18030":return"gb18030";case"big5":case"big5-hkscs":case"cn-big5":case"csbig5":case"x-x-big5":return"Big5";case"cseucpkdfmtjapanese":case"euc-jp":case"x-euc-jp":return"EUC-JP";case"csiso2022jp":case"iso-2022-jp":return"ISO-2022-JP";case"csshiftjis":case"ms932":case"ms_kanji":case"shift-jis":case"shift_jis":case"sjis":case"windows-31j":case"x-sjis":return"Shift_JIS";case"cseuckr":case"csksc56011987":case"euc-kr":case"iso-ir-149":case"korean":case"ks_c_5601-1987":case"ks_c_5601-1989":case"ksc5601":case"ksc_5601":case"windows-949":return"EUC-KR";case"csiso2022kr":case"hz-gb-2312":case"iso-2022-cn":case"iso-2022-cn-ext":case"iso-2022-kr":case"replacement":return"replacement";case"unicodefffe":case"utf-16be":return"UTF-16BE";case"csunicode":case"iso-10646-ucs-2":case"ucs-2":case"unicode":case"unicodefeff":case"utf-16":case"utf-16le":return"UTF-16LE";case"x-user-defined":return"x-user-defined";default:return"failure"}}TR.exports={getEncoding:LK}});var fR=L((XH,_R)=>{var{kState:GI,kError:O0,kResult:$R,kAborted:FE,kLastProgressEventFired:P0}=q0(),{ProgressEvent:VK}=hR(),{getEncoding:yR}=jR(),{DOMException:WK}=BB(),{serializeAMimeType:ZK,parseMIMEType:qR}=MQ(),{types:XK}=G("util"),{StringDecoder:OR}=G("string_decoder"),{btoa:PR}=G("buffer"),SK={enumerable:!0,writable:!1,configurable:!1};function KK(A,Q,B,I){if(A[GI]==="loading")throw new WK("Invalid state","InvalidStateError");A[GI]="loading",A[$R]=null,A[O0]=null;let C=Q.stream().getReader(),g=[],D=C.read(),F=!0;(async()=>{while(!A[FE])try{let{done:Y,value:N}=await D;if(F&&!A[FE])queueMicrotask(()=>{YB("loadstart",A)});if(F=!1,!Y&&XK.isUint8Array(N)){if(g.push(N),(A[P0]===void 0||Date.now()-A[P0]>=50)&&!A[FE])A[P0]=Date.now(),queueMicrotask(()=>{YB("progress",A)});D=C.read()}else if(Y){queueMicrotask(()=>{A[GI]="done";try{let J=zK(g,B,Q.type,I);if(A[FE])return;A[$R]=J,YB("load",A)}catch(J){A[O0]=J,YB("error",A)}if(A[GI]!=="loading")YB("loadend",A)});break}}catch(Y){if(A[FE])return;queueMicrotask(()=>{if(A[GI]="done",A[O0]=Y,YB("error",A),A[GI]!=="loading")YB("loadend",A)});break}})()}function YB(A,Q){let B=new VK(A,{bubbles:!1,cancelable:!1});Q.dispatchEvent(B)}function zK(A,Q,B,I){switch(Q){case"DataURL":{let E="data:",C=qR(B||"application/octet-stream");if(C!=="failure")E+=ZK(C);E+=";base64,";let g=new OR("latin1");for(let D of A)E+=PR(g.write(D));return E+=PR(g.end()),E}case"Text":{let E="failure";if(I)E=yR(I);if(E==="failure"&&B){let C=qR(B);if(C!=="failure")E=yR(C.parameters.get("charset"))}if(E==="failure")E="UTF-8";return HK(A,E)}case"ArrayBuffer":return kR(A).buffer;case"BinaryString":{let E="",C=new OR("latin1");for(let g of A)E+=C.write(g);return E+=C.end(),E}}}function HK(A,Q){let B=kR(A),I=xK(B),E=0;if(I!==null)Q=I,E=I==="UTF-8"?3:2;let C=B.slice(E);return new TextDecoder(Q).decode(C)}function xK(A){let[Q,B,I]=A;if(Q===239&&B===187&&I===191)return"UTF-8";else if(Q===254&&B===255)return"UTF-16BE";else if(Q===255&&B===254)return"UTF-16LE";return null}function kR(A){let Q=A.reduce((I,E)=>{return I+E.byteLength},0),B=0;return A.reduce((I,E)=>{return I.set(E,B),B+=E.byteLength,I},new Uint8Array(Q))}_R.exports={staticPropertyDescriptors:SK,readOperation:KK,fireAProgressEvent:YB}});var cR=L((SH,mR)=>{var{staticPropertyDescriptors:RI,readOperation:PC,fireAProgressEvent:vR}=fR(),{kState:yB,kError:bR,kResult:kC,kEvents:b,kAborted:hK}=q0(),{webidl:p}=HA(),{kEnumerableProperty:mA}=f();class u extends EventTarget{constructor(){super();this[yB]="empty",this[kC]=null,this[bR]=null,this[b]={loadend:null,error:null,abort:null,load:null,progress:null,loadstart:null}}readAsArrayBuffer(A){p.brandCheck(this,u),p.argumentLengthCheck(arguments,1,{header:"FileReader.readAsArrayBuffer"}),A=p.converters.Blob(A,{strict:!1}),PC(this,A,"ArrayBuffer")}readAsBinaryString(A){p.brandCheck(this,u),p.argumentLengthCheck(arguments,1,{header:"FileReader.readAsBinaryString"}),A=p.converters.Blob(A,{strict:!1}),PC(this,A,"BinaryString")}readAsText(A,Q=void 0){if(p.brandCheck(this,u),p.argumentLengthCheck(arguments,1,{header:"FileReader.readAsText"}),A=p.converters.Blob(A,{strict:!1}),Q!==void 0)Q=p.converters.DOMString(Q);PC(this,A,"Text",Q)}readAsDataURL(A){p.brandCheck(this,u),p.argumentLengthCheck(arguments,1,{header:"FileReader.readAsDataURL"}),A=p.converters.Blob(A,{strict:!1}),PC(this,A,"DataURL")}abort(){if(this[yB]==="empty"||this[yB]==="done"){this[kC]=null;return}if(this[yB]==="loading")this[yB]="done",this[kC]=null;if(this[hK]=!0,vR("abort",this),this[yB]!=="loading")vR("loadend",this)}get readyState(){switch(p.brandCheck(this,u),this[yB]){case"empty":return this.EMPTY;case"loading":return this.LOADING;case"done":return this.DONE}}get result(){return p.brandCheck(this,u),this[kC]}get error(){return p.brandCheck(this,u),this[bR]}get onloadend(){return p.brandCheck(this,u),this[b].loadend}set onloadend(A){if(p.brandCheck(this,u),this[b].loadend)this.removeEventListener("loadend",this[b].loadend);if(typeof A==="function")this[b].loadend=A,this.addEventListener("loadend",A);else this[b].loadend=null}get onerror(){return p.brandCheck(this,u),this[b].error}set onerror(A){if(p.brandCheck(this,u),this[b].error)this.removeEventListener("error",this[b].error);if(typeof A==="function")this[b].error=A,this.addEventListener("error",A);else this[b].error=null}get onloadstart(){return p.brandCheck(this,u),this[b].loadstart}set onloadstart(A){if(p.brandCheck(this,u),this[b].loadstart)this.removeEventListener("loadstart",this[b].loadstart);if(typeof A==="function")this[b].loadstart=A,this.addEventListener("loadstart",A);else this[b].loadstart=null}get onprogress(){return p.brandCheck(this,u),this[b].progress}set onprogress(A){if(p.brandCheck(this,u),this[b].progress)this.removeEventListener("progress",this[b].progress);if(typeof A==="function")this[b].progress=A,this.addEventListener("progress",A);else this[b].progress=null}get onload(){return p.brandCheck(this,u),this[b].load}set onload(A){if(p.brandCheck(this,u),this[b].load)this.removeEventListener("load",this[b].load);if(typeof A==="function")this[b].load=A,this.addEventListener("load",A);else this[b].load=null}get onabort(){return p.brandCheck(this,u),this[b].abort}set onabort(A){if(p.brandCheck(this,u),this[b].abort)this.removeEventListener("abort",this[b].abort);if(typeof A==="function")this[b].abort=A,this.addEventListener("abort",A);else this[b].abort=null}}u.EMPTY=u.prototype.EMPTY=0;u.LOADING=u.prototype.LOADING=1;u.DONE=u.prototype.DONE=2;Object.defineProperties(u.prototype,{EMPTY:RI,LOADING:RI,DONE:RI,readAsArrayBuffer:mA,readAsBinaryString:mA,readAsText:mA,readAsDataURL:mA,abort:mA,readyState:mA,result:mA,error:mA,onloadstart:mA,onprogress:mA,onload:mA,onabort:mA,onerror:mA,onloadend:mA,[Symbol.toStringTag]:{value:"FileReader",writable:!1,enumerable:!1,configurable:!0}});Object.defineProperties(u,{EMPTY:RI,LOADING:RI,DONE:RI});mR.exports={FileReader:u}});var _C=L((KH,uR)=>{uR.exports={kConstruct:o().kConstruct}});var lR=L((zH,dR)=>{var TK=G("assert"),{URLSerializer:pR}=MQ(),{isValidHeaderName:jK}=DQ();function $K(A,Q,B=!1){let I=pR(A,B),E=pR(Q,B);return I===E}function yK(A){TK(A!==null);let Q=[];for(let B of A.split(",")){if(B=B.trim(),!B.length)continue;else if(!jK(B))continue;Q.push(B)}return Q}dR.exports={urlEquals:$K,fieldValues:yK}});var rR=L((HH,sR)=>{var{kConstruct:qK}=_C(),{urlEquals:OK,fieldValues:k0}=lR(),{kEnumerableProperty:qB,isDisturbed:PK}=f(),{kHeadersList:iR}=o(),{webidl:x}=HA(),{Response:oR,cloneResponse:kK}=XC(),{Request:OQ}=CE(),{kState:yA,kHeaders:fC,kGuard:nR,kRealm:_K}=mQ(),{fetching:fK}=qC(),{urlIsHttpHttpsScheme:vC,createDeferredPromise:wI,readAllBytes:vK}=DQ(),_0=G("assert"),{getGlobalDispatcher:bK}=DI();class PQ{#A;constructor(){if(arguments[0]!==qK)x.illegalConstructor();this.#A=arguments[1]}async match(A,Q={}){x.brandCheck(this,PQ),x.argumentLengthCheck(arguments,1,{header:"Cache.match"}),A=x.converters.RequestInfo(A),Q=x.converters.CacheQueryOptions(Q);let B=await this.matchAll(A,Q);if(B.length===0)return;return B[0]}async matchAll(A=void 0,Q={}){if(x.brandCheck(this,PQ),A!==void 0)A=x.converters.RequestInfo(A);Q=x.converters.CacheQueryOptions(Q);let B=null;if(A!==void 0){if(A instanceof OQ){if(B=A[yA],B.method!=="GET"&&!Q.ignoreMethod)return[]}else if(typeof A==="string")B=new OQ(A)[yA]}let I=[];if(A===void 0)for(let C of this.#A)I.push(C[1]);else{let C=this.#I(B,Q);for(let g of C)I.push(g[1])}let E=[];for(let C of I){let g=new oR(C.body?.source??null),D=g[yA].body;g[yA]=C,g[yA].body=D,g[fC][iR]=C.headersList,g[fC][nR]="immutable",E.push(g)}return Object.freeze(E)}async add(A){x.brandCheck(this,PQ),x.argumentLengthCheck(arguments,1,{header:"Cache.add"}),A=x.converters.RequestInfo(A);let Q=[A];return await this.addAll(Q)}async addAll(A){x.brandCheck(this,PQ),x.argumentLengthCheck(arguments,1,{header:"Cache.addAll"}),A=x.converters["sequence<RequestInfo>"](A);let Q=[],B=[];for(let N of A){if(typeof N==="string")continue;let J=N[yA];if(!vC(J.url)||J.method!=="GET")throw x.errors.exception({header:"Cache.addAll",message:"Expected http/s scheme when method is not GET."})}let I=[];for(let N of A){let J=new OQ(N)[yA];if(!vC(J.url))throw x.errors.exception({header:"Cache.addAll",message:"Expected http/s scheme."});J.initiator="fetch",J.destination="subresource",B.push(J);let U=wI();I.push(fK({request:J,dispatcher:bK(),processResponse(R){if(R.type==="error"||R.status===206||R.status<200||R.status>299)U.reject(x.errors.exception({header:"Cache.addAll",message:"Received an invalid status code or the request failed."}));else if(R.headersList.contains("vary")){let w=k0(R.headersList.get("vary"));for(let M of w)if(M==="*"){U.reject(x.errors.exception({header:"Cache.addAll",message:"invalid vary field value"}));for(let V of I)V.abort();return}}},processResponseEndOfBody(R){if(R.aborted){U.reject(new DOMException("aborted","AbortError"));return}U.resolve(R)}})),Q.push(U.promise)}let C=await Promise.all(Q),g=[],D=0;for(let N of C){let J={type:"put",request:B[D],response:N};g.push(J),D++}let F=wI(),Y=null;try{this.#B(g)}catch(N){Y=N}return queueMicrotask(()=>{if(Y===null)F.resolve(void 0);else F.reject(Y)}),F.promise}async put(A,Q){x.brandCheck(this,PQ),x.argumentLengthCheck(arguments,2,{header:"Cache.put"}),A=x.converters.RequestInfo(A),Q=x.converters.Response(Q);let B=null;if(A instanceof OQ)B=A[yA];else B=new OQ(A)[yA];if(!vC(B.url)||B.method!=="GET")throw x.errors.exception({header:"Cache.put",message:"Expected an http/s scheme when method is not GET"});let I=Q[yA];if(I.status===206)throw x.errors.exception({header:"Cache.put",message:"Got 206 status"});if(I.headersList.contains("vary")){let J=k0(I.headersList.get("vary"));for(let U of J)if(U==="*")throw x.errors.exception({header:"Cache.put",message:"Got * vary field value"})}if(I.body&&(PK(I.body.stream)||I.body.stream.locked))throw x.errors.exception({header:"Cache.put",message:"Response body is locked or disturbed"});let E=kK(I),C=wI();if(I.body!=null){let U=I.body.stream.getReader();vK(U).then(C.resolve,C.reject)}else C.resolve(void 0);let g=[],D={type:"put",request:B,response:E};g.push(D);let F=await C.promise;if(E.body!=null)E.body.source=F;let Y=wI(),N=null;try{this.#B(g)}catch(J){N=J}return queueMicrotask(()=>{if(N===null)Y.resolve();else Y.reject(N)}),Y.promise}async delete(A,Q={}){x.brandCheck(this,PQ),x.argumentLengthCheck(arguments,1,{header:"Cache.delete"}),A=x.converters.RequestInfo(A),Q=x.converters.CacheQueryOptions(Q);let B=null;if(A instanceof OQ){if(B=A[yA],B.method!=="GET"&&!Q.ignoreMethod)return!1}else _0(typeof A==="string"),B=new OQ(A)[yA];let I=[],E={type:"delete",request:B,options:Q};I.push(E);let C=wI(),g=null,D;try{D=this.#B(I)}catch(F){g=F}return queueMicrotask(()=>{if(g===null)C.resolve(!!D?.length);else C.reject(g)}),C.promise}async keys(A=void 0,Q={}){if(x.brandCheck(this,PQ),A!==void 0)A=x.converters.RequestInfo(A);Q=x.converters.CacheQueryOptions(Q);let B=null;if(A!==void 0){if(A instanceof OQ){if(B=A[yA],B.method!=="GET"&&!Q.ignoreMethod)return[]}else if(typeof A==="string")B=new OQ(A)[yA]}let I=wI(),E=[];if(A===void 0)for(let C of this.#A)E.push(C[0]);else{let C=this.#I(B,Q);for(let g of C)E.push(g[0])}return queueMicrotask(()=>{let C=[];for(let g of E){let D=new OQ("https://a");D[yA]=g,D[fC][iR]=g.headersList,D[fC][nR]="immutable",D[_K]=g.client,C.push(D)}I.resolve(Object.freeze(C))}),I.promise}#B(A){let Q=this.#A,B=[...Q],I=[],E=[];try{for(let C of A){if(C.type!=="delete"&&C.type!=="put")throw x.errors.exception({header:"Cache.#batchCacheOperations",message:'operation type does not match "delete" or "put"'});if(C.type==="delete"&&C.response!=null)throw x.errors.exception({header:"Cache.#batchCacheOperations",message:"delete operation should not have an associated response"});if(this.#I(C.request,C.options,I).length)throw new DOMException("???","InvalidStateError");let g;if(C.type==="delete"){if(g=this.#I(C.request,C.options),g.length===0)return[];for(let D of g){let F=Q.indexOf(D);_0(F!==-1),Q.splice(F,1)}}else if(C.type==="put"){if(C.response==null)throw x.errors.exception({header:"Cache.#batchCacheOperations",message:"put operation should have an associated response"});let D=C.request;if(!vC(D.url))throw x.errors.exception({header:"Cache.#batchCacheOperations",message:"expected http or https scheme"});if(D.method!=="GET")throw x.errors.exception({header:"Cache.#batchCacheOperations",message:"not get method"});if(C.options!=null)throw x.errors.exception({header:"Cache.#batchCacheOperations",message:"options must not be defined"});g=this.#I(C.request);for(let F of g){let Y=Q.indexOf(F);_0(Y!==-1),Q.splice(Y,1)}Q.push([C.request,C.response]),I.push([C.request,C.response])}E.push([C.request,C.response])}return E}catch(C){throw this.#A.length=0,this.#A=B,C}}#I(A,Q,B){let I=[],E=B??this.#A;for(let C of E){let[g,D]=C;if(this.#Q(A,g,D,Q))I.push(C)}return I}#Q(A,Q,B=null,I){let E=new URL(A.url),C=new URL(Q.url);if(I?.ignoreSearch)C.search="",E.search="";if(!OK(E,C,!0))return!1;if(B==null||I?.ignoreVary||!B.headersList.contains("vary"))return!0;let g=k0(B.headersList.get("vary"));for(let D of g){if(D==="*")return!1;let F=Q.headersList.get(D),Y=A.headersList.get(D);if(F!==Y)return!1}return!0}}Object.defineProperties(PQ.prototype,{[Symbol.toStringTag]:{value:"Cache",configurable:!0},match:qB,matchAll:qB,add:qB,addAll:qB,put:qB,delete:qB,keys:qB});var aR=[{key:"ignoreSearch",converter:x.converters.boolean,defaultValue:!1},{key:"ignoreMethod",converter:x.converters.boolean,defaultValue:!1},{key:"ignoreVary",converter:x.converters.boolean,defaultValue:!1}];x.converters.CacheQueryOptions=x.dictionaryConverter(aR);x.converters.MultiCacheQueryOptions=x.dictionaryConverter([...aR,{key:"cacheName",converter:x.converters.DOMString}]);x.converters.Response=x.interfaceConverter(oR);x.converters["sequence<RequestInfo>"]=x.sequenceConverter(x.converters.RequestInfo);sR.exports={Cache:PQ}});var eR=L((xH,tR)=>{var{kConstruct:NE}=_C(),{Cache:bC}=rR(),{webidl:qA}=HA(),{kEnumerableProperty:YE}=f();class JB{#A=new Map;constructor(){if(arguments[0]!==NE)qA.illegalConstructor()}async match(A,Q={}){if(qA.brandCheck(this,JB),qA.argumentLengthCheck(arguments,1,{header:"CacheStorage.match"}),A=qA.converters.RequestInfo(A),Q=qA.converters.MultiCacheQueryOptions(Q),Q.cacheName!=null){if(this.#A.has(Q.cacheName)){let B=this.#A.get(Q.cacheName);return await new bC(NE,B).match(A,Q)}}else for(let B of this.#A.values()){let E=await new bC(NE,B).match(A,Q);if(E!==void 0)return E}}async has(A){return qA.brandCheck(this,JB),qA.argumentLengthCheck(arguments,1,{header:"CacheStorage.has"}),A=qA.converters.DOMString(A),this.#A.has(A)}async open(A){if(qA.brandCheck(this,JB),qA.argumentLengthCheck(arguments,1,{header:"CacheStorage.open"}),A=qA.converters.DOMString(A),this.#A.has(A)){let B=this.#A.get(A);return new bC(NE,B)}let Q=[];return this.#A.set(A,Q),new bC(NE,Q)}async delete(A){return qA.brandCheck(this,JB),qA.argumentLengthCheck(arguments,1,{header:"CacheStorage.delete"}),A=qA.converters.DOMString(A),this.#A.delete(A)}async keys(){return qA.brandCheck(this,JB),[...this.#A.keys()]}}Object.defineProperties(JB.prototype,{[Symbol.toStringTag]:{value:"CacheStorage",configurable:!0},match:YE,has:YE,open:YE,delete:YE,keys:YE});tR.exports={CacheStorage:JB}});var Q2=L((hH,A2)=>{A2.exports={maxAttributeValueSize:1024,maxNameValuePairSize:4096}});var f0=L((TH,E2)=>{var B2=G("assert"),{kHeadersList:I2}=o();function mK(A){if(A.length===0)return!1;for(let Q of A){let B=Q.charCodeAt(0);if(B>=0||B<=8||(B>=10||B<=31)||B===127)return!1}}function cK(A){for(let Q of A){let B=Q.charCodeAt(0);if(B<=32||B>127||Q==="("||Q===")"||Q===">"||Q==="<"||Q==="@"||Q===","||Q===";"||Q===":"||Q==="\\"||Q==='"'||Q==="/"||Q==="["||Q==="]"||Q==="?"||Q==="="||Q==="{"||Q==="}")throw new Error("Invalid cookie name")}}function uK(A){for(let Q of A){let B=Q.charCodeAt(0);if(B<33||B===34||B===44||B===59||B===92||B>126)throw new Error("Invalid header value")}}function pK(A){for(let Q of A)if(Q.charCodeAt(0)<33||Q===";")throw new Error("Invalid cookie path")}function dK(A){if(A.startsWith("-")||A.endsWith(".")||A.endsWith("-"))throw new Error("Invalid cookie domain")}function lK(A){if(typeof A==="number")A=new Date(A);let Q=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],B=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],I=Q[A.getUTCDay()],E=A.getUTCDate().toString().padStart(2,"0"),C=B[A.getUTCMonth()],g=A.getUTCFullYear(),D=A.getUTCHours().toString().padStart(2,"0"),F=A.getUTCMinutes().toString().padStart(2,"0"),Y=A.getUTCSeconds().toString().padStart(2,"0");return`${I}, ${E} ${C} ${g} ${D}:${F}:${Y} GMT`}function iK(A){if(A<0)throw new Error("Invalid cookie max-age")}function nK(A){if(A.name.length===0)return null;cK(A.name),uK(A.value);let Q=[`${A.name}=${A.value}`];if(A.name.startsWith("__Secure-"))A.secure=!0;if(A.name.startsWith("__Host-"))A.secure=!0,A.domain=null,A.path="/";if(A.secure)Q.push("Secure");if(A.httpOnly)Q.push("HttpOnly");if(typeof A.maxAge==="number")iK(A.maxAge),Q.push(`Max-Age=${A.maxAge}`);if(A.domain)dK(A.domain),Q.push(`Domain=${A.domain}`);if(A.path)pK(A.path),Q.push(`Path=${A.path}`);if(A.expires&&A.expires.toString()!=="Invalid Date")Q.push(`Expires=${lK(A.expires)}`);if(A.sameSite)Q.push(`SameSite=${A.sameSite}`);for(let B of A.unparsed){if(!B.includes("="))throw new Error("Invalid unparsed");let[I,...E]=B.split("=");Q.push(`${I.trim()}=${E.join("=")}`)}return Q.join("; ")}var mC;function oK(A){if(A[I2])return A[I2];if(!mC)mC=Object.getOwnPropertySymbols(A).find((B)=>B.description==="headers list"),B2(mC,"Headers cannot be parsed");let Q=A[mC];return B2(Q),Q}E2.exports={isCTLExcludingHtab:mK,stringify:nK,getHeadersList:oK}});var g2=L((jH,C2)=>{var{maxNameValuePairSize:aK,maxAttributeValueSize:sK}=Q2(),{isCTLExcludingHtab:rK}=f0(),{collectASequenceOfCodePointsFast:cC}=MQ(),tK=G("assert");function eK(A){if(rK(A))return null;let Q="",B="",I="",E="";if(A.includes(";")){let C={position:0};Q=cC(";",A,C),B=A.slice(C.position)}else Q=A;if(!Q.includes("="))E=Q;else{let C={position:0};I=cC("=",Q,C),E=Q.slice(C.position+1)}if(I=I.trim(),E=E.trim(),I.length+E.length>aK)return null;return{name:I,value:E,...MI(B)}}function MI(A,Q={}){if(A.length===0)return Q;tK(A[0]===";"),A=A.slice(1);let B="";if(A.includes(";"))B=cC(";",A,{position:0}),A=A.slice(B.length);else B=A,A="";let I="",E="";if(B.includes("=")){let g={position:0};I=cC("=",B,g),E=B.slice(g.position+1)}else I=B;if(I=I.trim(),E=E.trim(),E.length>sK)return MI(A,Q);let C=I.toLowerCase();if(C==="expires"){let g=new Date(E);Q.expires=g}else if(C==="max-age"){let g=E.charCodeAt(0);if((g<48||g>57)&&E[0]!=="-")return MI(A,Q);if(!/^\d+$/.test(E))return MI(A,Q);let D=Number(E);Q.maxAge=D}else if(C==="domain"){let g=E;if(g[0]===".")g=g.slice(1);g=g.toLowerCase(),Q.domain=g}else if(C==="path"){let g="";if(E.length===0||E[0]!=="/")g="/";else g=E;Q.path=g}else if(C==="secure")Q.secure=!0;else if(C==="httponly")Q.httpOnly=!0;else if(C==="samesite"){let g="Default",D=E.toLowerCase();if(D.includes("none"))g="None";if(D.includes("strict"))g="Strict";if(D.includes("lax"))g="Lax";Q.sameSite=g}else Q.unparsed??=[],Q.unparsed.push(`${I}=${E}`);return MI(A,Q)}C2.exports={parseSetCookie:eK,parseUnparsedAttributes:MI}});var Y2=L(($H,N2)=>{var{parseSetCookie:A1}=g2(),{stringify:D2,getHeadersList:Q1}=f0(),{webidl:k}=HA(),{Headers:uC}=$B();function B1(A){k.argumentLengthCheck(arguments,1,{header:"getCookies"}),k.brandCheck(A,uC,{strict:!1});let Q=A.get("cookie"),B={};if(!Q)return B;for(let I of Q.split(";")){let[E,...C]=I.split("=");B[E.trim()]=C.join("=")}return B}function I1(A,Q,B){k.argumentLengthCheck(arguments,2,{header:"deleteCookie"}),k.brandCheck(A,uC,{strict:!1}),Q=k.converters.DOMString(Q),B=k.converters.DeleteCookieAttributes(B),F2(A,{name:Q,value:"",expires:new Date(0),...B})}function E1(A){k.argumentLengthCheck(arguments,1,{header:"getSetCookies"}),k.brandCheck(A,uC,{strict:!1});let Q=Q1(A).cookies;if(!Q)return[];return Q.map((B)=>A1(Array.isArray(B)?B[1]:B))}function F2(A,Q){if(k.argumentLengthCheck(arguments,2,{header:"setCookie"}),k.brandCheck(A,uC,{strict:!1}),Q=k.converters.Cookie(Q),D2(Q))A.append("Set-Cookie",D2(Q))}k.converters.DeleteCookieAttributes=k.dictionaryConverter([{converter:k.nullableConverter(k.converters.DOMString),key:"path",defaultValue:null},{converter:k.nullableConverter(k.converters.DOMString),key:"domain",defaultValue:null}]);k.converters.Cookie=k.dictionaryConverter([{converter:k.converters.DOMString,key:"name"},{converter:k.converters.DOMString,key:"value"},{converter:k.nullableConverter((A)=>{if(typeof A==="number")return k.converters["unsigned long long"](A);return new Date(A)}),key:"expires",defaultValue:null},{converter:k.nullableConverter(k.converters["long long"]),key:"maxAge",defaultValue:null},{converter:k.nullableConverter(k.converters.DOMString),key:"domain",defaultValue:null},{converter:k.nullableConverter(k.converters.DOMString),key:"path",defaultValue:null},{converter:k.nullableConverter(k.converters.boolean),key:"secure",defaultValue:null},{converter:k.nullableConverter(k.converters.boolean),key:"httpOnly",defaultValue:null},{converter:k.converters.USVString,key:"sameSite",allowedValues:["Strict","Lax","None"]},{converter:k.sequenceConverter(k.converters.DOMString),key:"unparsed",defaultValue:[]}]);N2.exports={getCookies:B1,deleteCookie:I1,getSetCookies:E1,setCookie:F2}});var LI=L((yH,J2)=>{var C1={enumerable:!0,writable:!1,configurable:!1},g1={CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3},D1={CONTINUATION:0,TEXT:1,BINARY:2,CLOSE:8,PING:9,PONG:10},F1={INFO:0,PAYLOADLENGTH_16:2,PAYLOADLENGTH_64:3,READ_DATA:4},N1=Buffer.allocUnsafe(0);J2.exports={uid:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",staticPropertyDescriptors:C1,states:g1,opcodes:D1,maxUnsigned16Bit:65535,parserStates:F1,emptyBuffer:N1}});var JE=L((qH,U2)=>{U2.exports={kWebSocketURL:Symbol("url"),kReadyState:Symbol("ready state"),kController:Symbol("controller"),kResponse:Symbol("response"),kBinaryType:Symbol("binary type"),kSentClose:Symbol("sent close"),kReceivedClose:Symbol("received close"),kByteParser:Symbol("byte parser")}});var b0=L((OH,G2)=>{var{webidl:h}=HA(),{kEnumerableProperty:cA}=f(),{MessagePort:Y1}=G("worker_threads");class kQ extends Event{#A;constructor(A,Q={}){h.argumentLengthCheck(arguments,1,{header:"MessageEvent constructor"}),A=h.converters.DOMString(A),Q=h.converters.MessageEventInit(Q);super(A,Q);this.#A=Q}get data(){return h.brandCheck(this,kQ),this.#A.data}get origin(){return h.brandCheck(this,kQ),this.#A.origin}get lastEventId(){return h.brandCheck(this,kQ),this.#A.lastEventId}get source(){return h.brandCheck(this,kQ),this.#A.source}get ports(){if(h.brandCheck(this,kQ),!Object.isFrozen(this.#A.ports))Object.freeze(this.#A.ports);return this.#A.ports}initMessageEvent(A,Q=!1,B=!1,I=null,E="",C="",g=null,D=[]){return h.brandCheck(this,kQ),h.argumentLengthCheck(arguments,1,{header:"MessageEvent.initMessageEvent"}),new kQ(A,{bubbles:Q,cancelable:B,data:I,origin:E,lastEventId:C,source:g,ports:D})}}class VI extends Event{#A;constructor(A,Q={}){h.argumentLengthCheck(arguments,1,{header:"CloseEvent constructor"}),A=h.converters.DOMString(A),Q=h.converters.CloseEventInit(Q);super(A,Q);this.#A=Q}get wasClean(){return h.brandCheck(this,VI),this.#A.wasClean}get code(){return h.brandCheck(this,VI),this.#A.code}get reason(){return h.brandCheck(this,VI),this.#A.reason}}class UB extends Event{#A;constructor(A,Q){h.argumentLengthCheck(arguments,1,{header:"ErrorEvent constructor"});super(A,Q);A=h.converters.DOMString(A),Q=h.converters.ErrorEventInit(Q??{}),this.#A=Q}get message(){return h.brandCheck(this,UB),this.#A.message}get filename(){return h.brandCheck(this,UB),this.#A.filename}get lineno(){return h.brandCheck(this,UB),this.#A.lineno}get colno(){return h.brandCheck(this,UB),this.#A.colno}get error(){return h.brandCheck(this,UB),this.#A.error}}Object.defineProperties(kQ.prototype,{[Symbol.toStringTag]:{value:"MessageEvent",configurable:!0},data:cA,origin:cA,lastEventId:cA,source:cA,ports:cA,initMessageEvent:cA});Object.defineProperties(VI.prototype,{[Symbol.toStringTag]:{value:"CloseEvent",configurable:!0},reason:cA,code:cA,wasClean:cA});Object.defineProperties(UB.prototype,{[Symbol.toStringTag]:{value:"ErrorEvent",configurable:!0},message:cA,filename:cA,lineno:cA,colno:cA,error:cA});h.converters.MessagePort=h.interfaceConverter(Y1);h.converters["sequence<MessagePort>"]=h.sequenceConverter(h.converters.MessagePort);var v0=[{key:"bubbles",converter:h.converters.boolean,defaultValue:!1},{key:"cancelable",converter:h.converters.boolean,defaultValue:!1},{key:"composed",converter:h.converters.boolean,defaultValue:!1}];h.converters.MessageEventInit=h.dictionaryConverter([...v0,{key:"data",converter:h.converters.any,defaultValue:null},{key:"origin",converter:h.converters.USVString,defaultValue:""},{key:"lastEventId",converter:h.converters.DOMString,defaultValue:""},{key:"source",converter:h.nullableConverter(h.converters.MessagePort),defaultValue:null},{key:"ports",converter:h.converters["sequence<MessagePort>"],get defaultValue(){return[]}}]);h.converters.CloseEventInit=h.dictionaryConverter([...v0,{key:"wasClean",converter:h.converters.boolean,defaultValue:!1},{key:"code",converter:h.converters["unsigned short"],defaultValue:0},{key:"reason",converter:h.converters.USVString,defaultValue:""}]);h.converters.ErrorEventInit=h.dictionaryConverter([...v0,{key:"message",converter:h.converters.DOMString,defaultValue:""},{key:"filename",converter:h.converters.USVString,defaultValue:""},{key:"lineno",converter:h.converters["unsigned long"],defaultValue:0},{key:"colno",converter:h.converters["unsigned long"],defaultValue:0},{key:"error",converter:h.converters.any}]);G2.exports={MessageEvent:kQ,CloseEvent:VI,ErrorEvent:UB}});var lC=L((PH,M2)=>{var{kReadyState:pC,kController:J1,kResponse:U1,kBinaryType:G1,kWebSocketURL:R1}=JE(),{states:dC,opcodes:R2}=LI(),{MessageEvent:w1,ErrorEvent:M1}=b0();function L1(A){return A[pC]===dC.OPEN}function V1(A){return A[pC]===dC.CLOSING}function W1(A){return A[pC]===dC.CLOSED}function m0(A,Q,B=Event,I){let E=new B(A,I);Q.dispatchEvent(E)}function Z1(A,Q,B){if(A[pC]!==dC.OPEN)return;let I;if(Q===R2.TEXT)try{I=new TextDecoder("utf-8",{fatal:!0}).decode(B)}catch{w2(A,"Received invalid UTF-8 in text frame.");return}else if(Q===R2.BINARY)if(A[G1]==="blob")I=new Blob([B]);else I=new Uint8Array(B).buffer;m0("message",A,w1,{origin:A[R1].origin,data:I})}function X1(A){if(A.length===0)return!1;for(let Q of A){let B=Q.charCodeAt(0);if(B<33||B>126||Q==="("||Q===")"||Q==="<"||Q===">"||Q==="@"||Q===","||Q===";"||Q===":"||Q==="\\"||Q==='"'||Q==="/"||Q==="["||Q==="]"||Q==="?"||Q==="="||Q==="{"||Q==="}"||B===32||B===9)return!1}return!0}function S1(A){if(A>=1000&&A<1015)return A!==1004&&A!==1005&&A!==1006;return A>=3000&&A<=4999}function w2(A,Q){let{[J1]:B,[U1]:I}=A;if(B.abort(),I?.socket&&!I.socket.destroyed)I.socket.destroy();if(Q)m0("error",A,M1,{error:new Error(Q)})}M2.exports={isEstablished:L1,isClosing:V1,isClosed:W1,fireEvent:m0,isValidSubprotocol:X1,isValidStatusCode:S1,failWebsocketConnection:w2,websocketMessageReceived:Z1}});var S2=L((kH,X2)=>{var u0=G("diagnostics_channel"),{uid:K1,states:V2}=LI(),{kReadyState:W2,kSentClose:L2,kByteParser:Z2,kReceivedClose:z1}=JE(),{fireEvent:H1,failWebsocketConnection:OB}=lC(),{CloseEvent:x1}=b0(),{makeRequest:h1}=CE(),{fetching:T1}=qC(),{Headers:j1}=$B(),{getGlobalDispatcher:$1}=DI(),{kHeadersList:y1}=o(),aQ={};aQ.open=u0.channel("undici:websocket:open");aQ.close=u0.channel("undici:websocket:close");aQ.socketError=u0.channel("undici:websocket:socket_error");var c0;try{c0=G("crypto")}catch{}function q1(A,Q,B,I,E){let C=A;C.protocol=A.protocol==="ws:"?"http:":"https:";let g=h1({urlList:[C],serviceWorkers:"none",referrer:"no-referrer",mode:"websocket",credentials:"include",cache:"no-store",redirect:"error"});if(E.headers){let N=new j1(E.headers)[y1];g.headersList=N}let D=c0.randomBytes(16).toString("base64");g.headersList.append("sec-websocket-key",D),g.headersList.append("sec-websocket-version","13");for(let N of Q)g.headersList.append("sec-websocket-protocol",N);let F="";return T1({request:g,useParallelQueue:!0,dispatcher:E.dispatcher??$1(),processResponse(N){if(N.type==="error"||N.status!==101){OB(B,"Received network error or non-101 status code.");return}if(Q.length!==0&&!N.headersList.get("Sec-WebSocket-Protocol")){OB(B,"Server did not respond with sent protocols.");return}if(N.headersList.get("Upgrade")?.toLowerCase()!=="websocket"){OB(B,'Server did not set Upgrade header to "websocket".');return}if(N.headersList.get("Connection")?.toLowerCase()!=="upgrade"){OB(B,'Server did not set Connection header to "upgrade".');return}let J=N.headersList.get("Sec-WebSocket-Accept"),U=c0.createHash("sha1").update(D+K1).digest("base64");if(J!==U){OB(B,"Incorrect hash received in Sec-WebSocket-Accept header.");return}let R=N.headersList.get("Sec-WebSocket-Extensions");if(R!==null&&R!==F){OB(B,"Received different permessage-deflate than the one set.");return}let w=N.headersList.get("Sec-WebSocket-Protocol");if(w!==null&&w!==g.headersList.get("Sec-WebSocket-Protocol")){OB(B,"Protocol was not set in the opening handshake.");return}if(N.socket.on("data",O1),N.socket.on("close",P1),N.socket.on("error",k1),aQ.open.hasSubscribers)aQ.open.publish({address:N.socket.address(),protocol:w,extensions:R});I(N)}})}function O1(A){if(!this.ws[Z2].write(A))this.pause()}function P1(){let{ws:A}=this,Q=A[L2]&&A[z1],B=1005,I="",E=A[Z2].closingInfo;if(E)B=E.code??1005,I=E.reason;else if(!A[L2])B=1006;if(A[W2]=V2.CLOSED,H1("close",A,x1,{wasClean:Q,code:B,reason:I}),aQ.close.hasSubscribers)aQ.close.publish({websocket:A,code:B,reason:I})}function k1(A){let{ws:Q}=this;if(Q[W2]=V2.CLOSING,aQ.socketError.hasSubscribers)aQ.socketError.publish(A);this.destroy()}X2.exports={establishWebSocketConnection:q1}});var p0=L((_H,H2)=>{var{maxUnsigned16Bit:_1}=LI(),K2;try{K2=G("crypto")}catch{}class z2{constructor(A){this.frameData=A,this.maskKey=K2.randomBytes(4)}createFrame(A){let Q=this.frameData?.byteLength??0,B=Q,I=6;if(Q>_1)I+=8,B=127;else if(Q>125)I+=2,B=126;let E=Buffer.allocUnsafe(Q+I);E[0]=E[1]=0,E[0]|=128,E[0]=(E[0]&240)+A;/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */if(E[I-4]=this.maskKey[0],E[I-3]=this.maskKey[1],E[I-2]=this.maskKey[2],E[I-1]=this.maskKey[3],E[1]=B,B===126)E.writeUInt16BE(Q,2);else if(B===127)E[2]=E[3]=0,E.writeUIntBE(Q,4,6);E[1]|=128;for(let C=0;C<Q;C++)E[I+C]=this.frameData[C]^this.maskKey[C%4];return E}}H2.exports={WebsocketFrameSend:z2}});var P2=L((fH,O2)=>{var{Writable:f1}=G("stream"),y2=G("diagnostics_channel"),{parserStates:YQ,opcodes:JQ,states:v1,emptyBuffer:b1}=LI(),{kReadyState:m1,kSentClose:x2,kResponse:h2,kReceivedClose:T2}=JE(),{isValidStatusCode:j2,failWebsocketConnection:UE,websocketMessageReceived:c1}=lC(),{WebsocketFrameSend:$2}=p0(),WI={};WI.ping=y2.channel("undici:websocket:ping");WI.pong=y2.channel("undici:websocket:pong");class q2 extends f1{#A=[];#B=0;#I=YQ.INFO;#Q={};#E=[];constructor(A){super();this.ws=A}_write(A,Q,B){this.#A.push(A),this.#B+=A.length,this.run(B)}run(A){while(!0){if(this.#I===YQ.INFO){if(this.#B<2)return A();let Q=this.consume(2);if(this.#Q.fin=(Q[0]&128)!==0,this.#Q.opcode=Q[0]&15,this.#Q.originalOpcode??=this.#Q.opcode,this.#Q.fragmented=!this.#Q.fin&&this.#Q.opcode!==JQ.CONTINUATION,this.#Q.fragmented&&this.#Q.opcode!==JQ.BINARY&&this.#Q.opcode!==JQ.TEXT){UE(this.ws,"Invalid frame type was fragmented.");return}let B=Q[1]&127;if(B<=125)this.#Q.payloadLength=B,this.#I=YQ.READ_DATA;else if(B===126)this.#I=YQ.PAYLOADLENGTH_16;else if(B===127)this.#I=YQ.PAYLOADLENGTH_64;if(this.#Q.fragmented&&B>125){UE(this.ws,"Fragmented frame exceeded 125 bytes.");return}else if((this.#Q.opcode===JQ.PING||this.#Q.opcode===JQ.PONG||this.#Q.opcode===JQ.CLOSE)&&B>125){UE(this.ws,"Payload length for control frame exceeded 125 bytes.");return}else if(this.#Q.opcode===JQ.CLOSE){if(B===1){UE(this.ws,"Received close frame with a 1-byte body.");return}let I=this.consume(B);if(this.#Q.closeInfo=this.parseCloseBody(!1,I),!this.ws[x2]){let E=Buffer.allocUnsafe(2);E.writeUInt16BE(this.#Q.closeInfo.code,0);let C=new $2(E);this.ws[h2].socket.write(C.createFrame(JQ.CLOSE),(g)=>{if(!g)this.ws[x2]=!0})}this.ws[m1]=v1.CLOSING,this.ws[T2]=!0,this.end();return}else if(this.#Q.opcode===JQ.PING){let I=this.consume(B);if(!this.ws[T2]){let E=new $2(I);if(this.ws[h2].socket.write(E.createFrame(JQ.PONG)),WI.ping.hasSubscribers)WI.ping.publish({payload:I})}if(this.#I=YQ.INFO,this.#B>0)continue;else{A();return}}else if(this.#Q.opcode===JQ.PONG){let I=this.consume(B);if(WI.pong.hasSubscribers)WI.pong.publish({payload:I});if(this.#B>0)continue;else{A();return}}}else if(this.#I===YQ.PAYLOADLENGTH_16){if(this.#B<2)return A();let Q=this.consume(2);this.#Q.payloadLength=Q.readUInt16BE(0),this.#I=YQ.READ_DATA}else if(this.#I===YQ.PAYLOADLENGTH_64){if(this.#B<8)return A();let Q=this.consume(8),B=Q.readUInt32BE(0);if(B>2147483647){UE(this.ws,"Received payload length > 2^31 bytes.");return}let I=Q.readUInt32BE(4);this.#Q.payloadLength=(B<<8)+I,this.#I=YQ.READ_DATA}else if(this.#I===YQ.READ_DATA){if(this.#B<this.#Q.payloadLength)return A();else if(this.#B>=this.#Q.payloadLength){let Q=this.consume(this.#Q.payloadLength);if(this.#E.push(Q),!this.#Q.fragmented||this.#Q.fin&&this.#Q.opcode===JQ.CONTINUATION){let B=Buffer.concat(this.#E);c1(this.ws,this.#Q.originalOpcode,B),this.#Q={},this.#E.length=0}this.#I=YQ.INFO}}if(this.#B>0)continue;else{A();break}}}consume(A){if(A>this.#B)return null;else if(A===0)return b1;if(this.#A[0].length===A)return this.#B-=this.#A[0].length,this.#A.shift();let Q=Buffer.allocUnsafe(A),B=0;while(B!==A){let I=this.#A[0],{length:E}=I;if(E+B===A){Q.set(this.#A.shift(),B);break}else if(E+B>A){Q.set(I.subarray(0,A-B),B),this.#A[0]=I.subarray(A-B);break}else Q.set(this.#A.shift(),B),B+=I.length}return this.#B-=A,Q}parseCloseBody(A,Q){let B;if(Q.length>=2)B=Q.readUInt16BE(0);if(A){if(!j2(B))return null;return{code:B}}let I=Q.subarray(2);if(I[0]===239&&I[1]===187&&I[2]===191)I=I.subarray(3);if(B!==void 0&&!j2(B))return null;try{I=new TextDecoder("utf-8",{fatal:!0}).decode(I)}catch{return null}return{code:B,reason:I}}get closingInfo(){return this.#Q.closeInfo}}O2.exports={ByteParser:q2}});var u2=L((vH,c2)=>{var{webidl:j}=HA(),{DOMException:GB}=BB(),{URLSerializer:u1}=MQ(),{getGlobalOrigin:p1}=cB(),{staticPropertyDescriptors:RB,states:ZI,opcodes:GE,emptyBuffer:d1}=LI(),{kWebSocketURL:k2,kReadyState:sQ,kController:l1,kBinaryType:iC,kResponse:nC,kSentClose:i1,kByteParser:n1}=JE(),{isEstablished:_2,isClosing:f2,isValidSubprotocol:o1,failWebsocketConnection:a1,fireEvent:s1}=lC(),{establishWebSocketConnection:r1}=S2(),{WebsocketFrameSend:RE}=p0(),{ByteParser:t1}=P2(),{kEnumerableProperty:UQ,isBlobLike:b2}=f(),{getGlobalDispatcher:e1}=DI(),{types:m2}=G("util"),v2=!1;class _ extends EventTarget{#A={open:null,error:null,close:null,message:null};#B=0;#I="";#Q="";constructor(A,Q=[]){super();if(j.argumentLengthCheck(arguments,1,{header:"WebSocket constructor"}),!v2)v2=!0,process.emitWarning("WebSockets are experimental, expect them to change at any time.",{code:"UNDICI-WS"});let B=j.converters["DOMString or sequence<DOMString> or WebSocketInit"](Q);A=j.converters.USVString(A),Q=B.protocols;let I=p1(),E;try{E=new URL(A,I)}catch(C){throw new GB(C,"SyntaxError")}if(E.protocol==="http:")E.protocol="ws:";else if(E.protocol==="https:")E.protocol="wss:";if(E.protocol!=="ws:"&&E.protocol!=="wss:")throw new GB(`Expected a ws: or wss: protocol, got ${E.protocol}`,"SyntaxError");if(E.hash||E.href.endsWith("#"))throw new GB("Got fragment","SyntaxError");if(typeof Q==="string")Q=[Q];if(Q.length!==new Set(Q.map((C)=>C.toLowerCase())).size)throw new GB("Invalid Sec-WebSocket-Protocol value","SyntaxError");if(Q.length>0&&!Q.every((C)=>o1(C)))throw new GB("Invalid Sec-WebSocket-Protocol value","SyntaxError");this[k2]=new URL(E.href),this[l1]=r1(E,Q,this,(C)=>this.#E(C),B),this[sQ]=_.CONNECTING,this[iC]="blob"}close(A=void 0,Q=void 0){if(j.brandCheck(this,_),A!==void 0)A=j.converters["unsigned short"](A,{clamp:!0});if(Q!==void 0)Q=j.converters.USVString(Q);if(A!==void 0){if(A!==1000&&(A<3000||A>4999))throw new GB("invalid code","InvalidAccessError")}let B=0;if(Q!==void 0){if(B=Buffer.byteLength(Q),B>123)throw new GB(`Reason must be less than 123 bytes; received ${B}`,"SyntaxError")}if(this[sQ]===_.CLOSING||this[sQ]===_.CLOSED);else if(!_2(this))a1(this,"Connection was closed before it was established."),this[sQ]=_.CLOSING;else if(!f2(this)){let I=new RE;if(A!==void 0&&Q===void 0)I.frameData=Buffer.allocUnsafe(2),I.frameData.writeUInt16BE(A,0);else if(A!==void 0&&Q!==void 0)I.frameData=Buffer.allocUnsafe(2+B),I.frameData.writeUInt16BE(A,0),I.frameData.write(Q,2,"utf-8");else I.frameData=d1;this[nC].socket.write(I.createFrame(GE.CLOSE),(C)=>{if(!C)this[i1]=!0}),this[sQ]=ZI.CLOSING}else this[sQ]=_.CLOSING}send(A){if(j.brandCheck(this,_),j.argumentLengthCheck(arguments,1,{header:"WebSocket.send"}),A=j.converters.WebSocketSendData(A),this[sQ]===_.CONNECTING)throw new GB("Sent before connected.","InvalidStateError");if(!_2(this)||f2(this))return;let Q=this[nC].socket;if(typeof A==="string"){let B=Buffer.from(A),E=new RE(B).createFrame(GE.TEXT);this.#B+=B.byteLength,Q.write(E,()=>{this.#B-=B.byteLength})}else if(m2.isArrayBuffer(A)){let B=Buffer.from(A),E=new RE(B).createFrame(GE.BINARY);this.#B+=B.byteLength,Q.write(E,()=>{this.#B-=B.byteLength})}else if(ArrayBuffer.isView(A)){let B=Buffer.from(A,A.byteOffset,A.byteLength),E=new RE(B).createFrame(GE.BINARY);this.#B+=B.byteLength,Q.write(E,()=>{this.#B-=B.byteLength})}else if(b2(A)){let B=new RE;A.arrayBuffer().then((I)=>{let E=Buffer.from(I);B.frameData=E;let C=B.createFrame(GE.BINARY);this.#B+=E.byteLength,Q.write(C,()=>{this.#B-=E.byteLength})})}}get readyState(){return j.brandCheck(this,_),this[sQ]}get bufferedAmount(){return j.brandCheck(this,_),this.#B}get url(){return j.brandCheck(this,_),u1(this[k2])}get extensions(){return j.brandCheck(this,_),this.#Q}get protocol(){return j.brandCheck(this,_),this.#I}get onopen(){return j.brandCheck(this,_),this.#A.open}set onopen(A){if(j.brandCheck(this,_),this.#A.open)this.removeEventListener("open",this.#A.open);if(typeof A==="function")this.#A.open=A,this.addEventListener("open",A);else this.#A.open=null}get onerror(){return j.brandCheck(this,_),this.#A.error}set onerror(A){if(j.brandCheck(this,_),this.#A.error)this.removeEventListener("error",this.#A.error);if(typeof A==="function")this.#A.error=A,this.addEventListener("error",A);else this.#A.error=null}get onclose(){return j.brandCheck(this,_),this.#A.close}set onclose(A){if(j.brandCheck(this,_),this.#A.close)this.removeEventListener("close",this.#A.close);if(typeof A==="function")this.#A.close=A,this.addEventListener("close",A);else this.#A.close=null}get onmessage(){return j.brandCheck(this,_),this.#A.message}set onmessage(A){if(j.brandCheck(this,_),this.#A.message)this.removeEventListener("message",this.#A.message);if(typeof A==="function")this.#A.message=A,this.addEventListener("message",A);else this.#A.message=null}get binaryType(){return j.brandCheck(this,_),this[iC]}set binaryType(A){if(j.brandCheck(this,_),A!=="blob"&&A!=="arraybuffer")this[iC]="blob";else this[iC]=A}#E(A){this[nC]=A;let Q=new t1(this);Q.on("drain",function E(){this.ws[nC].socket.resume()}),A.socket.ws=this,this[n1]=Q,this[sQ]=ZI.OPEN;let B=A.headersList.get("sec-websocket-extensions");if(B!==null)this.#Q=B;let I=A.headersList.get("sec-websocket-protocol");if(I!==null)this.#I=I;s1("open",this)}}_.CONNECTING=_.prototype.CONNECTING=ZI.CONNECTING;_.OPEN=_.prototype.OPEN=ZI.OPEN;_.CLOSING=_.prototype.CLOSING=ZI.CLOSING;_.CLOSED=_.prototype.CLOSED=ZI.CLOSED;Object.defineProperties(_.prototype,{CONNECTING:RB,OPEN:RB,CLOSING:RB,CLOSED:RB,url:UQ,readyState:UQ,bufferedAmount:UQ,onopen:UQ,onerror:UQ,onclose:UQ,close:UQ,onmessage:UQ,binaryType:UQ,send:UQ,extensions:UQ,protocol:UQ,[Symbol.toStringTag]:{value:"WebSocket",writable:!1,enumerable:!1,configurable:!0}});Object.defineProperties(_,{CONNECTING:RB,OPEN:RB,CLOSING:RB,CLOSED:RB});j.converters["sequence<DOMString>"]=j.sequenceConverter(j.converters.DOMString);j.converters["DOMString or sequence<DOMString>"]=function(A){if(j.util.Type(A)==="Object"&&Symbol.iterator in A)return j.converters["sequence<DOMString>"](A);return j.converters.DOMString(A)};j.converters.WebSocketInit=j.dictionaryConverter([{key:"protocols",converter:j.converters["DOMString or sequence<DOMString>"],get defaultValue(){return[]}},{key:"dispatcher",converter:(A)=>A,get defaultValue(){return e1()}},{key:"headers",converter:j.nullableConverter(j.converters.HeadersInit)}]);j.converters["DOMString or sequence<DOMString> or WebSocketInit"]=function(A){if(j.util.Type(A)==="Object"&&!(Symbol.iterator in A))return j.converters.WebSocketInit(A);return{protocols:j.converters["DOMString or sequence<DOMString>"](A)}};j.converters.WebSocketSendData=function(A){if(j.util.Type(A)==="Object"){if(b2(A))return j.converters.Blob(A,{strict:!1});if(ArrayBuffer.isView(A)||m2.isAnyArrayBuffer(A))return j.converters.BufferSource(A)}return j.converters.USVString(A)};c2.exports={WebSocket:_}});var i2=L((w8,y)=>{var A8=lI(),p2=bE(),d2=d(),Q8=eB(),B8=uJ(),I8=aI(),PB=f(),{InvalidArgumentError:oC}=d2,XI=mU(),E8=fI(),C8=C0(),g8=hG(),D8=D0(),F8=aD(),N8=PG(),Y8=bG(),{getGlobalDispatcher:l2,setGlobalDispatcher:J8}=DI(),U8=lG(),G8=RD(),R8=pE(),d0;try{G("crypto"),d0=!0}catch{d0=!1}Object.assign(p2.prototype,XI);w8.Dispatcher=p2;w8.Client=A8;w8.Pool=Q8;w8.BalancedPool=B8;w8.Agent=I8;w8.ProxyAgent=N8;w8.RetryHandler=Y8;w8.DecoratorHandler=U8;w8.RedirectHandler=G8;w8.createRedirectInterceptor=R8;w8.buildConnector=E8;w8.errors=d2;function wE(A){return(Q,B,I)=>{if(typeof B==="function")I=B,B=null;if(!Q||typeof Q!=="string"&&typeof Q!=="object"&&!(Q instanceof URL))throw new oC("invalid url");if(B!=null&&typeof B!=="object")throw new oC("invalid opts");if(B&&B.path!=null){if(typeof B.path!=="string")throw new oC("invalid opts.path");let g=B.path;if(!B.path.startsWith("/"))g=`/${g}`;Q=new URL(PB.parseOrigin(Q).origin+g)}else{if(!B)B=typeof Q==="object"?Q:{};Q=PB.parseURL(Q)}let{agent:E,dispatcher:C=l2()}=B;if(E)throw new oC("unsupported opts.agent. Did you mean opts.client?");return A.call(C,{...B,origin:Q.origin,path:Q.search?`${Q.pathname}${Q.search}`:Q.pathname,method:B.method||(B.body?"PUT":"GET")},I)}}w8.setGlobalDispatcher=J8;w8.getGlobalDispatcher=l2;if(PB.nodeMajor>16||PB.nodeMajor===16&&PB.nodeMinor>=8){let A=null;w8.fetch=async function C(g){if(!A)A=qC().fetch;try{return await A(...arguments)}catch(D){if(typeof D==="object")Error.captureStackTrace(D,this);throw D}},w8.Headers=$B().Headers,w8.Response=XC().Response,w8.Request=CE().Request,w8.FormData=kE().FormData,w8.File=OE().File,w8.FileReader=cR().FileReader;let{setGlobalOrigin:Q,getGlobalOrigin:B}=cB();w8.setGlobalOrigin=Q,w8.getGlobalOrigin=B;let{CacheStorage:I}=eR(),{kConstruct:E}=_C();w8.caches=new I(E)}if(PB.nodeMajor>=16){let{deleteCookie:A,getCookies:Q,getSetCookies:B,setCookie:I}=Y2();w8.deleteCookie=A,w8.getCookies=Q,w8.getSetCookies=B,w8.setCookie=I;let{parseMIMEType:E,serializeAMimeType:C}=MQ();w8.parseMIMEType=E,w8.serializeAMimeType=C}if(PB.nodeMajor>=18&&d0){let{WebSocket:A}=u2();w8.WebSocket=A}w8.request=wE(XI.request);w8.stream=wE(XI.stream);w8.pipeline=wE(XI.pipeline);w8.connect=wE(XI.connect);w8.upgrade=wE(XI.upgrade);w8.MockClient=C8;w8.MockPool=D8;w8.MockAgent=g8;w8.mockErrors=F8});var a2=L((s)=>{var b8=s&&s.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;var E=Object.getOwnPropertyDescriptor(Q,B);if(!E||("get"in E?!Q.__esModule:E.writable||E.configurable))E={enumerable:!0,get:function(){return Q[B]}};Object.defineProperty(A,I,E)}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),m8=s&&s.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),rC=s&&s.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.prototype.hasOwnProperty.call(A,B))b8(Q,A,B)}return m8(Q,A),Q},gA=s&&s.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})};Object.defineProperty(s,"__esModule",{value:!0});s.HttpClient=s.isHttps=s.HttpClientResponse=s.HttpClientError=s.getProxyUrl=s.MediaTypes=s.Headers=s.HttpCodes=void 0;var l0=rC(G("http")),n2=rC(G("https")),i0=rC(MF()),aC=rC(ZF()),c8=i2(),GQ;(function(A){A[A.OK=200]="OK",A[A.MultipleChoices=300]="MultipleChoices",A[A.MovedPermanently=301]="MovedPermanently",A[A.ResourceMoved=302]="ResourceMoved",A[A.SeeOther=303]="SeeOther",A[A.NotModified=304]="NotModified",A[A.UseProxy=305]="UseProxy",A[A.SwitchProxy=306]="SwitchProxy",A[A.TemporaryRedirect=307]="TemporaryRedirect",A[A.PermanentRedirect=308]="PermanentRedirect",A[A.BadRequest=400]="BadRequest",A[A.Unauthorized=401]="Unauthorized",A[A.PaymentRequired=402]="PaymentRequired",A[A.Forbidden=403]="Forbidden",A[A.NotFound=404]="NotFound",A[A.MethodNotAllowed=405]="MethodNotAllowed",A[A.NotAcceptable=406]="NotAcceptable",A[A.ProxyAuthenticationRequired=407]="ProxyAuthenticationRequired",A[A.RequestTimeout=408]="RequestTimeout",A[A.Conflict=409]="Conflict",A[A.Gone=410]="Gone",A[A.TooManyRequests=429]="TooManyRequests",A[A.InternalServerError=500]="InternalServerError",A[A.NotImplemented=501]="NotImplemented",A[A.BadGateway=502]="BadGateway",A[A.ServiceUnavailable=503]="ServiceUnavailable",A[A.GatewayTimeout=504]="GatewayTimeout"})(GQ||(s.HttpCodes=GQ={}));var zA;(function(A){A.Accept="accept",A.ContentType="content-type"})(zA||(s.Headers=zA={}));var rQ;(function(A){A.ApplicationJson="application/json"})(rQ||(s.MediaTypes=rQ={}));function u8(A){let Q=i0.getProxyUrl(new URL(A));return Q?Q.href:""}s.getProxyUrl=u8;var p8=[GQ.MovedPermanently,GQ.ResourceMoved,GQ.SeeOther,GQ.TemporaryRedirect,GQ.PermanentRedirect],d8=[GQ.BadGateway,GQ.ServiceUnavailable,GQ.GatewayTimeout],l8=["OPTIONS","GET","DELETE","HEAD"],i8=10,n8=5;class tC extends Error{constructor(A,Q){super(A);this.name="HttpClientError",this.statusCode=Q,Object.setPrototypeOf(this,tC.prototype)}}s.HttpClientError=tC;class n0{constructor(A){this.message=A}readBody(){return gA(this,void 0,void 0,function*(){return new Promise((A)=>gA(this,void 0,void 0,function*(){let Q=Buffer.alloc(0);this.message.on("data",(B)=>{Q=Buffer.concat([Q,B])}),this.message.on("end",()=>{A(Q.toString())})}))})}readBodyBuffer(){return gA(this,void 0,void 0,function*(){return new Promise((A)=>gA(this,void 0,void 0,function*(){let Q=[];this.message.on("data",(B)=>{Q.push(B)}),this.message.on("end",()=>{A(Buffer.concat(Q))})}))})}}s.HttpClientResponse=n0;function o8(A){return new URL(A).protocol==="https:"}s.isHttps=o8;class o2{constructor(A,Q,B){if(this._ignoreSslError=!1,this._allowRedirects=!0,this._allowRedirectDowngrade=!1,this._maxRedirects=50,this._allowRetries=!1,this._maxRetries=1,this._keepAlive=!1,this._disposed=!1,this.userAgent=A,this.handlers=Q||[],this.requestOptions=B,B){if(B.ignoreSslError!=null)this._ignoreSslError=B.ignoreSslError;if(this._socketTimeout=B.socketTimeout,B.allowRedirects!=null)this._allowRedirects=B.allowRedirects;if(B.allowRedirectDowngrade!=null)this._allowRedirectDowngrade=B.allowRedirectDowngrade;if(B.maxRedirects!=null)this._maxRedirects=Math.max(B.maxRedirects,0);if(B.keepAlive!=null)this._keepAlive=B.keepAlive;if(B.allowRetries!=null)this._allowRetries=B.allowRetries;if(B.maxRetries!=null)this._maxRetries=B.maxRetries}}options(A,Q){return gA(this,void 0,void 0,function*(){return this.request("OPTIONS",A,null,Q||{})})}get(A,Q){return gA(this,void 0,void 0,function*(){return this.request("GET",A,null,Q||{})})}del(A,Q){return gA(this,void 0,void 0,function*(){return this.request("DELETE",A,null,Q||{})})}post(A,Q,B){return gA(this,void 0,void 0,function*(){return this.request("POST",A,Q,B||{})})}patch(A,Q,B){return gA(this,void 0,void 0,function*(){return this.request("PATCH",A,Q,B||{})})}put(A,Q,B){return gA(this,void 0,void 0,function*(){return this.request("PUT",A,Q,B||{})})}head(A,Q){return gA(this,void 0,void 0,function*(){return this.request("HEAD",A,null,Q||{})})}sendStream(A,Q,B,I){return gA(this,void 0,void 0,function*(){return this.request(A,Q,B,I)})}getJson(A,Q={}){return gA(this,void 0,void 0,function*(){Q[zA.Accept]=this._getExistingOrDefaultHeader(Q,zA.Accept,rQ.ApplicationJson);let B=yield this.get(A,Q);return this._processResponse(B,this.requestOptions)})}postJson(A,Q,B={}){return gA(this,void 0,void 0,function*(){let I=JSON.stringify(Q,null,2);B[zA.Accept]=this._getExistingOrDefaultHeader(B,zA.Accept,rQ.ApplicationJson),B[zA.ContentType]=this._getExistingOrDefaultHeader(B,zA.ContentType,rQ.ApplicationJson);let E=yield this.post(A,I,B);return this._processResponse(E,this.requestOptions)})}putJson(A,Q,B={}){return gA(this,void 0,void 0,function*(){let I=JSON.stringify(Q,null,2);B[zA.Accept]=this._getExistingOrDefaultHeader(B,zA.Accept,rQ.ApplicationJson),B[zA.ContentType]=this._getExistingOrDefaultHeader(B,zA.ContentType,rQ.ApplicationJson);let E=yield this.put(A,I,B);return this._processResponse(E,this.requestOptions)})}patchJson(A,Q,B={}){return gA(this,void 0,void 0,function*(){let I=JSON.stringify(Q,null,2);B[zA.Accept]=this._getExistingOrDefaultHeader(B,zA.Accept,rQ.ApplicationJson),B[zA.ContentType]=this._getExistingOrDefaultHeader(B,zA.ContentType,rQ.ApplicationJson);let E=yield this.patch(A,I,B);return this._processResponse(E,this.requestOptions)})}request(A,Q,B,I){return gA(this,void 0,void 0,function*(){if(this._disposed)throw new Error("Client has already been disposed.");let E=new URL(Q),C=this._prepareRequest(A,E,I),g=this._allowRetries&&l8.includes(A)?this._maxRetries+1:1,D=0,F;do{if(F=yield this.requestRaw(C,B),F&&F.message&&F.message.statusCode===GQ.Unauthorized){let N;for(let J of this.handlers)if(J.canHandleAuthentication(F)){N=J;break}if(N)return N.handleAuthentication(this,C,B);else return F}let Y=this._maxRedirects;while(F.message.statusCode&&p8.includes(F.message.statusCode)&&this._allowRedirects&&Y>0){let N=F.message.headers.location;if(!N)break;let J=new URL(N);if(E.protocol==="https:"&&E.protocol!==J.protocol&&!this._allowRedirectDowngrade)throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");if(yield F.readBody(),J.hostname!==E.hostname){for(let U in I)if(U.toLowerCase()==="authorization")delete I[U]}C=this._prepareRequest(A,J,I),F=yield this.requestRaw(C,B),Y--}if(!F.message.statusCode||!d8.includes(F.message.statusCode))return F;if(D+=1,D<g)yield F.readBody(),yield this._performExponentialBackoff(D)}while(D<g);return F})}dispose(){if(this._agent)this._agent.destroy();this._disposed=!0}requestRaw(A,Q){return gA(this,void 0,void 0,function*(){return new Promise((B,I)=>{function E(C,g){if(C)I(C);else if(!g)I(new Error("Unknown error"));else B(g)}this.requestRawWithCallback(A,Q,E)})})}requestRawWithCallback(A,Q,B){if(typeof Q==="string"){if(!A.options.headers)A.options.headers={};A.options.headers["Content-Length"]=Buffer.byteLength(Q,"utf8")}let I=!1;function E(D,F){if(!I)I=!0,B(D,F)}let C=A.httpModule.request(A.options,(D)=>{let F=new n0(D);E(void 0,F)}),g;if(C.on("socket",(D)=>{g=D}),C.setTimeout(this._socketTimeout||180000,()=>{if(g)g.end();E(new Error(`Request timeout: ${A.options.path}`))}),C.on("error",function(D){E(D)}),Q&&typeof Q==="string")C.write(Q,"utf8");if(Q&&typeof Q!=="string")Q.on("close",function(){C.end()}),Q.pipe(C);else C.end()}getAgent(A){let Q=new URL(A);return this._getAgent(Q)}getAgentDispatcher(A){let Q=new URL(A),B=i0.getProxyUrl(Q);if(!(B&&B.hostname))return;return this._getProxyAgentDispatcher(Q,B)}_prepareRequest(A,Q,B){let I={};I.parsedUrl=Q;let E=I.parsedUrl.protocol==="https:";I.httpModule=E?n2:l0;let C=E?443:80;if(I.options={},I.options.host=I.parsedUrl.hostname,I.options.port=I.parsedUrl.port?parseInt(I.parsedUrl.port):C,I.options.path=(I.parsedUrl.pathname||"")+(I.parsedUrl.search||""),I.options.method=A,I.options.headers=this._mergeHeaders(B),this.userAgent!=null)I.options.headers["user-agent"]=this.userAgent;if(I.options.agent=this._getAgent(I.parsedUrl),this.handlers)for(let g of this.handlers)g.prepareRequest(I.options);return I}_mergeHeaders(A){if(this.requestOptions&&this.requestOptions.headers)return Object.assign({},sC(this.requestOptions.headers),sC(A||{}));return sC(A||{})}_getExistingOrDefaultHeader(A,Q,B){let I;if(this.requestOptions&&this.requestOptions.headers)I=sC(this.requestOptions.headers)[Q];return A[Q]||I||B}_getAgent(A){let Q,B=i0.getProxyUrl(A),I=B&&B.hostname;if(this._keepAlive&&I)Q=this._proxyAgent;if(!I)Q=this._agent;if(Q)return Q;let E=A.protocol==="https:",C=100;if(this.requestOptions)C=this.requestOptions.maxSockets||l0.globalAgent.maxSockets;if(B&&B.hostname){let g={maxSockets:C,keepAlive:this._keepAlive,proxy:Object.assign(Object.assign({},(B.username||B.password)&&{proxyAuth:`${B.username}:${B.password}`}),{host:B.hostname,port:B.port})},D,F=B.protocol==="https:";if(E)D=F?aC.httpsOverHttps:aC.httpsOverHttp;else D=F?aC.httpOverHttps:aC.httpOverHttp;Q=D(g),this._proxyAgent=Q}if(!Q){let g={keepAlive:this._keepAlive,maxSockets:C};Q=E?new n2.Agent(g):new l0.Agent(g),this._agent=Q}if(E&&this._ignoreSslError)Q.options=Object.assign(Q.options||{},{rejectUnauthorized:!1});return Q}_getProxyAgentDispatcher(A,Q){let B;if(this._keepAlive)B=this._proxyAgentDispatcher;if(B)return B;let I=A.protocol==="https:";if(B=new c8.ProxyAgent(Object.assign({uri:Q.href,pipelining:!this._keepAlive?0:1},(Q.username||Q.password)&&{token:`Basic ${Buffer.from(`${Q.username}:${Q.password}`).toString("base64")}`})),this._proxyAgentDispatcher=B,I&&this._ignoreSslError)B.options=Object.assign(B.options.requestTls||{},{rejectUnauthorized:!1});return B}_performExponentialBackoff(A){return gA(this,void 0,void 0,function*(){A=Math.min(i8,A);let Q=n8*Math.pow(2,A);return new Promise((B)=>setTimeout(()=>B(),Q))})}_processResponse(A,Q){return gA(this,void 0,void 0,function*(){return new Promise((B,I)=>gA(this,void 0,void 0,function*(){let E=A.message.statusCode||0,C={statusCode:E,result:null,headers:{}};if(E===GQ.NotFound)B(C);function g(Y,N){if(typeof N==="string"){let J=new Date(N);if(!isNaN(J.valueOf()))return J}return N}let D,F;try{if(F=yield A.readBody(),F&&F.length>0){if(Q&&Q.deserializeDates)D=JSON.parse(F,g);else D=JSON.parse(F);C.result=D}C.headers=A.message.headers}catch(Y){}if(E>299){let Y;if(D&&D.message)Y=D.message;else if(F&&F.length>0)Y=F;else Y=`Failed request: (${E})`;let N=new tC(Y,E);N.result=C.result,I(N)}else B(C)}))})}}s.HttpClient=o2;var sC=(A)=>Object.keys(A).reduce((Q,B)=>(Q[B.toLowerCase()]=A[B],Q),{})});var e2=L((_Q)=>{var o0=_Q&&_Q.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})};Object.defineProperty(_Q,"__esModule",{value:!0});_Q.PersonalAccessTokenCredentialHandler=_Q.BearerCredentialHandler=_Q.BasicCredentialHandler=void 0;class s2{constructor(A,Q){this.username=A,this.password=Q}prepareRequest(A){if(!A.headers)throw Error("The request has no headers");A.headers.Authorization=`Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`}canHandleAuthentication(){return!1}handleAuthentication(){return o0(this,void 0,void 0,function*(){throw new Error("not implemented")})}}_Q.BasicCredentialHandler=s2;class r2{constructor(A){this.token=A}prepareRequest(A){if(!A.headers)throw Error("The request has no headers");A.headers.Authorization=`Bearer ${this.token}`}canHandleAuthentication(){return!1}handleAuthentication(){return o0(this,void 0,void 0,function*(){throw new Error("not implemented")})}}_Q.BearerCredentialHandler=r2;class t2{constructor(A){this.token=A}prepareRequest(A){if(!A.headers)throw Error("The request has no headers");A.headers.Authorization=`Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`}canHandleAuthentication(){return!1}handleAuthentication(){return o0(this,void 0,void 0,function*(){throw new Error("not implemented")})}}_Q.PersonalAccessTokenCredentialHandler=t2});var Bw=L((KI)=>{var Aw=KI&&KI.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})};Object.defineProperty(KI,"__esModule",{value:!0});KI.OidcClient=void 0;var a8=a2(),s8=e2(),Qw=Iw();class SI{static createHttpClient(A=!0,Q=10){let B={allowRetries:A,maxRetries:Q};return new a8.HttpClient("actions/oidc-client",[new s8.BearerCredentialHandler(SI.getRequestToken())],B)}static getRequestToken(){let A=process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN;if(!A)throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");return A}static getIDTokenUrl(){let A=process.env.ACTIONS_ID_TOKEN_REQUEST_URL;if(!A)throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");return A}static getCall(A){var Q;return Aw(this,void 0,void 0,function*(){let E=(Q=(yield SI.createHttpClient().getJson(A).catch((C)=>{throw new Error(`Failed to get ID Token. 
 
        Error Code : ${C.statusCode}
 
        Error Message: ${C.message}`)})).result)===null||Q===void 0?void 0:Q.value;if(!E)throw new Error("Response json body do not have ID Token field");return E})}static getIDToken(A){return Aw(this,void 0,void 0,function*(){try{let Q=SI.getIDTokenUrl();if(A){let I=encodeURIComponent(A);Q=`${Q}&audience=${I}`}Qw.debug(`ID token url is ${Q}`);let B=yield SI.getCall(Q);return Qw.setSecret(B),B}catch(Q){throw new Error(`Error message: ${Q.message}`)}})}}KI.OidcClient=SI});var r0=L((uA)=>{var a0=uA&&uA.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})};Object.defineProperty(uA,"__esModule",{value:!0});uA.summary=uA.markdownSummary=uA.SUMMARY_DOCS_URL=uA.SUMMARY_ENV_VAR=void 0;var r8=G("os"),s0=G("fs"),{access:t8,appendFile:e8,writeFile:A5}=s0.promises;uA.SUMMARY_ENV_VAR="GITHUB_STEP_SUMMARY";uA.SUMMARY_DOCS_URL="https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";class Ew{constructor(){this._buffer=""}filePath(){return a0(this,void 0,void 0,function*(){if(this._filePath)return this._filePath;let A=process.env[uA.SUMMARY_ENV_VAR];if(!A)throw new Error(`Unable to find environment variable for $${uA.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);try{yield t8(A,s0.constants.R_OK|s0.constants.W_OK)}catch(Q){throw new Error(`Unable to access summary file: '${A}'. Check if the file has correct read/write permissions.`)}return this._filePath=A,this._filePath})}wrap(A,Q,B={}){let I=Object.entries(B).map(([E,C])=>` ${E}="${C}"`).join("");if(!Q)return`<${A}${I}>`;return`<${A}${I}>${Q}</${A}>`}write(A){return a0(this,void 0,void 0,function*(){let Q=!!(A===null||A===void 0?void 0:A.overwrite),B=yield this.filePath();return yield(Q?A5:e8)(B,this._buffer,{encoding:"utf8"}),this.emptyBuffer()})}clear(){return a0(this,void 0,void 0,function*(){return this.emptyBuffer().write({overwrite:!0})})}stringify(){return this._buffer}isEmptyBuffer(){return this._buffer.length===0}emptyBuffer(){return this._buffer="",this}addRaw(A,Q=!1){return this._buffer+=A,Q?this.addEOL():this}addEOL(){return this.addRaw(r8.EOL)}addCodeBlock(A,Q){let B=Object.assign({},Q&&{lang:Q}),I=this.wrap("pre",this.wrap("code",A),B);return this.addRaw(I).addEOL()}addList(A,Q=!1){let B=Q?"ol":"ul",I=A.map((C)=>this.wrap("li",C)).join(""),E=this.wrap(B,I);return this.addRaw(E).addEOL()}addTable(A){let Q=A.map((I)=>{let E=I.map((C)=>{if(typeof C==="string")return this.wrap("td",C);let{header:g,data:D,colspan:F,rowspan:Y}=C,N=g?"th":"td",J=Object.assign(Object.assign({},F&&{colspan:F}),Y&&{rowspan:Y});return this.wrap(N,D,J)}).join("");return this.wrap("tr",E)}).join(""),B=this.wrap("table",Q);return this.addRaw(B).addEOL()}addDetails(A,Q){let B=this.wrap("details",this.wrap("summary",A)+Q);return this.addRaw(B).addEOL()}addImage(A,Q,B){let{width:I,height:E}=B||{},C=Object.assign(Object.assign({},I&&{width:I}),E&&{height:E}),g=this.wrap("img",null,Object.assign({src:A,alt:Q},C));return this.addRaw(g).addEOL()}addHeading(A,Q){let B=`h${Q}`,I=["h1","h2","h3","h4","h5","h6"].includes(B)?B:"h1",E=this.wrap(I,A);return this.addRaw(E).addEOL()}addSeparator(){let A=this.wrap("hr",null);return this.addRaw(A).addEOL()}addBreak(){let A=this.wrap("br",null);return this.addRaw(A).addEOL()}addQuote(A,Q){let B=Object.assign({},Q&&{cite:Q}),I=this.wrap("blockquote",A,B);return this.addRaw(I).addEOL()}addLink(A,Q){let B=this.wrap("a",A,{href:Q});return this.addRaw(B).addEOL()}}var Cw=new Ew;uA.markdownSummary=Cw;uA.summary=Cw});var gw=L((pA)=>{var Q5=pA&&pA.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;var E=Object.getOwnPropertyDescriptor(Q,B);if(!E||("get"in E?!Q.__esModule:E.writable||E.configurable))E={enumerable:!0,get:function(){return Q[B]}};Object.defineProperty(A,I,E)}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),B5=pA&&pA.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),I5=pA&&pA.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.prototype.hasOwnProperty.call(A,B))Q5(Q,A,B)}return B5(Q,A),Q};Object.defineProperty(pA,"__esModule",{value:!0});pA.toPlatformPath=pA.toWin32Path=pA.toPosixPath=void 0;var E5=I5(G("path"));function C5(A){return A.replace(/[\\]/g,"/")}pA.toPosixPath=C5;function g5(A){return A.replace(/[/]/g,"\\")}pA.toWin32Path=g5;function D5(A){return A.replace(/[/\\]/g,E5.sep)}pA.toPlatformPath=D5});var Jw=L((dA)=>{var Y5=dA&&dA.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;Object.defineProperty(A,I,{enumerable:!0,get:function(){return Q[B]}})}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),J5=dA&&dA.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),zI=dA&&dA.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.hasOwnProperty.call(A,B))Y5(Q,A,B)}return J5(Q,A),Q},Dw=dA&&dA.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})};Object.defineProperty(dA,"__esModule",{value:!0});dA.argStringToArray=dA.ToolRunner=void 0;var eC=zI(G("os")),Nw=zI(G("events")),U5=zI(G("child_process")),G5=zI(G("path")),R5=zI(N5()),Fw=zI(F5()),w5=G("timers"),Ag=process.platform==="win32";class Yw extends Nw.EventEmitter{constructor(A,Q,B){super();if(!A)throw new Error("Parameter 'toolPath' cannot be null or empty.");this.toolPath=A,this.args=Q||[],this.options=B||{}}_debug(A){if(this.options.listeners&&this.options.listeners.debug)this.options.listeners.debug(A)}_getCommandString(A,Q){let B=this._getSpawnFileName(),I=this._getSpawnArgs(A),E=Q?"":"[command]";if(Ag)if(this._isCmdFile()){E+=B;for(let C of I)E+=` ${C}`}else if(A.windowsVerbatimArguments){E+=`"${B}"`;for(let C of I)E+=` ${C}`}else{E+=this._windowsQuoteCmdArg(B);for(let C of I)E+=` ${this._windowsQuoteCmdArg(C)}`}else{E+=B;for(let C of I)E+=` ${C}`}return E}_processLineBuffer(A,Q,B){try{let I=Q+A.toString(),E=I.indexOf(eC.EOL);while(E>-1){let C=I.substring(0,E);B(C),I=I.substring(E+eC.EOL.length),E=I.indexOf(eC.EOL)}return I}catch(I){return this._debug(`error processing line. Failed with error ${I}`),""}}_getSpawnFileName(){if(Ag){if(this._isCmdFile())return process.env.COMSPEC||"cmd.exe"}return this.toolPath}_getSpawnArgs(A){if(Ag){if(this._isCmdFile()){let Q=`/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;for(let B of this.args)Q+=" ",Q+=A.windowsVerbatimArguments?B:this._windowsQuoteCmdArg(B);return Q+='"',[Q]}}return this.args}_endsWith(A,Q){return A.endsWith(Q)}_isCmdFile(){let A=this.toolPath.toUpperCase();return this._endsWith(A,".CMD")||this._endsWith(A,".BAT")}_windowsQuoteCmdArg(A){if(!this._isCmdFile())return this._uvQuoteCmdArg(A);if(!A)return'""';let Q=[" ","\t","&","(",")","[","]","{","}","^","=",";","!","'","+",",","`","~","|","<",">",'"'],B=!1;for(let C of A)if(Q.some((g)=>g===C)){B=!0;break}if(!B)return A;let I='"',E=!0;for(let C=A.length;C>0;C--)if(I+=A[C-1],E&&A[C-1]==="\\")I+="\\";else if(A[C-1]==='"')E=!0,I+='"';else E=!1;return I+='"',I.split("").reverse().join("")}_uvQuoteCmdArg(A){if(!A)return'""';if(!A.includes(" ")&&!A.includes("\t")&&!A.includes('"'))return A;if(!A.includes('"')&&!A.includes("\\"))return`"${A}"`;let Q='"',B=!0;for(let I=A.length;I>0;I--)if(Q+=A[I-1],B&&A[I-1]==="\\")Q+="\\";else if(A[I-1]==='"')B=!0,Q+="\\";else B=!1;return Q+='"',Q.split("").reverse().join("")}_cloneExecOptions(A){A=A||{};let Q={cwd:A.cwd||process.cwd(),env:A.env||process.env,silent:A.silent||!1,windowsVerbatimArguments:A.windowsVerbatimArguments||!1,failOnStdErr:A.failOnStdErr||!1,ignoreReturnCode:A.ignoreReturnCode||!1,delay:A.delay||1e4};return Q.outStream=A.outStream||process.stdout,Q.errStream=A.errStream||process.stderr,Q}_getSpawnOptions(A,Q){A=A||{};let B={};if(B.cwd=A.cwd,B.env=A.env,B.windowsVerbatimArguments=A.windowsVerbatimArguments||this._isCmdFile(),A.windowsVerbatimArguments)B.argv0=`"${Q}"`;return B}exec(){return Dw(this,void 0,void 0,function*(){if(!Fw.isRooted(this.toolPath)&&(this.toolPath.includes("/")||Ag&&this.toolPath.includes("\\")))this.toolPath=G5.resolve(process.cwd(),this.options.cwd||process.cwd(),this.toolPath);return this.toolPath=yield R5.which(this.toolPath,!0),new Promise((A,Q)=>Dw(this,void 0,void 0,function*(){this._debug(`exec tool: ${this.toolPath}`),this._debug("arguments:");for(let F of this.args)this._debug(`   ${F}`);let B=this._cloneExecOptions(this.options);if(!B.silent&&B.outStream)B.outStream.write(this._getCommandString(B)+eC.EOL);let I=new t0(B,this.toolPath);if(I.on("debug",(F)=>{this._debug(F)}),this.options.cwd&&!(yield Fw.exists(this.options.cwd)))return Q(new Error(`The cwd: ${this.options.cwd} does not exist!`));let E=this._getSpawnFileName(),C=U5.spawn(E,this._getSpawnArgs(B),this._getSpawnOptions(this.options,E)),g="";if(C.stdout)C.stdout.on("data",(F)=>{if(this.options.listeners&&this.options.listeners.stdout)this.options.listeners.stdout(F);if(!B.silent&&B.outStream)B.outStream.write(F);g=this._processLineBuffer(F,g,(Y)=>{if(this.options.listeners&&this.options.listeners.stdline)this.options.listeners.stdline(Y)})});let D="";if(C.stderr)C.stderr.on("data",(F)=>{if(I.processStderr=!0,this.options.listeners&&this.options.listeners.stderr)this.options.listeners.stderr(F);if(!B.silent&&B.errStream&&B.outStream)(B.failOnStdErr?B.errStream:B.outStream).write(F);D=this._processLineBuffer(F,D,(Y)=>{if(this.options.listeners&&this.options.listeners.errline)this.options.listeners.errline(Y)})});if(C.on("error",(F)=>{I.processError=F.message,I.processExited=!0,I.processClosed=!0,I.CheckComplete()}),C.on("exit",(F)=>{I.processExitCode=F,I.processExited=!0,this._debug(`Exit code ${F} received from tool '${this.toolPath}'`),I.CheckComplete()}),C.on("close",(F)=>{I.processExitCode=F,I.processExited=!0,I.processClosed=!0,this._debug(`STDIO streams have closed for tool '${this.toolPath}'`),I.CheckComplete()}),I.on("done",(F,Y)=>{if(g.length>0)this.emit("stdline",g);if(D.length>0)this.emit("errline",D);if(C.removeAllListeners(),F)Q(F);else A(Y)}),this.options.input){if(!C.stdin)throw new Error("child process missing stdin");C.stdin.end(this.options.input)}}))})}}dA.ToolRunner=Yw;function M5(A){let Q=[],B=!1,I=!1,E="";function C(g){if(I&&g!=='"')E+="\\";E+=g,I=!1}for(let g=0;g<A.length;g++){let D=A.charAt(g);if(D==='"'){if(!I)B=!B;else C(D);continue}if(D==="\\"&&I){C(D);continue}if(D==="\\"&&B){I=!0;continue}if(D===" "&&!B){if(E.length>0)Q.push(E),E="";continue}C(D)}if(E.length>0)Q.push(E.trim());return Q}dA.argStringToArray=M5;class t0 extends Nw.EventEmitter{constructor(A,Q){super();if(this.processClosed=!1,this.processError="",this.processExitCode=0,this.processExited=!1,this.processStderr=!1,this.delay=1e4,this.done=!1,this.timeout=null,!Q)throw new Error("toolPath must not be empty");if(this.options=A,this.toolPath=Q,A.delay)this.delay=A.delay}CheckComplete(){if(this.done)return;if(this.processClosed)this._setResult();else if(this.processExited)this.timeout=w5.setTimeout(t0.HandleTimeout,this.delay,this)}_debug(A){this.emit("debug",A)}_setResult(){let A;if(this.processExited){if(this.processError)A=new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);else if(this.processExitCode!==0&&!this.options.ignoreReturnCode)A=new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);else if(this.processStderr&&this.options.failOnStdErr)A=new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`)}if(this.timeout)clearTimeout(this.timeout),this.timeout=null;this.done=!0,this.emit("done",A,this.processExitCode)}static HandleTimeout(A){if(A.done)return;if(!A.processClosed&&A.processExited){let Q=`The STDIO streams did not close within ${A.delay/1000} seconds of the exit event from process '${A.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;A._debug(Q)}A._setResult()}}});var Mw=L((lA)=>{var L5=lA&&lA.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;Object.defineProperty(A,I,{enumerable:!0,get:function(){return Q[B]}})}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),V5=lA&&lA.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),W5=lA&&lA.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.hasOwnProperty.call(A,B))L5(Q,A,B)}return V5(Q,A),Q},Rw=lA&&lA.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})};Object.defineProperty(lA,"__esModule",{value:!0});lA.getExecOutput=lA.exec=void 0;var Uw=G("string_decoder"),Gw=W5(Jw());function ww(A,Q,B){return Rw(this,void 0,void 0,function*(){let I=Gw.argStringToArray(A);if(I.length===0)throw new Error("Parameter 'commandLine' cannot be null or empty.");let E=I[0];return Q=I.slice(1).concat(Q||[]),new Gw.ToolRunner(E,Q,B).exec()})}lA.exec=ww;function Z5(A,Q,B){var I,E;return Rw(this,void 0,void 0,function*(){let C="",g="",D=new Uw.StringDecoder("utf8"),F=new Uw.StringDecoder("utf8"),Y=(I=B===null||B===void 0?void 0:B.listeners)===null||I===void 0?void 0:I.stdout,N=(E=B===null||B===void 0?void 0:B.listeners)===null||E===void 0?void 0:E.stderr,J=(M)=>{if(g+=F.write(M),N)N(M)},U=(M)=>{if(C+=D.write(M),Y)Y(M)},R=Object.assign(Object.assign({},B===null||B===void 0?void 0:B.listeners),{stdout:U,stderr:J}),w=yield ww(A,Q,Object.assign(Object.assign({},B),{listeners:R}));return C+=D.end(),g+=F.end(),{exitCode:w,stdout:C,stderr:g}})}lA.getExecOutput=Z5});var Vw=L((v)=>{var X5=v&&v.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;var E=Object.getOwnPropertyDescriptor(Q,B);if(!E||("get"in E?!Q.__esModule:E.writable||E.configurable))E={enumerable:!0,get:function(){return Q[B]}};Object.defineProperty(A,I,E)}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),S5=v&&v.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),K5=v&&v.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.prototype.hasOwnProperty.call(A,B))X5(Q,A,B)}return S5(Q,A),Q},Bg=v&&v.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})},z5=v&&v.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(v,"__esModule",{value:!0});v.getDetails=v.isLinux=v.isMacOS=v.isWindows=v.arch=v.platform=void 0;var Lw=z5(G("os")),Qg=K5(Mw()),H5=()=>Bg(void 0,void 0,void 0,function*(){let{stdout:A}=yield Qg.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"',void 0,{silent:!0}),{stdout:Q}=yield Qg.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"',void 0,{silent:!0});return{name:Q.trim(),version:A.trim()}}),x5=()=>Bg(void 0,void 0,void 0,function*(){var A,Q,B,I;let{stdout:E}=yield Qg.getExecOutput("sw_vers",void 0,{silent:!0}),C=(Q=(A=E.match(/ProductVersion:\s*(.+)/))===null||A===void 0?void 0:A[1])!==null&&Q!==void 0?Q:"";return{name:(I=(B=E.match(/ProductName:\s*(.+)/))===null||B===void 0?void 0:B[1])!==null&&I!==void 0?I:"",version:C}}),h5=()=>Bg(void 0,void 0,void 0,function*(){let{stdout:A}=yield Qg.getExecOutput("lsb_release",["-i","-r","-s"],{silent:!0}),[Q,B]=A.trim().split(`
`);return{name:Q,version:B}});v.platform=Lw.default.platform();v.arch=Lw.default.arch();v.isWindows=v.platform==="win32";v.isMacOS=v.platform==="darwin";v.isLinux=v.platform==="linux";function T5(){return Bg(this,void 0,void 0,function*(){return Object.assign(Object.assign({},yield v.isWindows?H5():v.isMacOS?x5():h5()),{platform:v.platform,arch:v.arch,isWindows:v.isWindows,isMacOS:v.isMacOS,isLinux:v.isLinux})})}v.getDetails=T5});var Iw=L((X)=>{var j5=X&&X.__createBinding||(Object.create?function(A,Q,B,I){if(I===void 0)I=B;var E=Object.getOwnPropertyDescriptor(Q,B);if(!E||("get"in E?!Q.__esModule:E.writable||E.configurable))E={enumerable:!0,get:function(){return Q[B]}};Object.defineProperty(A,I,E)}:function(A,Q,B,I){if(I===void 0)I=B;A[I]=Q[B]}),$5=X&&X.__setModuleDefault||(Object.create?function(A,Q){Object.defineProperty(A,"default",{enumerable:!0,value:Q})}:function(A,Q){A.default=Q}),AF=X&&X.__importStar||function(A){if(A&&A.__esModule)return A;var Q={};if(A!=null){for(var B in A)if(B!=="default"&&Object.prototype.hasOwnProperty.call(A,B))j5(Q,A,B)}return $5(Q,A),Q},Ww=X&&X.__awaiter||function(A,Q,B,I){function E(C){return C instanceof B?C:new B(function(g){g(C)})}return new(B||(B=Promise))(function(C,g){function D(N){try{Y(I.next(N))}catch(J){g(J)}}function F(N){try{Y(I.throw(N))}catch(J){g(J)}}function Y(N){N.done?C(N.value):E(N.value).then(D,F)}Y((I=I.apply(A,Q||[])).next())})};Object.defineProperty(X,"__esModule",{value:!0});X.platform=X.toPlatformPath=X.toWin32Path=X.toPosixPath=X.markdownSummary=X.summary=X.getIDToken=X.getState=X.saveState=X.group=X.endGroup=X.startGroup=X.info=X.notice=X.warning=X.error=X.debug=X.isDebug=X.setFailed=X.setCommandEcho=X.setOutput=X.getBooleanInput=X.getMultilineInput=X.getInput=X.addPath=X.setSecret=X.exportVariable=X.ExitCode=void 0;var RQ=NF(),kB=UF(),HI=VE(),Zw=AF(G("os")),y5=AF(G("path")),q5=Bw(),e0;(function(A){A[A.Success=0]="Success",A[A.Failure=1]="Failure"})(e0||(X.ExitCode=e0={}));function O5(A,Q){let B=HI.toCommandValue(Q);if(process.env[A]=B,process.env.GITHUB_ENV||"")return kB.issueFileCommand("ENV",kB.prepareKeyValueMessage(A,Q));RQ.issueCommand("set-env",{name:A},B)}X.exportVariable=O5;function P5(A){RQ.issueCommand("add-mask",{},A)}X.setSecret=P5;function k5(A){if(process.env.GITHUB_PATH||"")kB.issueFileCommand("PATH",A);else RQ.issueCommand("add-path",{},A);process.env.PATH=`${A}${y5.delimiter}${process.env.PATH}`}X.addPath=k5;function QF(A,Q){let B=process.env[`INPUT_${A.replace(/ /g,"_").toUpperCase()}`]||"";if(Q&&Q.required&&!B)throw new Error(`Input required and not supplied: ${A}`);if(Q&&Q.trimWhitespace===!1)return B;return B.trim()}X.getInput=QF;function _5(A,Q){let B=QF(A,Q).split(`
`).filter((I)=>I!=="");if(Q&&Q.trimWhitespace===!1)return B;return B.map((I)=>I.trim())}X.getMultilineInput=_5;function f5(A,Q){let B=["true","True","TRUE"],I=["false","False","FALSE"],E=QF(A,Q);if(B.includes(E))return!0;if(I.includes(E))return!1;throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${A}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``)}X.getBooleanInput=f5;function v5(A,Q){if(process.env.GITHUB_OUTPUT||"")return kB.issueFileCommand("OUTPUT",kB.prepareKeyValueMessage(A,Q));process.stdout.write(Zw.EOL),RQ.issueCommand("set-output",{name:A},HI.toCommandValue(Q))}X.setOutput=v5;function b5(A){RQ.issue("echo",A?"on":"off")}X.setCommandEcho=b5;function m5(A){process.exitCode=e0.Failure,Xw(A)}X.setFailed=m5;function c5(){return process.env.RUNNER_DEBUG==="1"}X.isDebug=c5;function u5(A){RQ.issueCommand("debug",{},A)}X.debug=u5;function Xw(A,Q={}){RQ.issueCommand("error",HI.toCommandProperties(Q),A instanceof Error?A.toString():A)}X.error=Xw;function p5(A,Q={}){RQ.issueCommand("warning",HI.toCommandProperties(Q),A instanceof Error?A.toString():A)}X.warning=p5;function d5(A,Q={}){RQ.issueCommand("notice",HI.toCommandProperties(Q),A instanceof Error?A.toString():A)}X.notice=d5;function l5(A){process.stdout.write(A+Zw.EOL)}X.info=l5;function Sw(A){RQ.issue("group",A)}X.startGroup=Sw;function Kw(){RQ.issue("endgroup")}X.endGroup=Kw;function i5(A,Q){return Ww(this,void 0,void 0,function*(){Sw(A);let B;try{B=yield Q()}finally{Kw()}return B})}X.group=i5;function n5(A,Q){if(process.env.GITHUB_STATE||"")return kB.issueFileCommand("STATE",kB.prepareKeyValueMessage(A,Q));RQ.issueCommand("save-state",{name:A},HI.toCommandValue(Q))}X.saveState=n5;function o5(A){return process.env[`STATE_${A}`]||""}X.getState=o5;function a5(A){return Ww(this,void 0,void 0,function*(){return yield q5.OidcClient.getIDToken(A)})}X.getIDToken=a5;var s5=r0();Object.defineProperty(X,"summary",{enumerable:!0,get:function(){return s5.summary}});var r5=r0();Object.defineProperty(X,"markdownSummary",{enumerable:!0,get:function(){return r5.markdownSummary}});var BF=gw();Object.defineProperty(X,"toPosixPath",{enumerable:!0,get:function(){return BF.toPosixPath}});Object.defineProperty(X,"toWin32Path",{enumerable:!0,get:function(){return BF.toWin32Path}});Object.defineProperty(X,"toPlatformPath",{enumerable:!0,get:function(){return BF.toPlatformPath}});X.platform=AF(Vw())});export default Iw();
export{a2 as a,e2 as b,Mw as c,Iw as d};

//# debugId=5D776F1292AD298C64756E2164756E21
//# sourceMappingURL=data:application/json;base64,
