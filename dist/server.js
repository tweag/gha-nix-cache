import{a as E,b as J,c as L,d as M}from"./index-657qg6mr.js";var U=L(),V=M(),I=J(),C=E("node:fs/promises"),N=E("node:child_process"),O=E("node:http");process.on("uncaughtException",function(x){console.error(x&&x.stack?x.stack:x),process.exit(1)});async function P(){let x=(await C.open("stderr.log","a")).createWriteStream();process.stdout.write=process.stderr.write=x.write.bind(x);let z="bin";await I.mkdirP(z);for(let B of["bash","ln"])await C.symlink(await I.which(B),`${z}/${B}`);await C.symlink(`${import.meta.dirname}/../tarshim.sh`,`${z}/tar`),process.env.PATH=z,delete process.env.GITHUB_WORKSPACE}async function Q(x){let z=N.fork(`${import.meta.dirname}/restore.js`,[],{env:{...process.env,TARGET_FILE_NAME:x}});await new Promise((B,A)=>{z.on("close",(G,H)=>{if(G==0)B();else if(H)A(`Child process stopped because of signal ${H}`);else A(`Child process exited with code ${G}`)})})}function R(x){if(x.startsWith("/nar/"))return x.slice(5);return x.slice(1)}async function S(x,z){if(x.method!="GET"){z.writeHead(400),z.end();return}let B=R(x.url);try{await Q(B);let A=await C.open(B);z.writeHead(200),await A.createReadStream().pipe(z)}catch(A){if(A.code==="ENOENT"){z.writeHead(404),z.end();return}z.writeHead(500),console.error(A&&A.stack?A.stack:A),z.end(A.message)}}await P();var T=O.createServer(S);T.listen(8080,()=>{process.send("started")});console.error("Is this running?");

//# debugId=2695AFF6286DB5A564756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3NlcnZlci5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJjb25zdCBjb3JlID0gcmVxdWlyZSgnQGFjdGlvbnMvY29yZScpO1xuY29uc3QgY2FjaGUgPSByZXF1aXJlKCdAYWN0aW9ucy9jYWNoZScpO1xuY29uc3QgaW8gPSByZXF1aXJlKCdAYWN0aW9ucy9pbycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdub2RlOmZzL3Byb21pc2VzJyk7XG5jb25zdCBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZSgnbm9kZTpjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnbm9kZTpodHRwJyk7XG5cbnByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgZnVuY3Rpb24oZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcigoZXJyb3IgJiYgZXJyb3Iuc3RhY2spID8gZXJyb3Iuc3RhY2sgOiBlcnJvcik7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgY29uc3QgbG9nRmlsZSA9IChhd2FpdCBmcy5vcGVuKGBzdGRlcnIubG9nYCwgJ2EnKSkuY3JlYXRlV3JpdGVTdHJlYW0oKTtcbiAgcHJvY2Vzcy5zdGRvdXQud3JpdGUgPSBwcm9jZXNzLnN0ZGVyci53cml0ZSA9IGxvZ0ZpbGUud3JpdGUuYmluZChsb2dGaWxlKTtcblxuICBjb25zdCBiaW5EaXIgPSBgYmluYDtcbiAgYXdhaXQgaW8ubWtkaXJQKGJpbkRpcik7XG4gIGZvciAoY29uc3QgYmluIG9mIFtcImJhc2hcIiwgXCJsblwiXSkge1xuICAgIGF3YWl0IGZzLnN5bWxpbmsoYXdhaXQgaW8ud2hpY2goYmluKSwgYCR7YmluRGlyfS8ke2Jpbn1gKVxuICB9XG4gIGF3YWl0IGZzLnN5bWxpbmsoYCR7aW1wb3J0Lm1ldGEuZGlybmFtZX0vLi4vdGFyc2hpbS5zaGAsIGAke2JpbkRpcn0vdGFyYClcbiAgcHJvY2Vzcy5lbnYuUEFUSCA9IGJpbkRpcjtcblxuICAvLyBGb3JjZSBjYWNoZSB0byByZXN0b3JlIHRvIGN3ZFxuICBkZWxldGUgcHJvY2Vzcy5lbnZbXCJHSVRIVUJfV09SS1NQQUNFXCJdO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzYXZlKG5hbWUpIHtcbiAgY29uc3QgY2FjaGVJZCA9IGF3YWl0IGNhY2hlLnNhdmVDYWNoZShbbmFtZV0sIG5hbWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXN0b3JlKG5hbWUpIHtcbiAgY29uc3QgY2hpbGQgPSBjaGlsZF9wcm9jZXNzLmZvcmsoYCR7aW1wb3J0Lm1ldGEuZGlybmFtZX0vcmVzdG9yZS5qc2AsIFtdLCB7XG4gICAgZW52OiB7Li4ucHJvY2Vzcy5lbnYsIFRBUkdFVF9GSUxFX05BTUU6IG5hbWV9LFxuICB9KTtcbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNoaWxkLm9uKCdjbG9zZScsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIGlmIChjb2RlID09IDApIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIGlmIChzaWduYWwpIHtcbiAgICAgICAgcmVqZWN0KGBDaGlsZCBwcm9jZXNzIHN0b3BwZWQgYmVjYXVzZSBvZiBzaWduYWwgJHtzaWduYWx9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoYENoaWxkIHByb2Nlc3MgZXhpdGVkIHdpdGggY29kZSAke2NvZGV9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRLZXkodXJsKSB7XG4gIGlmICh1cmwuc3RhcnRzV2l0aChgL25hci9gKSkge1xuICAgIHJldHVybiB1cmwuc2xpY2UoNSk7XG4gIH1cbiAgcmV0dXJuIHVybC5zbGljZSgxKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlKHJlcSwgcmVzKSB7XG4gIGlmIChyZXEubWV0aG9kICE9ICdHRVQnKSB7XG4gICAgcmVzLndyaXRlSGVhZCg0MDApO1xuICAgIHJlcy5lbmQoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qga2V5ID0gZ2V0S2V5KHJlcS51cmwpO1xuICB0cnkge1xuICAgIGF3YWl0IHJlc3RvcmUoa2V5KTtcbiAgICBjb25zdCBmID0gYXdhaXQgZnMub3BlbihrZXkpO1xuICAgIHJlcy53cml0ZUhlYWQoMjAwKTtcbiAgICBhd2FpdCBmLmNyZWF0ZVJlYWRTdHJlYW0oKS5waXBlKHJlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICByZXMud3JpdGVIZWFkKDQwNCk7XG4gICAgICByZXMuZW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcy53cml0ZUhlYWQoNTAwKTtcbiAgICBjb25zb2xlLmVycm9yKChlcnJvciAmJiBlcnJvci5zdGFjaykgPyBlcnJvci5zdGFjayA6IGVycm9yKTtcbiAgICByZXMuZW5kKGVycm9yLm1lc3NhZ2UpO1xuICB9XG59XG5cbmF3YWl0IHNldHVwKCk7XG5jb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihoYW5kbGUpO1xuc2VydmVyLmxpc3Rlbig4MDgwLCAoKSA9PiB7XG4gIHByb2Nlc3Muc2VuZCgnc3RhcnRlZCcpO1xufSk7XG5jb25zb2xlLmVycm9yKFwiSXMgdGhpcyBydW5uaW5nP1wiKTtcbiIKICBdLAogICJtYXBwaW5ncyI6ICI2REFBQSxJQUFNLE1BQ0EsTUFDQSxNQUNBLHdCQUNBLDBCQUNBLGlCQUVOLFFBQVEsR0FBRyw0QkFBNkIsQ0FBQyxFQUFPLENBQzlDLFFBQVEsTUFBTyxHQUFTLEVBQU0sTUFBUyxFQUFNLE1BQVEsQ0FBSyxFQUMxRCxRQUFRLEtBQUssQ0FBQyxFQUNmLEVBRUQsZUFBZSxDQUFLLEVBQUcsQ0FDckIsSUFBTSxHQUFXLE1BQU0sRUFBRyxLQUFLLGFBQWMsR0FBRyxHQUFHLGtCQUFrQixFQUNyRSxRQUFRLE9BQU8sTUFBUSxRQUFRLE9BQU8sTUFBUSxFQUFRLE1BQU0sS0FBSyxDQUFPLEVBRXhFLElBQU0sRUFBUyxNQUNmLE1BQU0sRUFBRyxPQUFPLENBQU0sRUFDdEIsUUFBVyxJQUFPLENBQUMsT0FBUSxJQUFJLEVBQzdCLE1BQU0sRUFBRyxRQUFRLE1BQU0sRUFBRyxNQUFNLENBQUcsRUFBRyxHQUFHLEtBQVUsR0FBSyxFQUUxRCxNQUFNLEVBQUcsUUFBUSxHQUFHLFlBQVksd0JBQXlCLEdBQUcsT0FBWSxFQUN4RSxRQUFRLElBQUksS0FBTyxTQUdaLFFBQVEsSUFBSSxpQkFPckIsZUFBZSxDQUFPLENBQUMsRUFBTSxDQUMzQixJQUFNLEVBQVEsRUFBYyxLQUFLLEdBQUcsWUFBWSxxQkFBc0IsQ0FBQyxFQUFHLENBQ3hFLElBQUssSUFBSSxRQUFRLElBQUssaUJBQWtCLENBQUksQ0FDOUMsQ0FBQyxFQUNELE1BQU0sSUFBSSxRQUFRLENBQUMsRUFBUyxJQUFXLENBQ3JDLEVBQU0sR0FBRyxRQUFTLENBQUMsRUFBTSxJQUFXLENBQ2xDLEdBQUksR0FBUSxFQUNWLEVBQVEsVUFDQyxFQUNULEVBQU8sMkNBQTJDLEdBQVEsTUFFMUQsR0FBTyxrQ0FBa0MsR0FBTSxFQUVsRCxFQUNGLEVBR0gsU0FBUyxDQUFNLENBQUMsRUFBSyxDQUNuQixHQUFJLEVBQUksV0FBVyxPQUFPLEVBQ3hCLE9BQU8sRUFBSSxNQUFNLENBQUMsRUFFcEIsT0FBTyxFQUFJLE1BQU0sQ0FBQyxFQUdwQixlQUFlLENBQU0sQ0FBQyxFQUFLLEVBQUssQ0FDOUIsR0FBSSxFQUFJLFFBQVUsTUFBTyxDQUN2QixFQUFJLFVBQVUsR0FBRyxFQUNqQixFQUFJLElBQUksRUFDUixPQUVGLElBQU0sRUFBTSxFQUFPLEVBQUksR0FBRyxFQUMxQixHQUFJLENBQ0YsTUFBTSxFQUFRLENBQUcsRUFDakIsSUFBTSxFQUFJLE1BQU0sRUFBRyxLQUFLLENBQUcsRUFDM0IsRUFBSSxVQUFVLEdBQUcsRUFDakIsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEtBQUssQ0FBRyxRQUM1QixFQUFQLENBQ0EsR0FBSSxFQUFNLE9BQVMsU0FBVSxDQUMzQixFQUFJLFVBQVUsR0FBRyxFQUNqQixFQUFJLElBQUksRUFDUixPQUVGLEVBQUksVUFBVSxHQUFHLEVBQ2pCLFFBQVEsTUFBTyxHQUFTLEVBQU0sTUFBUyxFQUFNLE1BQVEsQ0FBSyxFQUMxRCxFQUFJLElBQUksRUFBTSxPQUFPLEdBSXpCLE1BQU0sRUFBTSxFQUNaLElBQU0sRUFBUyxFQUFLLGFBQWEsQ0FBTSxFQUN2QyxFQUFPLE9BQU8sS0FBTSxJQUFNLENBQ3hCLFFBQVEsS0FBSyxTQUFTLEVBQ3ZCLEVBQ0QsUUFBUSxNQUFNLGtCQUFrQiIsCiAgImRlYnVnSWQiOiAiMjY5NUFGRjYyODZEQjVBNTY0NzU2RTIxNjQ3NTZFMjEiLAogICJuYW1lcyI6IFtdCn0=
