import{g as G,i as H}from"./index-w1dbetra.js";var Y=await import("./cache-xxrnqw90.js"),N=await import("node:child_process"),I=await import("node:fs/promises"),O=await import("node:http"),J=await import("./io-v21dydqq.js"),C=await import("node:process");C.on("uncaughtException",(x)=>{console.error(x&&x.stack?x.stack:x),C.exit(1)});async function P(){let x=await I.open("stderr.log","a");C.stdout.write=C.stderr.write=x.createWriteStream().write.bind(x);let z="bin";await J.mkdirP(z);for(let E of["bash","ln"])await I.symlink(await J.which(E),`${z}/${E}`);await I.symlink(`${import.meta.dirname}/../tarshim.sh`,`${z}/tar`),C.env.PATH=z,await J.mkdirP("upload"),delete C.env.GITHUB_WORKSPACE}async function Q(x){let z=N.fork(`${import.meta.dirname}/restore.js`,[],{env:{...C.env,TARGET_FILE_NAME:x}});await new Promise((E,B)=>{z.on("close",(L,M)=>{if(L===0)E();else if(M)B(new Error(`Child process stopped because of signal ${M}`));else B(new Error(`Child process exited with code ${L}`))})})}function R(x){if(x.startsWith("/nar/"))return x.slice(5);return x.slice(1)}async function T(x,z){if(x.method!=="GET"){z.writeHead(400),z.end();return}let E=R(x.url);try{await Q(E);let B=await I.open(E);z.writeHead(200),await B.createReadStream().pipe(z)}catch(B){if(B.code==="ENOENT"){z.writeHead(404),z.end();return}z.writeHead(500),console.error(B&&B.stack?B.stack:B),z.end(B.message)}}function V(){O.createServer(T).listen(8080,()=>{C.send("started")})}async function W(){let x=I.watch("upload",{recursive:!0});for await(let z of x)console.log(z)}async function X(){await P(),W(),V()}await X();

//# debugId=4DCAF680E4DBEC6B64756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3NlcnZlci5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJjb25zdCBjYWNoZSA9IGF3YWl0IGltcG9ydCgnQGFjdGlvbnMvY2FjaGUnKTtcbmNvbnN0IGNoaWxkX3Byb2Nlc3MgPSBhd2FpdCBpbXBvcnQoJ25vZGU6Y2hpbGRfcHJvY2VzcycpO1xuY29uc3QgZnMgPSBhd2FpdCBpbXBvcnQoJ25vZGU6ZnMvcHJvbWlzZXMnKTtcbmNvbnN0IGh0dHAgPSBhd2FpdCBpbXBvcnQoJ25vZGU6aHR0cCcpO1xuY29uc3QgaW8gPSBhd2FpdCBpbXBvcnQoJ0BhY3Rpb25zL2lvJyk7XG5jb25zdCBwcm9jZXNzID0gYXdhaXQgaW1wb3J0KCdub2RlOnByb2Nlc3MnKTtcblxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyb3IpID0+IHtcblx0Y29uc29sZS5lcnJvcihlcnJvciAmJiBlcnJvci5zdGFjayA/IGVycm9yLnN0YWNrIDogZXJyb3IpO1xuXHRwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gc2V0dXAoKSB7XG5cdGNvbnN0IGxvZ0ZpbGUgPSBhd2FpdCBmcy5vcGVuKCdzdGRlcnIubG9nJywgJ2EnKTtcblx0cHJvY2Vzcy5zdGRvdXQud3JpdGUgPSBwcm9jZXNzLnN0ZGVyci53cml0ZSA9IGxvZ0ZpbGVcblx0XHQuY3JlYXRlV3JpdGVTdHJlYW0oKVxuXHRcdC53cml0ZS5iaW5kKGxvZ0ZpbGUpO1xuXG5cdGNvbnN0IGJpbkRpciA9ICdiaW4nO1xuXHRhd2FpdCBpby5ta2RpclAoYmluRGlyKTtcblx0Zm9yIChjb25zdCBiaW5hcnkgb2YgWydiYXNoJywgJ2xuJ10pIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuXHRcdGF3YWl0IGZzLnN5bWxpbmsoYXdhaXQgaW8ud2hpY2goYmluYXJ5KSwgYCR7YmluRGlyfS8ke2JpbmFyeX1gKTtcblx0fVxuXG5cdGF3YWl0IGZzLnN5bWxpbmsoYCR7aW1wb3J0Lm1ldGEuZGlybmFtZX0vLi4vdGFyc2hpbS5zaGAsIGAke2JpbkRpcn0vdGFyYCk7XG5cdHByb2Nlc3MuZW52LlBBVEggPSBiaW5EaXI7XG5cblx0YXdhaXQgaW8ubWtkaXJQKCd1cGxvYWQnKTtcblx0Ly8gRm9yY2UgY2FjaGUgdG8gcmVzdG9yZSB0byBjd2Rcblx0ZGVsZXRlIHByb2Nlc3MuZW52LkdJVEhVQl9XT1JLU1BBQ0U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9zYXZlKG5hbWUpIHtcblx0Y29uc3QgX2NhY2hlSWQgPSBhd2FpdCBjYWNoZS5zYXZlQ2FjaGUoW25hbWVdLCBuYW1lKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzdG9yZShuYW1lKSB7XG5cdGNvbnN0IGNoaWxkID0gY2hpbGRfcHJvY2Vzcy5mb3JrKGAke2ltcG9ydC5tZXRhLmRpcm5hbWV9L3Jlc3RvcmUuanNgLCBbXSwge1xuXHRcdGVudjogey4uLnByb2Nlc3MuZW52LCBUQVJHRVRfRklMRV9OQU1FOiBuYW1lfSxcblx0fSk7XG5cdGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRjaGlsZC5vbignY2xvc2UnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG5cdFx0XHRpZiAoY29kZSA9PT0gMCkge1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHNpZ25hbCkge1xuXHRcdFx0XHRyZWplY3QobmV3IEVycm9yKGBDaGlsZCBwcm9jZXNzIHN0b3BwZWQgYmVjYXVzZSBvZiBzaWduYWwgJHtzaWduYWx9YCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihgQ2hpbGQgcHJvY2VzcyBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZX1gKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXRLZXkodXJsKSB7XG5cdGlmICh1cmwuc3RhcnRzV2l0aCgnL25hci8nKSkge1xuXHRcdHJldHVybiB1cmwuc2xpY2UoNSk7XG5cdH1cblxuXHRyZXR1cm4gdXJsLnNsaWNlKDEpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGUocmVxdWVzdCwgcmVzcG9uc2UpIHtcblx0aWYgKHJlcXVlc3QubWV0aG9kICE9PSAnR0VUJykge1xuXHRcdHJlc3BvbnNlLndyaXRlSGVhZCg0MDApO1xuXHRcdHJlc3BvbnNlLmVuZCgpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGtleSA9IGdldEtleShyZXF1ZXN0LnVybCk7XG5cdHRyeSB7XG5cdFx0YXdhaXQgcmVzdG9yZShrZXkpO1xuXHRcdGNvbnN0IGYgPSBhd2FpdCBmcy5vcGVuKGtleSk7XG5cdFx0cmVzcG9uc2Uud3JpdGVIZWFkKDIwMCk7XG5cdFx0YXdhaXQgZi5jcmVhdGVSZWFkU3RyZWFtKCkucGlwZShyZXNwb25zZSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGVycm9yLmNvZGUgPT09ICdFTk9FTlQnKSB7XG5cdFx0XHRyZXNwb25zZS53cml0ZUhlYWQoNDA0KTtcblx0XHRcdHJlc3BvbnNlLmVuZCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJlc3BvbnNlLndyaXRlSGVhZCg1MDApO1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IgJiYgZXJyb3Iuc3RhY2sgPyBlcnJvci5zdGFjayA6IGVycm9yKTtcblx0XHRyZXNwb25zZS5lbmQoZXJyb3IubWVzc2FnZSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gc3RhcnRTZXJ2ZXIoKSB7XG5cdGNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGhhbmRsZSk7XG5cdHNlcnZlci5saXN0ZW4oODA4MCwgKCkgPT4ge1xuXHRcdHByb2Nlc3Muc2VuZCgnc3RhcnRlZCcpO1xuXHR9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gd2F0Y2hBbmRVcGxvYWQoKSB7XG5cdGNvbnN0IHdhdGNoZXIgPSBmcy53YXRjaCgndXBsb2FkJywge3JlY3Vyc2l2ZTogdHJ1ZX0pO1xuXHRmb3IgYXdhaXQgKGNvbnN0IGV2ZW50IG9mIHdhdGNoZXIpIHtcblx0XHRjb25zb2xlLmxvZyhldmVudCk7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcblx0YXdhaXQgc2V0dXAoKTtcblx0d2F0Y2hBbmRVcGxvYWQoKTtcblx0c3RhcnRTZXJ2ZXIoKTtcbn1cblxuYXdhaXQgbWFpbigpO1xuIgogIF0sCiAgIm1hcHBpbmdzIjogIitDQUFBLElBQU0sRUFBUSxLQUFhLCtCQUNyQixFQUFnQixLQUFhLDhCQUM3QixFQUFLLEtBQWEsNEJBQ2xCLEVBQU8sS0FBYSxxQkFDcEIsRUFBSyxLQUFhLDRCQUNsQixFQUFVLEtBQWEsd0JBRTdCLEVBQVEsR0FBRyxvQkFBcUIsQ0FBQyxJQUFVLENBQzFDLFFBQVEsTUFBTSxHQUFTLEVBQU0sTUFBUSxFQUFNLE1BQVEsQ0FBSyxFQUN4RCxFQUFRLEtBQUssQ0FBQyxFQUNkLEVBRUQsZUFBZSxDQUFLLEVBQUcsQ0FDdEIsSUFBTSxFQUFVLE1BQU0sRUFBRyxLQUFLLGFBQWMsR0FBRyxFQUMvQyxFQUFRLE9BQU8sTUFBUSxFQUFRLE9BQU8sTUFBUSxFQUM1QyxrQkFBa0IsRUFDbEIsTUFBTSxLQUFLLENBQU8sRUFFcEIsSUFBTSxFQUFTLE1BQ2YsTUFBTSxFQUFHLE9BQU8sQ0FBTSxFQUN0QixRQUFXLElBQVUsQ0FBQyxPQUFRLElBQUksRUFFakMsTUFBTSxFQUFHLFFBQVEsTUFBTSxFQUFHLE1BQU0sQ0FBTSxFQUFHLEdBQUcsS0FBVSxHQUFRLEVBRy9ELE1BQU0sRUFBRyxRQUFRLEdBQUcsWUFBWSx3QkFBeUIsR0FBRyxPQUFZLEVBQ3hFLEVBQVEsSUFBSSxLQUFPLEVBRW5CLE1BQU0sRUFBRyxPQUFPLFFBQVEsU0FFakIsRUFBUSxJQUFJLGlCQU9wQixlQUFlLENBQU8sQ0FBQyxFQUFNLENBQzVCLElBQU0sRUFBUSxFQUFjLEtBQUssR0FBRyxZQUFZLHFCQUFzQixDQUFDLEVBQUcsQ0FDekUsSUFBSyxJQUFJLEVBQVEsSUFBSyxpQkFBa0IsQ0FBSSxDQUM3QyxDQUFDLEVBQ0QsTUFBTSxJQUFJLFFBQVEsQ0FBQyxFQUFTLElBQVcsQ0FDdEMsRUFBTSxHQUFHLFFBQVMsQ0FBQyxFQUFNLElBQVcsQ0FDbkMsR0FBSSxJQUFTLEVBQ1osRUFBUSxVQUNFLEVBQ1YsRUFBTyxJQUFJLE1BQU0sMkNBQTJDLEdBQVEsQ0FBQyxNQUVyRSxHQUFPLElBQUksTUFBTSxrQ0FBa0MsR0FBTSxDQUFDLEVBRTNELEVBQ0QsRUFHRixTQUFTLENBQU0sQ0FBQyxFQUFLLENBQ3BCLEdBQUksRUFBSSxXQUFXLE9BQU8sRUFDekIsT0FBTyxFQUFJLE1BQU0sQ0FBQyxFQUduQixPQUFPLEVBQUksTUFBTSxDQUFDLEVBR25CLGVBQWUsQ0FBTSxDQUFDLEVBQVMsRUFBVSxDQUN4QyxHQUFJLEVBQVEsU0FBVyxNQUFPLENBQzdCLEVBQVMsVUFBVSxHQUFHLEVBQ3RCLEVBQVMsSUFBSSxFQUNiLE9BR0QsSUFBTSxFQUFNLEVBQU8sRUFBUSxHQUFHLEVBQzlCLEdBQUksQ0FDSCxNQUFNLEVBQVEsQ0FBRyxFQUNqQixJQUFNLEVBQUksTUFBTSxFQUFHLEtBQUssQ0FBRyxFQUMzQixFQUFTLFVBQVUsR0FBRyxFQUN0QixNQUFNLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxDQUFRLFFBQ2hDLEVBQVAsQ0FDRCxHQUFJLEVBQU0sT0FBUyxTQUFVLENBQzVCLEVBQVMsVUFBVSxHQUFHLEVBQ3RCLEVBQVMsSUFBSSxFQUNiLE9BR0QsRUFBUyxVQUFVLEdBQUcsRUFDdEIsUUFBUSxNQUFNLEdBQVMsRUFBTSxNQUFRLEVBQU0sTUFBUSxDQUFLLEVBQ3hELEVBQVMsSUFBSSxFQUFNLE9BQU8sR0FJNUIsU0FBUyxDQUFXLEVBQUcsQ0FFdEIsQUFEZSxFQUFLLGFBQWEsQ0FBTSxFQUNoQyxPQUFPLEtBQU0sSUFBTSxDQUN6QixFQUFRLEtBQUssU0FBUyxFQUN0QixFQUdGLGVBQWUsQ0FBYyxFQUFHLENBQy9CLElBQU0sRUFBVSxFQUFHLE1BQU0sU0FBVSxDQUFDLFVBQVcsRUFBSSxDQUFDLEVBQ3BELGNBQWlCLEtBQVMsRUFDekIsUUFBUSxJQUFJLENBQUssRUFJbkIsZUFBZSxDQUFJLEVBQUcsQ0FDckIsTUFBTSxFQUFNLEVBQ1osRUFBZSxFQUNmLEVBQVksRUFHYixNQUFNLEVBQUsiLAogICJkZWJ1Z0lkIjogIjREQ0FGNjgwRTREQkVDNkI2NDc1NkUyMTY0NzU2RTIxIiwKICAibmFtZXMiOiBbXQp9
